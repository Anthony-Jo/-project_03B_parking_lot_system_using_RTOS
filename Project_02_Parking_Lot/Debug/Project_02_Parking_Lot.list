
Project_02_Parking_Lot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006808  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08006918  08006918  00016918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a60  08006a60  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006a60  08006a60  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a60  08006a60  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a60  08006a60  00016a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a64  08006a64  00016a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000074  08006adc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08006adc  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a4e5  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fda  00000000  00000000  0003a582  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d8  00000000  00000000  0003d560  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001070  00000000  00000000  0003e738  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001765b  00000000  00000000  0003f7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000101b1  00000000  00000000  00056e03  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00079f21  00000000  00000000  00066fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0ed5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e48  00000000  00000000  000e0f50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08006900 	.word	0x08006900

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08006900 	.word	0x08006900

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a1c      	ldr	r2, [pc, #112]	; (80009ac <HAL_UART_RxCpltCallback+0x80>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d131      	bne.n	80009a2 <HAL_UART_RxCpltCallback+0x76>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800093e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000942:	481b      	ldr	r0, [pc, #108]	; (80009b0 <HAL_UART_RxCpltCallback+0x84>)
 8000944:	f002 fe71 	bl	800362a <HAL_GPIO_TogglePin>
		Lift_Control_BT(BT_RxData);
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <HAL_UART_RxCpltCallback+0x88>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4618      	mov	r0, r3
 800094e:	f001 fa61 	bl	8001e14 <Lift_Control_BT>
		Gate_Control_BT(BT_RxData);
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <HAL_UART_RxCpltCallback+0x88>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	4618      	mov	r0, r3
 8000958:	f001 fa7e 	bl	8001e58 <Gate_Control_BT>
		static uint8_t tail = 0;
		if(BT_RxData != '\n')
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <HAL_UART_RxCpltCallback+0x88>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b0a      	cmp	r3, #10
 8000962:	d00d      	beq.n	8000980 <HAL_UART_RxCpltCallback+0x54>
		{
			BT_RxQueue[tail] = BT_RxData;
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <HAL_UART_RxCpltCallback+0x8c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_UART_RxCpltCallback+0x88>)
 800096c:	7819      	ldrb	r1, [r3, #0]
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <HAL_UART_RxCpltCallback+0x90>)
 8000970:	5499      	strb	r1, [r3, r2]
			tail++;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_UART_RxCpltCallback+0x8c>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	3301      	adds	r3, #1
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_UART_RxCpltCallback+0x8c>)
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	e00b      	b.n	8000998 <HAL_UART_RxCpltCallback+0x6c>
		}
		else
		{
			BT_RxQueue[tail] = '\0';
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <HAL_UART_RxCpltCallback+0x8c>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <HAL_UART_RxCpltCallback+0x90>)
 8000988:	2100      	movs	r1, #0
 800098a:	5499      	strb	r1, [r3, r2]
			tail = 0;
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_UART_RxCpltCallback+0x8c>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
			BT_RxFlag = 1;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <HAL_UART_RxCpltCallback+0x94>)
 8000994:	2201      	movs	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, &BT_RxData, 1);
 8000998:	2201      	movs	r2, #1
 800099a:	4906      	ldr	r1, [pc, #24]	; (80009b4 <HAL_UART_RxCpltCallback+0x88>)
 800099c:	4809      	ldr	r0, [pc, #36]	; (80009c4 <HAL_UART_RxCpltCallback+0x98>)
 800099e:	f004 ffc4 	bl	800592a <HAL_UART_Receive_IT>
	}

}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40013800 	.word	0x40013800
 80009b0:	40011000 	.word	0x40011000
 80009b4:	20000160 	.word	0x20000160
 80009b8:	200000c8 	.word	0x200000c8
 80009bc:	20000094 	.word	0x20000094
 80009c0:	20000090 	.word	0x20000090
 80009c4:	200001e8 	.word	0x200001e8

080009c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ca:	b099      	sub	sp, #100	; 0x64
 80009cc:	af0a      	add	r7, sp, #40	; 0x28
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ce:	f001 febd 	bl	800274c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d2:	f000 f8cf 	bl	8000b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d6:	f000 fb9f 	bl	8001118 <MX_GPIO_Init>
  MX_ADC1_Init();
 80009da:	f000 f93b 	bl	8000c54 <MX_ADC1_Init>
  MX_I2C1_Init();
 80009de:	f000 fa1b 	bl	8000e18 <MX_I2C1_Init>
  MX_TIM3_Init();
 80009e2:	f000 fb15 	bl	8001010 <MX_TIM3_Init>
  MX_ADC2_Init();
 80009e6:	f000 f9ad 	bl	8000d44 <MX_ADC2_Init>
  MX_TIM1_Init();
 80009ea:	f000 fa43 	bl	8000e74 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009ee:	f000 fac3 	bl	8000f78 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80009f2:	f000 fb67 	bl	80010c4 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80009f6:	f000 f918 	bl	8000c2a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80009fa:	484f      	ldr	r0, [pc, #316]	; (8000b38 <main+0x170>)
 80009fc:	f004 f839 	bl	8004a72 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1, &BT_RxData, 1);
 8000a00:	2201      	movs	r2, #1
 8000a02:	494e      	ldr	r1, [pc, #312]	; (8000b3c <main+0x174>)
 8000a04:	484e      	ldr	r0, [pc, #312]	; (8000b40 <main+0x178>)
 8000a06:	f004 ff90 	bl	800592a <HAL_UART_Receive_IT>

	LCD_Init();
 8000a0a:	f001 fbcd 	bl	80021a8 <LCD_Init>
	StepMotorStop();
 8000a0e:	f001 fd83 	bl	8002518 <StepMotorStop>
	ServoStart();
 8000a12:	f001 fd71 	bl	80024f8 <ServoStart>
	ServoRunEntrance(deg_ent);
 8000a16:	4b4b      	ldr	r3, [pc, #300]	; (8000b44 <main+0x17c>)
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f001 fce3 	bl	80023e8 <ServoRunEntrance>
	ServoRunExit(deg_ext);
 8000a22:	4b49      	ldr	r3, [pc, #292]	; (8000b48 <main+0x180>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f001 fd21 	bl	8002470 <ServoRunExit>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a34:	4845      	ldr	r0, [pc, #276]	; (8000b4c <main+0x184>)
 8000a36:	f002 fde0 	bl	80035fa <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		ADC_Value_1_Write(hadc1, ADC_Value_1);
 8000a3a:	4e45      	ldr	r6, [pc, #276]	; (8000b50 <main+0x188>)
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	9308      	str	r3, [sp, #32]
 8000a42:	466d      	mov	r5, sp
 8000a44:	f106 0410 	add.w	r4, r6, #16
 8000a48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a4c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a50:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000a54:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a58:	f000 ff4f 	bl	80018fa <ADC_Value_1_Write>
		Parking_Lot_ADC(ADC_Value_1, parkingLot_Flag);
 8000a5c:	1d3a      	adds	r2, r7, #4
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4611      	mov	r1, r2
 8000a64:	4618      	mov	r0, r3
 8000a66:	f001 f806 	bl	8001a76 <Parking_Lot_ADC>

		ADC_Value_2_Write(hadc2, ADC_Value_2);
 8000a6a:	4e3a      	ldr	r6, [pc, #232]	; (8000b54 <main+0x18c>)
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	9308      	str	r3, [sp, #32]
 8000a72:	466d      	mov	r5, sp
 8000a74:	f106 0410 	add.w	r4, r6, #16
 8000a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a7c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a80:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000a84:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a88:	f000 ff9f 	bl	80019ca <ADC_Value_2_Write>
		Gate_ADC(ADC_Value_2);
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 f87d 	bl	8001b90 <Gate_ADC>

		Lift_Control();
 8000a96:	f001 f99b 	bl	8001dd0 <Lift_Control>

		for (int i = 0 ; i < 5 ; i++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8000a9e:	e00c      	b.n	8000aba <main+0xf2>
		{
			parkingLot_Count += parkingLot_Flag[i];
 8000aa0:	1d3a      	adds	r2, r7, #4
 8000aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aa4:	4413      	add	r3, r2
 8000aa6:	781a      	ldrb	r2, [r3, #0]
 8000aa8:	4b2b      	ldr	r3, [pc, #172]	; (8000b58 <main+0x190>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4413      	add	r3, r2
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <main+0x190>)
 8000ab2:	701a      	strb	r2, [r3, #0]
		for (int i = 0 ; i < 5 ; i++)
 8000ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8000aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000abc:	2b04      	cmp	r3, #4
 8000abe:	ddef      	ble.n	8000aa0 <main+0xd8>
		}

		Message_OutPut(parkingLot_Count, buff);
 8000ac0:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <main+0x190>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4925      	ldr	r1, [pc, #148]	; (8000b5c <main+0x194>)
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 f916 	bl	8001cf8 <Message_OutPut>

		LCD_goto_XY(0, 0);
 8000acc:	2100      	movs	r1, #0
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f001 fbb0 	bl	8002234 <LCD_goto_XY>
		LCD_write_string(buff);
 8000ad4:	4821      	ldr	r0, [pc, #132]	; (8000b5c <main+0x194>)
 8000ad6:	f001 fb91 	bl	80021fc <LCD_write_string>

		sprintf(buff, "Available: %d", parkingLot_Count);
 8000ada:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <main+0x190>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	491f      	ldr	r1, [pc, #124]	; (8000b60 <main+0x198>)
 8000ae2:	481e      	ldr	r0, [pc, #120]	; (8000b5c <main+0x194>)
 8000ae4:	f005 fafa 	bl	80060dc <siprintf>
		LCD_goto_XY(1, 0);
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2001      	movs	r0, #1
 8000aec:	f001 fba2 	bl	8002234 <LCD_goto_XY>
		LCD_write_string(buff);
 8000af0:	481a      	ldr	r0, [pc, #104]	; (8000b5c <main+0x194>)
 8000af2:	f001 fb83 	bl	80021fc <LCD_write_string>

		sprintf(BT_Buff,"Parking Space: %d\n",parkingLot_Count);
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <main+0x190>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	4919      	ldr	r1, [pc, #100]	; (8000b64 <main+0x19c>)
 8000afe:	481a      	ldr	r0, [pc, #104]	; (8000b68 <main+0x1a0>)
 8000b00:	f005 faec 	bl	80060dc <siprintf>
		HAL_UART_Transmit(&huart1, &BT_Buff, sizeof(BT_Buff), 1000);
 8000b04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b08:	2214      	movs	r2, #20
 8000b0a:	4917      	ldr	r1, [pc, #92]	; (8000b68 <main+0x1a0>)
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <main+0x178>)
 8000b0e:	f004 fe73 	bl	80057f8 <HAL_UART_Transmit>
		sprintf(BT_Buff,"Current Floor: %d\n",floor + 1);
 8000b12:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <main+0x1a4>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	3301      	adds	r3, #1
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4915      	ldr	r1, [pc, #84]	; (8000b70 <main+0x1a8>)
 8000b1c:	4812      	ldr	r0, [pc, #72]	; (8000b68 <main+0x1a0>)
 8000b1e:	f005 fadd 	bl	80060dc <siprintf>
		HAL_UART_Transmit(&huart1, &BT_Buff, sizeof(BT_Buff), 1000);
 8000b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b26:	2214      	movs	r2, #20
 8000b28:	490f      	ldr	r1, [pc, #60]	; (8000b68 <main+0x1a0>)
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <main+0x178>)
 8000b2c:	f004 fe64 	bl	80057f8 <HAL_UART_Transmit>

		parkingLot_Count = 0;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <main+0x190>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
		ADC_Value_1_Write(hadc1, ADC_Value_1);
 8000b36:	e780      	b.n	8000a3a <main+0x72>
 8000b38:	20000268 	.word	0x20000268
 8000b3c:	20000160 	.word	0x20000160
 8000b40:	200001e8 	.word	0x200001e8
 8000b44:	200000ae 	.word	0x200000ae
 8000b48:	200000b0 	.word	0x200000b0
 8000b4c:	40011000 	.word	0x40011000
 8000b50:	200001b8 	.word	0x200001b8
 8000b54:	200000dc 	.word	0x200000dc
 8000b58:	200000ad 	.word	0x200000ad
 8000b5c:	20000164 	.word	0x20000164
 8000b60:	08006918 	.word	0x08006918
 8000b64:	08006928 	.word	0x08006928
 8000b68:	200000b4 	.word	0x200000b4
 8000b6c:	200000ac 	.word	0x200000ac
 8000b70:	0800693c 	.word	0x0800693c

08000b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b094      	sub	sp, #80	; 0x50
 8000b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b7e:	2228      	movs	r2, #40	; 0x28
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f005 faa2 	bl	80060cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bc0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f003 f968 	bl	8003ea0 <HAL_RCC_OscConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000bd6:	f000 fb49 	bl	800126c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bda:	230f      	movs	r3, #15
 8000bdc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 fbd2 	bl	80043a0 <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c02:	f000 fb33 	bl	800126c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c06:	2302      	movs	r3, #2
 8000c08:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c0e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	4618      	mov	r0, r3
 8000c14:	f003 fd90 	bl	8004738 <HAL_RCCEx_PeriphCLKConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c1e:	f000 fb25 	bl	800126c <Error_Handler>
  }
}
 8000c22:	bf00      	nop
 8000c24:	3750      	adds	r7, #80	; 0x50
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	201d      	movs	r0, #29
 8000c34:	f002 facf 	bl	80031d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c38:	201d      	movs	r0, #29
 8000c3a:	f002 fae8 	bl	800320e <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	201c      	movs	r0, #28
 8000c44:	f002 fac7 	bl	80031d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c48:	201c      	movs	r0, #28
 8000c4a:	f002 fae0 	bl	800320e <HAL_NVIC_EnableIRQ>
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000c64:	4b35      	ldr	r3, [pc, #212]	; (8000d3c <MX_ADC1_Init+0xe8>)
 8000c66:	4a36      	ldr	r2, [pc, #216]	; (8000d40 <MX_ADC1_Init+0xec>)
 8000c68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c6a:	4b34      	ldr	r3, [pc, #208]	; (8000d3c <MX_ADC1_Init+0xe8>)
 8000c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c72:	4b32      	ldr	r3, [pc, #200]	; (8000d3c <MX_ADC1_Init+0xe8>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c78:	4b30      	ldr	r3, [pc, #192]	; (8000d3c <MX_ADC1_Init+0xe8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c7e:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <MX_ADC1_Init+0xe8>)
 8000c80:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c86:	4b2d      	ldr	r3, [pc, #180]	; (8000d3c <MX_ADC1_Init+0xe8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 8000c8c:	4b2b      	ldr	r3, [pc, #172]	; (8000d3c <MX_ADC1_Init+0xe8>)
 8000c8e:	2205      	movs	r2, #5
 8000c90:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c92:	482a      	ldr	r0, [pc, #168]	; (8000d3c <MX_ADC1_Init+0xe8>)
 8000c94:	f001 fdae 	bl	80027f4 <HAL_ADC_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000c9e:	f000 fae5 	bl	800126c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000caa:	2307      	movs	r3, #7
 8000cac:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4822      	ldr	r0, [pc, #136]	; (8000d3c <MX_ADC1_Init+0xe8>)
 8000cb4:	f002 f856 	bl	8002d64 <HAL_ADC_ConfigChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000cbe:	f000 fad5 	bl	800126c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	4619      	mov	r1, r3
 8000cce:	481b      	ldr	r0, [pc, #108]	; (8000d3c <MX_ADC1_Init+0xe8>)
 8000cd0:	f002 f848 	bl	8002d64 <HAL_ADC_ConfigChannel>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000cda:	f000 fac7 	bl	800126c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4814      	ldr	r0, [pc, #80]	; (8000d3c <MX_ADC1_Init+0xe8>)
 8000cec:	f002 f83a 	bl	8002d64 <HAL_ADC_ConfigChannel>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000cf6:	f000 fab9 	bl	800126c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4619      	mov	r1, r3
 8000d06:	480d      	ldr	r0, [pc, #52]	; (8000d3c <MX_ADC1_Init+0xe8>)
 8000d08:	f002 f82c 	bl	8002d64 <HAL_ADC_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000d12:	f000 faab 	bl	800126c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d16:	2304      	movs	r3, #4
 8000d18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000d1a:	2305      	movs	r3, #5
 8000d1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	4619      	mov	r1, r3
 8000d22:	4806      	ldr	r0, [pc, #24]	; (8000d3c <MX_ADC1_Init+0xe8>)
 8000d24:	f002 f81e 	bl	8002d64 <HAL_ADC_ConfigChannel>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000d2e:	f000 fa9d 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200001b8 	.word	0x200001b8
 8000d40:	40012400 	.word	0x40012400

08000d44 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000d54:	4b2e      	ldr	r3, [pc, #184]	; (8000e10 <MX_ADC2_Init+0xcc>)
 8000d56:	4a2f      	ldr	r2, [pc, #188]	; (8000e14 <MX_ADC2_Init+0xd0>)
 8000d58:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d5a:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <MX_ADC2_Init+0xcc>)
 8000d5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d60:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000d62:	4b2b      	ldr	r3, [pc, #172]	; (8000e10 <MX_ADC2_Init+0xcc>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d68:	4b29      	ldr	r3, [pc, #164]	; (8000e10 <MX_ADC2_Init+0xcc>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d6e:	4b28      	ldr	r3, [pc, #160]	; (8000e10 <MX_ADC2_Init+0xcc>)
 8000d70:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d74:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d76:	4b26      	ldr	r3, [pc, #152]	; (8000e10 <MX_ADC2_Init+0xcc>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 4;
 8000d7c:	4b24      	ldr	r3, [pc, #144]	; (8000e10 <MX_ADC2_Init+0xcc>)
 8000d7e:	2204      	movs	r2, #4
 8000d80:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d82:	4823      	ldr	r0, [pc, #140]	; (8000e10 <MX_ADC2_Init+0xcc>)
 8000d84:	f001 fd36 	bl	80027f4 <HAL_ADC_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_ADC2_Init+0x4e>
  {
    Error_Handler();
 8000d8e:	f000 fa6d 	bl	800126c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d92:	2305      	movs	r3, #5
 8000d94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d96:	2301      	movs	r3, #1
 8000d98:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000d9a:	2307      	movs	r3, #7
 8000d9c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	4619      	mov	r1, r3
 8000da2:	481b      	ldr	r0, [pc, #108]	; (8000e10 <MX_ADC2_Init+0xcc>)
 8000da4:	f001 ffde 	bl	8002d64 <HAL_ADC_ConfigChannel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000dae:	f000 fa5d 	bl	800126c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000db2:	2306      	movs	r3, #6
 8000db4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000db6:	2302      	movs	r3, #2
 8000db8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4814      	ldr	r0, [pc, #80]	; (8000e10 <MX_ADC2_Init+0xcc>)
 8000dc0:	f001 ffd0 	bl	8002d64 <HAL_ADC_ConfigChannel>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000dca:	f000 fa4f 	bl	800126c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000dce:	2307      	movs	r3, #7
 8000dd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480d      	ldr	r0, [pc, #52]	; (8000e10 <MX_ADC2_Init+0xcc>)
 8000ddc:	f001 ffc2 	bl	8002d64 <HAL_ADC_ConfigChannel>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 8000de6:	f000 fa41 	bl	800126c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000dea:	2308      	movs	r3, #8
 8000dec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000dee:	2304      	movs	r3, #4
 8000df0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	4619      	mov	r1, r3
 8000df6:	4806      	ldr	r0, [pc, #24]	; (8000e10 <MX_ADC2_Init+0xcc>)
 8000df8:	f001 ffb4 	bl	8002d64 <HAL_ADC_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 8000e02:	f000 fa33 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200000dc 	.word	0x200000dc
 8000e14:	40012800 	.word	0x40012800

08000e18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <MX_I2C1_Init+0x50>)
 8000e1e:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <MX_I2C1_Init+0x54>)
 8000e20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <MX_I2C1_Init+0x50>)
 8000e24:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <MX_I2C1_Init+0x58>)
 8000e26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <MX_I2C1_Init+0x50>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <MX_I2C1_Init+0x50>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <MX_I2C1_Init+0x50>)
 8000e36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <MX_I2C1_Init+0x50>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <MX_I2C1_Init+0x50>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <MX_I2C1_Init+0x50>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <MX_I2C1_Init+0x50>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e54:	4804      	ldr	r0, [pc, #16]	; (8000e68 <MX_I2C1_Init+0x50>)
 8000e56:	f002 fc01 	bl	800365c <HAL_I2C_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e60:	f000 fa04 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	2000010c 	.word	0x2000010c
 8000e6c:	40005400 	.word	0x40005400
 8000e70:	000186a0 	.word	0x000186a0

08000e74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b092      	sub	sp, #72	; 0x48
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
 8000e94:	615a      	str	r2, [r3, #20]
 8000e96:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2220      	movs	r2, #32
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f005 f914 	bl	80060cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ea4:	4b32      	ldr	r3, [pc, #200]	; (8000f70 <MX_TIM1_Init+0xfc>)
 8000ea6:	4a33      	ldr	r2, [pc, #204]	; (8000f74 <MX_TIM1_Init+0x100>)
 8000ea8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8000eaa:	4b31      	ldr	r3, [pc, #196]	; (8000f70 <MX_TIM1_Init+0xfc>)
 8000eac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eb0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb2:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <MX_TIM1_Init+0xfc>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8000eb8:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <MX_TIM1_Init+0xfc>)
 8000eba:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000ebe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec0:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <MX_TIM1_Init+0xfc>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ec6:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <MX_TIM1_Init+0xfc>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ecc:	4b28      	ldr	r3, [pc, #160]	; (8000f70 <MX_TIM1_Init+0xfc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ed2:	4827      	ldr	r0, [pc, #156]	; (8000f70 <MX_TIM1_Init+0xfc>)
 8000ed4:	f003 fdf0 	bl	8004ab8 <HAL_TIM_PWM_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000ede:	f000 f9c5 	bl	800126c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000eee:	4619      	mov	r1, r3
 8000ef0:	481f      	ldr	r0, [pc, #124]	; (8000f70 <MX_TIM1_Init+0xfc>)
 8000ef2:	f004 fb8d 	bl	8005610 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000efc:	f000 f9b6 	bl	800126c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f00:	2360      	movs	r3, #96	; 0x60
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f10:	2300      	movs	r3, #0
 8000f12:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f14:	2300      	movs	r3, #0
 8000f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1c:	220c      	movs	r2, #12
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4813      	ldr	r0, [pc, #76]	; (8000f70 <MX_TIM1_Init+0xfc>)
 8000f22:	f003 ff2f 	bl	8004d84 <HAL_TIM_PWM_ConfigChannel>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000f2c:	f000 f99e 	bl	800126c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f48:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	4619      	mov	r1, r3
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <MX_TIM1_Init+0xfc>)
 8000f54:	f004 fba0 	bl	8005698 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000f5e:	f000 f985 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f62:	4803      	ldr	r0, [pc, #12]	; (8000f70 <MX_TIM1_Init+0xfc>)
 8000f64:	f000 fade 	bl	8001524 <HAL_TIM_MspPostInit>

}
 8000f68:	bf00      	nop
 8000f6a:	3748      	adds	r7, #72	; 0x48
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000228 	.word	0x20000228
 8000f74:	40012c00 	.word	0x40012c00

08000f78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f94:	4b1d      	ldr	r3, [pc, #116]	; (800100c <MX_TIM2_Init+0x94>)
 8000f96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5000-1;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_TIM2_Init+0x94>)
 8000f9e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000fa2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <MX_TIM2_Init+0x94>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36-1;
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_TIM2_Init+0x94>)
 8000fac:	2223      	movs	r2, #35	; 0x23
 8000fae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <MX_TIM2_Init+0x94>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_TIM2_Init+0x94>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fbc:	4813      	ldr	r0, [pc, #76]	; (800100c <MX_TIM2_Init+0x94>)
 8000fbe:	f003 fd2d 	bl	8004a1c <HAL_TIM_Base_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fc8:	f000 f950 	bl	800126c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480c      	ldr	r0, [pc, #48]	; (800100c <MX_TIM2_Init+0x94>)
 8000fda:	f003 ff99 	bl	8004f10 <HAL_TIM_ConfigClockSource>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fe4:	f000 f942 	bl	800126c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_TIM2_Init+0x94>)
 8000ff6:	f004 fb0b 	bl	8005610 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001000:	f000 f934 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000268 	.word	0x20000268

08001010 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001016:	f107 0320 	add.w	r3, r7, #32
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]
 800102e:	615a      	str	r2, [r3, #20]
 8001030:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001032:	4b22      	ldr	r3, [pc, #136]	; (80010bc <MX_TIM3_Init+0xac>)
 8001034:	4a22      	ldr	r2, [pc, #136]	; (80010c0 <MX_TIM3_Init+0xb0>)
 8001036:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8001038:	4b20      	ldr	r3, [pc, #128]	; (80010bc <MX_TIM3_Init+0xac>)
 800103a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800103e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001040:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <MX_TIM3_Init+0xac>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <MX_TIM3_Init+0xac>)
 8001048:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800104c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104e:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <MX_TIM3_Init+0xac>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <MX_TIM3_Init+0xac>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800105a:	4818      	ldr	r0, [pc, #96]	; (80010bc <MX_TIM3_Init+0xac>)
 800105c:	f003 fd2c 	bl	8004ab8 <HAL_TIM_PWM_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001066:	f000 f901 	bl	800126c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	4619      	mov	r1, r3
 8001078:	4810      	ldr	r0, [pc, #64]	; (80010bc <MX_TIM3_Init+0xac>)
 800107a:	f004 fac9 	bl	8005610 <HAL_TIMEx_MasterConfigSynchronization>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001084:	f000 f8f2 	bl	800126c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001088:	2360      	movs	r3, #96	; 0x60
 800108a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50-1;
 800108c:	2331      	movs	r3, #49	; 0x31
 800108e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	220c      	movs	r2, #12
 800109c:	4619      	mov	r1, r3
 800109e:	4807      	ldr	r0, [pc, #28]	; (80010bc <MX_TIM3_Init+0xac>)
 80010a0:	f003 fe70 	bl	8004d84 <HAL_TIM_PWM_ConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80010aa:	f000 f8df 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010ae:	4803      	ldr	r0, [pc, #12]	; (80010bc <MX_TIM3_Init+0xac>)
 80010b0:	f000 fa38 	bl	8001524 <HAL_TIM_MspPostInit>

}
 80010b4:	bf00      	nop
 80010b6:	3728      	adds	r7, #40	; 0x28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000178 	.word	0x20000178
 80010c0:	40000400 	.word	0x40000400

080010c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <MX_USART1_UART_Init+0x4c>)
 80010ca:	4a12      	ldr	r2, [pc, #72]	; (8001114 <MX_USART1_UART_Init+0x50>)
 80010cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <MX_USART1_UART_Init+0x4c>)
 80010d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <MX_USART1_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <MX_USART1_UART_Init+0x4c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <MX_USART1_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_USART1_UART_Init+0x4c>)
 80010ea:	220c      	movs	r2, #12
 80010ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <MX_USART1_UART_Init+0x4c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <MX_USART1_UART_Init+0x4c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <MX_USART1_UART_Init+0x4c>)
 80010fc:	f004 fb2f 	bl	800575e <HAL_UART_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001106:	f000 f8b1 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200001e8 	.word	0x200001e8
 8001114:	40013800 	.word	0x40013800

08001118 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112c:	4b3f      	ldr	r3, [pc, #252]	; (800122c <MX_GPIO_Init+0x114>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a3e      	ldr	r2, [pc, #248]	; (800122c <MX_GPIO_Init+0x114>)
 8001132:	f043 0310 	orr.w	r3, r3, #16
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b3c      	ldr	r3, [pc, #240]	; (800122c <MX_GPIO_Init+0x114>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f003 0310 	and.w	r3, r3, #16
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001144:	4b39      	ldr	r3, [pc, #228]	; (800122c <MX_GPIO_Init+0x114>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	4a38      	ldr	r2, [pc, #224]	; (800122c <MX_GPIO_Init+0x114>)
 800114a:	f043 0320 	orr.w	r3, r3, #32
 800114e:	6193      	str	r3, [r2, #24]
 8001150:	4b36      	ldr	r3, [pc, #216]	; (800122c <MX_GPIO_Init+0x114>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f003 0320 	and.w	r3, r3, #32
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115c:	4b33      	ldr	r3, [pc, #204]	; (800122c <MX_GPIO_Init+0x114>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a32      	ldr	r2, [pc, #200]	; (800122c <MX_GPIO_Init+0x114>)
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b30      	ldr	r3, [pc, #192]	; (800122c <MX_GPIO_Init+0x114>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001174:	4b2d      	ldr	r3, [pc, #180]	; (800122c <MX_GPIO_Init+0x114>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a2c      	ldr	r2, [pc, #176]	; (800122c <MX_GPIO_Init+0x114>)
 800117a:	f043 0308 	orr.w	r3, r3, #8
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b2a      	ldr	r3, [pc, #168]	; (800122c <MX_GPIO_Init+0x114>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001192:	4827      	ldr	r0, [pc, #156]	; (8001230 <MX_GPIO_Init+0x118>)
 8001194:	f002 fa31 	bl	80035fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8001198:	2200      	movs	r2, #0
 800119a:	f64f 4138 	movw	r1, #64568	; 0xfc38
 800119e:	4825      	ldr	r0, [pc, #148]	; (8001234 <MX_GPIO_Init+0x11c>)
 80011a0:	f002 fa2b 	bl	80035fa <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12 
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 4117 	mov.w	r1, #38656	; 0x9700
 80011aa:	4823      	ldr	r0, [pc, #140]	; (8001238 <MX_GPIO_Init+0x120>)
 80011ac:	f002 fa25 	bl	80035fa <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2302      	movs	r3, #2
 80011c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	4619      	mov	r1, r3
 80011c8:	4819      	ldr	r0, [pc, #100]	; (8001230 <MX_GPIO_Init+0x118>)
 80011ca:	f002 f8a5 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80011ce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80011d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	4619      	mov	r1, r3
 80011e2:	4813      	ldr	r0, [pc, #76]	; (8001230 <MX_GPIO_Init+0x118>)
 80011e4:	f002 f898 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13 
                           PB14 PB15 PB3 PB4 
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 80011e8:	f64f 4338 	movw	r3, #64568	; 0xfc38
 80011ec:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2302      	movs	r3, #2
 80011f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	4619      	mov	r1, r3
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <MX_GPIO_Init+0x11c>)
 8001202:	f002 f889 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12 
 8001206:	f44f 4317 	mov.w	r3, #38656	; 0x9700
 800120a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2302      	movs	r3, #2
 8001216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	4619      	mov	r1, r3
 800121e:	4806      	ldr	r0, [pc, #24]	; (8001238 <MX_GPIO_Init+0x120>)
 8001220:	f002 f87a 	bl	8003318 <HAL_GPIO_Init>

}
 8001224:	bf00      	nop
 8001226:	3720      	adds	r7, #32
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40021000 	.word	0x40021000
 8001230:	40011000 	.word	0x40011000
 8001234:	40010c00 	.word	0x40010c00
 8001238:	40010800 	.word	0x40010800

0800123c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if(htim->Instance == TIM2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800124c:	d101      	bne.n	8001252 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		Lift_Action();
 800124e:	f000 fe4d 	bl	8001eec <Lift_Action>
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a04      	ldr	r2, [pc, #16]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d101      	bne.n	8001260 <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 800125c:	f001 fa8c 	bl	8002778 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40000800 	.word	0x40000800

0800126c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr

08001278 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <HAL_MspInit+0x5c>)
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <HAL_MspInit+0x5c>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6193      	str	r3, [r2, #24]
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_MspInit+0x5c>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <HAL_MspInit+0x5c>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <HAL_MspInit+0x5c>)
 800129c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a0:	61d3      	str	r3, [r2, #28]
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <HAL_MspInit+0x5c>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_MspInit+0x60>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <HAL_MspInit+0x60>)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010000 	.word	0x40010000

080012dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	; 0x30
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 0320 	add.w	r3, r7, #32
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a33      	ldr	r2, [pc, #204]	; (80013c4 <HAL_ADC_MspInit+0xe8>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d122      	bne.n	8001342 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012fc:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <HAL_ADC_MspInit+0xec>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a31      	ldr	r2, [pc, #196]	; (80013c8 <HAL_ADC_MspInit+0xec>)
 8001302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b2f      	ldr	r3, [pc, #188]	; (80013c8 <HAL_ADC_MspInit+0xec>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001310:	61fb      	str	r3, [r7, #28]
 8001312:	69fb      	ldr	r3, [r7, #28]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	4b2c      	ldr	r3, [pc, #176]	; (80013c8 <HAL_ADC_MspInit+0xec>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a2b      	ldr	r2, [pc, #172]	; (80013c8 <HAL_ADC_MspInit+0xec>)
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <HAL_ADC_MspInit+0xec>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	61bb      	str	r3, [r7, #24]
 800132a:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800132c:	231f      	movs	r3, #31
 800132e:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001330:	2303      	movs	r3, #3
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	f107 0320 	add.w	r3, r7, #32
 8001338:	4619      	mov	r1, r3
 800133a:	4824      	ldr	r0, [pc, #144]	; (80013cc <HAL_ADC_MspInit+0xf0>)
 800133c:	f001 ffec 	bl	8003318 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001340:	e03c      	b.n	80013bc <HAL_ADC_MspInit+0xe0>
  else if(hadc->Instance==ADC2)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a22      	ldr	r2, [pc, #136]	; (80013d0 <HAL_ADC_MspInit+0xf4>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d137      	bne.n	80013bc <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <HAL_ADC_MspInit+0xec>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a1d      	ldr	r2, [pc, #116]	; (80013c8 <HAL_ADC_MspInit+0xec>)
 8001352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <HAL_ADC_MspInit+0xec>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_ADC_MspInit+0xec>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <HAL_ADC_MspInit+0xec>)
 800136a:	f043 0304 	orr.w	r3, r3, #4
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_ADC_MspInit+0xec>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_ADC_MspInit+0xec>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <HAL_ADC_MspInit+0xec>)
 8001382:	f043 0308 	orr.w	r3, r3, #8
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_ADC_MspInit+0xec>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0308 	and.w	r3, r3, #8
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001394:	23e0      	movs	r3, #224	; 0xe0
 8001396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001398:	2303      	movs	r3, #3
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 0320 	add.w	r3, r7, #32
 80013a0:	4619      	mov	r1, r3
 80013a2:	480a      	ldr	r0, [pc, #40]	; (80013cc <HAL_ADC_MspInit+0xf0>)
 80013a4:	f001 ffb8 	bl	8003318 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013a8:	2301      	movs	r3, #1
 80013aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ac:	2303      	movs	r3, #3
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	f107 0320 	add.w	r3, r7, #32
 80013b4:	4619      	mov	r1, r3
 80013b6:	4807      	ldr	r0, [pc, #28]	; (80013d4 <HAL_ADC_MspInit+0xf8>)
 80013b8:	f001 ffae 	bl	8003318 <HAL_GPIO_Init>
}
 80013bc:	bf00      	nop
 80013be:	3730      	adds	r7, #48	; 0x30
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40012400 	.word	0x40012400
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40010800 	.word	0x40010800
 80013d0:	40012800 	.word	0x40012800
 80013d4:	40010c00 	.word	0x40010c00

080013d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a1d      	ldr	r2, [pc, #116]	; (8001468 <HAL_I2C_MspInit+0x90>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d132      	bne.n	800145e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f8:	4b1c      	ldr	r3, [pc, #112]	; (800146c <HAL_I2C_MspInit+0x94>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a1b      	ldr	r2, [pc, #108]	; (800146c <HAL_I2C_MspInit+0x94>)
 80013fe:	f043 0308 	orr.w	r3, r3, #8
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <HAL_I2C_MspInit+0x94>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001410:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001416:	2312      	movs	r3, #18
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4619      	mov	r1, r3
 8001424:	4812      	ldr	r0, [pc, #72]	; (8001470 <HAL_I2C_MspInit+0x98>)
 8001426:	f001 ff77 	bl	8003318 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800142a:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_I2C_MspInit+0x9c>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	f043 0302 	orr.w	r3, r3, #2
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
 8001440:	4a0c      	ldr	r2, [pc, #48]	; (8001474 <HAL_I2C_MspInit+0x9c>)
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_I2C_MspInit+0x94>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	4a08      	ldr	r2, [pc, #32]	; (800146c <HAL_I2C_MspInit+0x94>)
 800144c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001450:	61d3      	str	r3, [r2, #28]
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_I2C_MspInit+0x94>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800145e:	bf00      	nop
 8001460:	3728      	adds	r7, #40	; 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40005400 	.word	0x40005400
 800146c:	40021000 	.word	0x40021000
 8001470:	40010c00 	.word	0x40010c00
 8001474:	40010000 	.word	0x40010000

08001478 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a16      	ldr	r2, [pc, #88]	; (80014e0 <HAL_TIM_PWM_MspInit+0x68>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d114      	bne.n	80014b4 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <HAL_TIM_PWM_MspInit+0x6c>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	4a15      	ldr	r2, [pc, #84]	; (80014e4 <HAL_TIM_PWM_MspInit+0x6c>)
 8001490:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001494:	6193      	str	r3, [r2, #24]
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <HAL_TIM_PWM_MspInit+0x6c>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	201a      	movs	r0, #26
 80014a8:	f001 fe95 	bl	80031d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80014ac:	201a      	movs	r0, #26
 80014ae:	f001 feae 	bl	800320e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014b2:	e010      	b.n	80014d6 <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM3)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <HAL_TIM_PWM_MspInit+0x70>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d10b      	bne.n	80014d6 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <HAL_TIM_PWM_MspInit+0x6c>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <HAL_TIM_PWM_MspInit+0x6c>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	61d3      	str	r3, [r2, #28]
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_TIM_PWM_MspInit+0x6c>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40012c00 	.word	0x40012c00
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40000400 	.word	0x40000400

080014ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014fc:	d10b      	bne.n	8001516 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <HAL_TIM_Base_MspInit+0x34>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4a07      	ldr	r2, [pc, #28]	; (8001520 <HAL_TIM_Base_MspInit+0x34>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	61d3      	str	r3, [r2, #28]
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_TIM_Base_MspInit+0x34>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	40021000 	.word	0x40021000

08001524 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a1f      	ldr	r2, [pc, #124]	; (80015bc <HAL_TIM_MspPostInit+0x98>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d119      	bne.n	8001578 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001544:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <HAL_TIM_MspPostInit+0x9c>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	4a1d      	ldr	r2, [pc, #116]	; (80015c0 <HAL_TIM_MspPostInit+0x9c>)
 800154a:	f043 0304 	orr.w	r3, r3, #4
 800154e:	6193      	str	r3, [r2, #24]
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <HAL_TIM_MspPostInit+0x9c>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800155c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001560:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2302      	movs	r3, #2
 8001568:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 0310 	add.w	r3, r7, #16
 800156e:	4619      	mov	r1, r3
 8001570:	4814      	ldr	r0, [pc, #80]	; (80015c4 <HAL_TIM_MspPostInit+0xa0>)
 8001572:	f001 fed1 	bl	8003318 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001576:	e01c      	b.n	80015b2 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM3)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <HAL_TIM_MspPostInit+0xa4>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d117      	bne.n	80015b2 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <HAL_TIM_MspPostInit+0x9c>)
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	4a0e      	ldr	r2, [pc, #56]	; (80015c0 <HAL_TIM_MspPostInit+0x9c>)
 8001588:	f043 0308 	orr.w	r3, r3, #8
 800158c:	6193      	str	r3, [r2, #24]
 800158e:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <HAL_TIM_MspPostInit+0x9c>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800159a:	2302      	movs	r3, #2
 800159c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2302      	movs	r3, #2
 80015a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a6:	f107 0310 	add.w	r3, r7, #16
 80015aa:	4619      	mov	r1, r3
 80015ac:	4807      	ldr	r0, [pc, #28]	; (80015cc <HAL_TIM_MspPostInit+0xa8>)
 80015ae:	f001 feb3 	bl	8003318 <HAL_GPIO_Init>
}
 80015b2:	bf00      	nop
 80015b4:	3720      	adds	r7, #32
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40012c00 	.word	0x40012c00
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40010800 	.word	0x40010800
 80015c8:	40000400 	.word	0x40000400
 80015cc:	40010c00 	.word	0x40010c00

080015d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a26      	ldr	r2, [pc, #152]	; (8001684 <HAL_UART_MspInit+0xb4>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d145      	bne.n	800167c <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015f0:	4b25      	ldr	r3, [pc, #148]	; (8001688 <HAL_UART_MspInit+0xb8>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a24      	ldr	r2, [pc, #144]	; (8001688 <HAL_UART_MspInit+0xb8>)
 80015f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b22      	ldr	r3, [pc, #136]	; (8001688 <HAL_UART_MspInit+0xb8>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001608:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <HAL_UART_MspInit+0xb8>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a1e      	ldr	r2, [pc, #120]	; (8001688 <HAL_UART_MspInit+0xb8>)
 800160e:	f043 0308 	orr.w	r3, r3, #8
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <HAL_UART_MspInit+0xb8>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001620:	2340      	movs	r3, #64	; 0x40
 8001622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	4816      	ldr	r0, [pc, #88]	; (800168c <HAL_UART_MspInit+0xbc>)
 8001634:	f001 fe70 	bl	8003318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	4810      	ldr	r0, [pc, #64]	; (800168c <HAL_UART_MspInit+0xbc>)
 800164c:	f001 fe64 	bl	8003318 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <HAL_UART_MspInit+0xc0>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <HAL_UART_MspInit+0xc0>)
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	2100      	movs	r1, #0
 8001670:	2025      	movs	r0, #37	; 0x25
 8001672:	f001 fdb0 	bl	80031d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001676:	2025      	movs	r0, #37	; 0x25
 8001678:	f001 fdc9 	bl	800320e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800167c:	bf00      	nop
 800167e:	3728      	adds	r7, #40	; 0x28
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40013800 	.word	0x40013800
 8001688:	40021000 	.word	0x40021000
 800168c:	40010c00 	.word	0x40010c00
 8001690:	40010000 	.word	0x40010000

08001694 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08c      	sub	sp, #48	; 0x30
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 80016a4:	2200      	movs	r2, #0
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	201e      	movs	r0, #30
 80016aa:	f001 fd94 	bl	80031d6 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 80016ae:	201e      	movs	r0, #30
 80016b0:	f001 fdad 	bl	800320e <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80016b4:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <HAL_InitTick+0xa0>)
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	4a1e      	ldr	r2, [pc, #120]	; (8001734 <HAL_InitTick+0xa0>)
 80016ba:	f043 0304 	orr.w	r3, r3, #4
 80016be:	61d3      	str	r3, [r2, #28]
 80016c0:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <HAL_InitTick+0xa0>)
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016cc:	f107 0210 	add.w	r2, r7, #16
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4611      	mov	r1, r2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 ffe0 	bl	800469c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80016dc:	f002 ffb6 	bl	800464c <HAL_RCC_GetPCLK1Freq>
 80016e0:	4603      	mov	r3, r0
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80016e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e8:	4a13      	ldr	r2, [pc, #76]	; (8001738 <HAL_InitTick+0xa4>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	0c9b      	lsrs	r3, r3, #18
 80016f0:	3b01      	subs	r3, #1
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <HAL_InitTick+0xa8>)
 80016f6:	4a12      	ldr	r2, [pc, #72]	; (8001740 <HAL_InitTick+0xac>)
 80016f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <HAL_InitTick+0xa8>)
 80016fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001700:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001702:	4a0e      	ldr	r2, [pc, #56]	; (800173c <HAL_InitTick+0xa8>)
 8001704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001706:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <HAL_InitTick+0xa8>)
 800170a:	2200      	movs	r2, #0
 800170c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_InitTick+0xa8>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001714:	4809      	ldr	r0, [pc, #36]	; (800173c <HAL_InitTick+0xa8>)
 8001716:	f003 f981 	bl	8004a1c <HAL_TIM_Base_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d104      	bne.n	800172a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001720:	4806      	ldr	r0, [pc, #24]	; (800173c <HAL_InitTick+0xa8>)
 8001722:	f003 f9a6 	bl	8004a72 <HAL_TIM_Base_Start_IT>
 8001726:	4603      	mov	r3, r0
 8001728:	e000      	b.n	800172c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3730      	adds	r7, #48	; 0x30
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000
 8001738:	431bde83 	.word	0x431bde83
 800173c:	200002a8 	.word	0x200002a8
 8001740:	40000800 	.word	0x40000800

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <HardFault_Handler+0x4>

08001756 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <MemManage_Handler+0x4>

0800175c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <BusFault_Handler+0x4>

08001762 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <UsageFault_Handler+0x4>

08001768 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <TIM1_TRG_COM_IRQHandler+0x10>)
 8001792:	f003 f9ef 	bl	8004b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000228 	.word	0x20000228

080017a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <TIM2_IRQHandler+0x10>)
 80017a6:	f003 f9e5 	bl	8004b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000268 	.word	0x20000268

080017b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <TIM3_IRQHandler+0x10>)
 80017ba:	f003 f9db 	bl	8004b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000178 	.word	0x20000178

080017c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <TIM4_IRQHandler+0x10>)
 80017ce:	f003 f9d1 	bl	8004b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200002a8 	.word	0x200002a8

080017dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <USART1_IRQHandler+0x10>)
 80017e2:	f004 f8f7 	bl	80059d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200001e8 	.word	0x200001e8

080017f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <_sbrk+0x50>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d102      	bne.n	8001806 <_sbrk+0x16>
		heap_end = &end;
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <_sbrk+0x50>)
 8001802:	4a10      	ldr	r2, [pc, #64]	; (8001844 <_sbrk+0x54>)
 8001804:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <_sbrk+0x50>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <_sbrk+0x50>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4413      	add	r3, r2
 8001814:	466a      	mov	r2, sp
 8001816:	4293      	cmp	r3, r2
 8001818:	d907      	bls.n	800182a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800181a:	f004 fc2d 	bl	8006078 <__errno>
 800181e:	4602      	mov	r2, r0
 8001820:	230c      	movs	r3, #12
 8001822:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001824:	f04f 33ff 	mov.w	r3, #4294967295
 8001828:	e006      	b.n	8001838 <_sbrk+0x48>
	}

	heap_end += incr;
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <_sbrk+0x50>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	4a03      	ldr	r2, [pc, #12]	; (8001840 <_sbrk+0x50>)
 8001834:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200000cc 	.word	0x200000cc
 8001844:	200002f0 	.word	0x200002f0

08001848 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800184c:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <SystemInit+0x5c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <SystemInit+0x5c>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <SystemInit+0x5c>)
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	4911      	ldr	r1, [pc, #68]	; (80018a4 <SystemInit+0x5c>)
 800185e:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <SystemInit+0x60>)
 8001860:	4013      	ands	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <SystemInit+0x5c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0e      	ldr	r2, [pc, #56]	; (80018a4 <SystemInit+0x5c>)
 800186a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800186e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001872:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <SystemInit+0x5c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <SystemInit+0x5c>)
 800187a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800187e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <SystemInit+0x5c>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <SystemInit+0x5c>)
 8001886:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800188a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <SystemInit+0x5c>)
 800188e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001892:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <SystemInit+0x64>)
 8001896:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800189a:	609a      	str	r2, [r3, #8]
#endif 
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr
 80018a4:	40021000 	.word	0x40021000
 80018a8:	f8ff0000 	.word	0xf8ff0000
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80018b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80018b2:	e003      	b.n	80018bc <LoopCopyDataInit>

080018b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80018b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80018b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80018ba:	3104      	adds	r1, #4

080018bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80018bc:	480a      	ldr	r0, [pc, #40]	; (80018e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80018c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80018c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80018c4:	d3f6      	bcc.n	80018b4 <CopyDataInit>
  ldr r2, =_sbss
 80018c6:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80018c8:	e002      	b.n	80018d0 <LoopFillZerobss>

080018ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80018cc:	f842 3b04 	str.w	r3, [r2], #4

080018d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80018d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80018d4:	d3f9      	bcc.n	80018ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018d6:	f7ff ffb7 	bl	8001848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018da:	f004 fbd3 	bl	8006084 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018de:	f7ff f873 	bl	80009c8 <main>
  bx lr
 80018e2:	4770      	bx	lr
  ldr r3, =_sidata
 80018e4:	08006a68 	.word	0x08006a68
  ldr r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80018ec:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80018f0:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80018f4:	200002f0 	.word	0x200002f0

080018f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018f8:	e7fe      	b.n	80018f8 <ADC1_2_IRQHandler>

080018fa <ADC_Value_1_Write>:


#include "ADC.h"

void ADC_Value_1_Write(ADC_HandleTypeDef hadc, uint32_t *ADC_Value)
{
 80018fa:	b084      	sub	sp, #16
 80018fc:	b598      	push	{r3, r4, r7, lr}
 80018fe:	af00      	add	r7, sp, #0
 8001900:	f107 0410 	add.w	r4, r7, #16
 8001904:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_ADC_Start(&hadc);
 8001908:	f107 0010 	add.w	r0, r7, #16
 800190c:	f001 f84a 	bl	80029a4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 8001910:	2164      	movs	r1, #100	; 0x64
 8001912:	f107 0010 	add.w	r0, r7, #16
 8001916:	f001 f91f 	bl	8002b58 <HAL_ADC_PollForConversion>
	ADC_Value[0] = HAL_ADC_GetValue(&hadc);
 800191a:	f107 0010 	add.w	r0, r7, #16
 800191e:	f001 fa15 	bl	8002d4c <HAL_ADC_GetValue>
 8001922:	4602      	mov	r2, r0
 8001924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001926:	601a      	str	r2, [r3, #0]

	HAL_ADC_Start(&hadc);
 8001928:	f107 0010 	add.w	r0, r7, #16
 800192c:	f001 f83a 	bl	80029a4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 8001930:	2164      	movs	r1, #100	; 0x64
 8001932:	f107 0010 	add.w	r0, r7, #16
 8001936:	f001 f90f 	bl	8002b58 <HAL_ADC_PollForConversion>
	ADC_Value[1] = HAL_ADC_GetValue(&hadc);
 800193a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800193c:	1d1c      	adds	r4, r3, #4
 800193e:	f107 0010 	add.w	r0, r7, #16
 8001942:	f001 fa03 	bl	8002d4c <HAL_ADC_GetValue>
 8001946:	4603      	mov	r3, r0
 8001948:	6023      	str	r3, [r4, #0]

	HAL_ADC_Start(&hadc);
 800194a:	f107 0010 	add.w	r0, r7, #16
 800194e:	f001 f829 	bl	80029a4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 8001952:	2164      	movs	r1, #100	; 0x64
 8001954:	f107 0010 	add.w	r0, r7, #16
 8001958:	f001 f8fe 	bl	8002b58 <HAL_ADC_PollForConversion>
	ADC_Value[2] = HAL_ADC_GetValue(&hadc);
 800195c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800195e:	f103 0408 	add.w	r4, r3, #8
 8001962:	f107 0010 	add.w	r0, r7, #16
 8001966:	f001 f9f1 	bl	8002d4c <HAL_ADC_GetValue>
 800196a:	4603      	mov	r3, r0
 800196c:	6023      	str	r3, [r4, #0]

	HAL_ADC_Start(&hadc);
 800196e:	f107 0010 	add.w	r0, r7, #16
 8001972:	f001 f817 	bl	80029a4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 8001976:	2164      	movs	r1, #100	; 0x64
 8001978:	f107 0010 	add.w	r0, r7, #16
 800197c:	f001 f8ec 	bl	8002b58 <HAL_ADC_PollForConversion>
	ADC_Value[3] = HAL_ADC_GetValue(&hadc);
 8001980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001982:	f103 040c 	add.w	r4, r3, #12
 8001986:	f107 0010 	add.w	r0, r7, #16
 800198a:	f001 f9df 	bl	8002d4c <HAL_ADC_GetValue>
 800198e:	4603      	mov	r3, r0
 8001990:	6023      	str	r3, [r4, #0]

	HAL_ADC_Start(&hadc);
 8001992:	f107 0010 	add.w	r0, r7, #16
 8001996:	f001 f805 	bl	80029a4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800199a:	2164      	movs	r1, #100	; 0x64
 800199c:	f107 0010 	add.w	r0, r7, #16
 80019a0:	f001 f8da 	bl	8002b58 <HAL_ADC_PollForConversion>
	ADC_Value[4] = HAL_ADC_GetValue(&hadc);
 80019a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019a6:	f103 0410 	add.w	r4, r3, #16
 80019aa:	f107 0010 	add.w	r0, r7, #16
 80019ae:	f001 f9cd 	bl	8002d4c <HAL_ADC_GetValue>
 80019b2:	4603      	mov	r3, r0
 80019b4:	6023      	str	r3, [r4, #0]

	HAL_ADC_Stop(&hadc);
 80019b6:	f107 0010 	add.w	r0, r7, #16
 80019ba:	f001 f8a1 	bl	8002b00 <HAL_ADC_Stop>
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	e8bd 4098 	ldmia.w	sp!, {r3, r4, r7, lr}
 80019c6:	b004      	add	sp, #16
 80019c8:	4770      	bx	lr

080019ca <ADC_Value_2_Write>:

void ADC_Value_2_Write(ADC_HandleTypeDef hadc, uint32_t *ADC_Value)
{
 80019ca:	b084      	sub	sp, #16
 80019cc:	b598      	push	{r3, r4, r7, lr}
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	f107 0410 	add.w	r4, r7, #16
 80019d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_ADC_Start(&hadc);
 80019d8:	f107 0010 	add.w	r0, r7, #16
 80019dc:	f000 ffe2 	bl	80029a4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 80019e0:	2164      	movs	r1, #100	; 0x64
 80019e2:	f107 0010 	add.w	r0, r7, #16
 80019e6:	f001 f8b7 	bl	8002b58 <HAL_ADC_PollForConversion>
	ADC_Value[0] = HAL_ADC_GetValue(&hadc);
 80019ea:	f107 0010 	add.w	r0, r7, #16
 80019ee:	f001 f9ad 	bl	8002d4c <HAL_ADC_GetValue>
 80019f2:	4602      	mov	r2, r0
 80019f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019f6:	601a      	str	r2, [r3, #0]

	HAL_ADC_Start(&hadc);
 80019f8:	f107 0010 	add.w	r0, r7, #16
 80019fc:	f000 ffd2 	bl	80029a4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 8001a00:	2164      	movs	r1, #100	; 0x64
 8001a02:	f107 0010 	add.w	r0, r7, #16
 8001a06:	f001 f8a7 	bl	8002b58 <HAL_ADC_PollForConversion>
	ADC_Value[1] = HAL_ADC_GetValue(&hadc);
 8001a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a0c:	1d1c      	adds	r4, r3, #4
 8001a0e:	f107 0010 	add.w	r0, r7, #16
 8001a12:	f001 f99b 	bl	8002d4c <HAL_ADC_GetValue>
 8001a16:	4603      	mov	r3, r0
 8001a18:	6023      	str	r3, [r4, #0]

	HAL_ADC_Start(&hadc);
 8001a1a:	f107 0010 	add.w	r0, r7, #16
 8001a1e:	f000 ffc1 	bl	80029a4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 8001a22:	2164      	movs	r1, #100	; 0x64
 8001a24:	f107 0010 	add.w	r0, r7, #16
 8001a28:	f001 f896 	bl	8002b58 <HAL_ADC_PollForConversion>
	ADC_Value[2] = HAL_ADC_GetValue(&hadc);
 8001a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a2e:	f103 0408 	add.w	r4, r3, #8
 8001a32:	f107 0010 	add.w	r0, r7, #16
 8001a36:	f001 f989 	bl	8002d4c <HAL_ADC_GetValue>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	6023      	str	r3, [r4, #0]

	HAL_ADC_Start(&hadc);
 8001a3e:	f107 0010 	add.w	r0, r7, #16
 8001a42:	f000 ffaf 	bl	80029a4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 8001a46:	2164      	movs	r1, #100	; 0x64
 8001a48:	f107 0010 	add.w	r0, r7, #16
 8001a4c:	f001 f884 	bl	8002b58 <HAL_ADC_PollForConversion>
	ADC_Value[3] = HAL_ADC_GetValue(&hadc);
 8001a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a52:	f103 040c 	add.w	r4, r3, #12
 8001a56:	f107 0010 	add.w	r0, r7, #16
 8001a5a:	f001 f977 	bl	8002d4c <HAL_ADC_GetValue>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	6023      	str	r3, [r4, #0]

	HAL_ADC_Stop(&hadc);
 8001a62:	f107 0010 	add.w	r0, r7, #16
 8001a66:	f001 f84b 	bl	8002b00 <HAL_ADC_Stop>
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	e8bd 4098 	ldmia.w	sp!, {r3, r4, r7, lr}
 8001a72:	b004      	add	sp, #16
 8001a74:	4770      	bx	lr

08001a76 <Parking_Lot_ADC>:

void Parking_Lot_ADC(uint32_t *ADC_Value, uint8_t *flag)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	6039      	str	r1, [r7, #0]
	if(ADC_Value[0] <= ADC_CRITICAL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d805      	bhi.n	8001a98 <Parking_Lot_ADC+0x22>
	{
		ParkingLot_Empty_1();
 8001a8c:	f000 fbf4 	bl	8002278 <ParkingLot_Empty_1>
		flag[0] = 1;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
 8001a96:	e00a      	b.n	8001aae <Parking_Lot_ADC+0x38>
	}

	else if (ADC_Value[0] >= ADC_CRITICAL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f640 52ab 	movw	r2, #3499	; 0xdab
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d904      	bls.n	8001aae <Parking_Lot_ADC+0x38>
	{
		ParkingLot_Occ_1();
 8001aa4:	f000 fbfc 	bl	80022a0 <ParkingLot_Occ_1>
		flag[0] = 0;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
	}

	if(ADC_Value[1] <= ADC_CRITICAL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d806      	bhi.n	8001aca <Parking_Lot_ADC+0x54>
	{
		ParkingLot_Empty_2();
 8001abc:	f000 fc04 	bl	80022c8 <ParkingLot_Empty_2>
		flag[1] = 1;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	e00c      	b.n	8001ae4 <Parking_Lot_ADC+0x6e>
	}

	else if (ADC_Value[1] >= ADC_CRITICAL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3304      	adds	r3, #4
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f640 52ab 	movw	r2, #3499	; 0xdab
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d905      	bls.n	8001ae4 <Parking_Lot_ADC+0x6e>
	{
		ParkingLot_Occ_2();
 8001ad8:	f000 fc08 	bl	80022ec <ParkingLot_Occ_2>
		flag[1] = 0;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
	}

	if(ADC_Value[2] <= ADC_CRITICAL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3308      	adds	r3, #8
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d806      	bhi.n	8001b00 <Parking_Lot_ADC+0x8a>
	{
		ParkingLot_Empty_3();
 8001af2:	f000 fc0d 	bl	8002310 <ParkingLot_Empty_3>
		flag[2] = 1;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	3302      	adds	r3, #2
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
 8001afe:	e00c      	b.n	8001b1a <Parking_Lot_ADC+0xa4>
	}

	else if (ADC_Value[2] >= ADC_CRITICAL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3308      	adds	r3, #8
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f640 52ab 	movw	r2, #3499	; 0xdab
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d905      	bls.n	8001b1a <Parking_Lot_ADC+0xa4>
	{
		ParkingLot_Occ_3();
 8001b0e:	f000 fc11 	bl	8002334 <ParkingLot_Occ_3>
		flag[2] = 0;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	3302      	adds	r3, #2
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
	}

	if(ADC_Value[3] <= ADC_CRITICAL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	330c      	adds	r3, #12
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d806      	bhi.n	8001b36 <Parking_Lot_ADC+0xc0>
	{
		ParkingLot_Empty_4();
 8001b28:	f000 fc16 	bl	8002358 <ParkingLot_Empty_4>
		flag[3] = 1;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	3303      	adds	r3, #3
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	e00c      	b.n	8001b50 <Parking_Lot_ADC+0xda>
	}

	else if (ADC_Value[3] >= ADC_CRITICAL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	330c      	adds	r3, #12
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f640 52ab 	movw	r2, #3499	; 0xdab
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d905      	bls.n	8001b50 <Parking_Lot_ADC+0xda>
	{
		ParkingLot_Occ_4();
 8001b44:	f000 fc1a 	bl	800237c <ParkingLot_Occ_4>
		flag[3] = 0;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	3303      	adds	r3, #3
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
	}

	if(ADC_Value[4] <= ADC_CRITICAL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3310      	adds	r3, #16
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d806      	bhi.n	8001b6c <Parking_Lot_ADC+0xf6>
	{
		ParkingLot_Empty_5();
 8001b5e:	f000 fc1f 	bl	80023a0 <ParkingLot_Empty_5>
		flag[4] = 1;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	3304      	adds	r3, #4
 8001b66:	2201      	movs	r2, #1
 8001b68:	701a      	strb	r2, [r3, #0]
	else if (ADC_Value[4] >= ADC_CRITICAL)
	{
		ParkingLot_Occ_5();
		flag[4] = 0;
	}
}
 8001b6a:	e00c      	b.n	8001b86 <Parking_Lot_ADC+0x110>
	else if (ADC_Value[4] >= ADC_CRITICAL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3310      	adds	r3, #16
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f640 52ab 	movw	r2, #3499	; 0xdab
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d905      	bls.n	8001b86 <Parking_Lot_ADC+0x110>
		ParkingLot_Occ_5();
 8001b7a:	f000 fc23 	bl	80023c4 <ParkingLot_Occ_5>
		flag[4] = 0;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	3304      	adds	r3, #4
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <Gate_ADC>:

void Gate_ADC(uint32_t *ADC_Value)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	if( (ADC_Value[0] >= ADC_CRITICAL)/* && (parkingLot_Count != 0)*/ )	//ENT OPEN
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f640 52ab 	movw	r2, #3499	; 0xdab
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d908      	bls.n	8001bb6 <Gate_ADC+0x26>
	{
		deg_ent = 90;
 8001ba4:	4b22      	ldr	r3, [pc, #136]	; (8001c30 <Gate_ADC+0xa0>)
 8001ba6:	225a      	movs	r2, #90	; 0x5a
 8001ba8:	801a      	strh	r2, [r3, #0]
		ServoRunEntrance(deg_ent);
 8001baa:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <Gate_ADC+0xa0>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 fc19 	bl	80023e8 <ServoRunEntrance>
	}

	if(ADC_Value[1] >= ADC_CRITICAL)	//ENT CLOSE
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f640 52ab 	movw	r2, #3499	; 0xdab
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d90c      	bls.n	8001bde <Gate_ADC+0x4e>
	{
		HAL_Delay(1500);
 8001bc4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001bc8:	f000 fdf2 	bl	80027b0 <HAL_Delay>
		deg_ent = 0;
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <Gate_ADC+0xa0>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	801a      	strh	r2, [r3, #0]
		ServoRunEntrance(deg_ent);
 8001bd2:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <Gate_ADC+0xa0>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 fc05 	bl	80023e8 <ServoRunEntrance>
	}

	if(ADC_Value[2] >= ADC_CRITICAL)	//EXI OPEN
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3308      	adds	r3, #8
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f640 52ab 	movw	r2, #3499	; 0xdab
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d908      	bls.n	8001bfe <Gate_ADC+0x6e>
	{
		deg_ext = 90;
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <Gate_ADC+0xa4>)
 8001bee:	225a      	movs	r2, #90	; 0x5a
 8001bf0:	801a      	strh	r2, [r3, #0]
		ServoRunExit(deg_ext);
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <Gate_ADC+0xa4>)
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 fc39 	bl	8002470 <ServoRunExit>
	}

	if(ADC_Value[3] >= ADC_CRITICAL)	//EXI CLOSE
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	330c      	adds	r3, #12
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f640 52ab 	movw	r2, #3499	; 0xdab
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d90c      	bls.n	8001c26 <Gate_ADC+0x96>
	{
		HAL_Delay(1500);
 8001c0c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001c10:	f000 fdce 	bl	80027b0 <HAL_Delay>
		deg_ext = 0;
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <Gate_ADC+0xa4>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	801a      	strh	r2, [r3, #0]
		ServoRunExit(deg_ext);
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <Gate_ADC+0xa4>)
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 fc25 	bl	8002470 <ServoRunExit>
	}
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	200000ae 	.word	0x200000ae
 8001c34:	200000b0 	.word	0x200000b0

08001c38 <GetButton1State>:
 *      Author: kccistc
 */
#include "Button.h"

uint8_t GetButton1State(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
	static uint8_t prevButtonState = 1;
	uint8_t curButtonState = 1;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	71fb      	strb	r3, [r7, #7]
	curButtonState = HAL_GPIO_ReadPin(BUTTON1_GPIO, BUTTON1_PIN);
 8001c42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c46:	4812      	ldr	r0, [pc, #72]	; (8001c90 <GetButton1State+0x58>)
 8001c48:	f001 fcc0 	bl	80035cc <HAL_GPIO_ReadPin>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	71fb      	strb	r3, [r7, #7]
	if (curButtonState == 0 && prevButtonState == 1)
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10b      	bne.n	8001c6e <GetButton1State+0x36>
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <GetButton1State+0x5c>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d107      	bne.n	8001c6e <GetButton1State+0x36>
	{
		prevButtonState = curButtonState;
 8001c5e:	4a0d      	ldr	r2, [pc, #52]	; (8001c94 <GetButton1State+0x5c>)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	7013      	strb	r3, [r2, #0]
		HAL_Delay(20);
 8001c64:	2014      	movs	r0, #20
 8001c66:	f000 fda3 	bl	80027b0 <HAL_Delay>
		return 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e00c      	b.n	8001c88 <GetButton1State+0x50>
	}
	else if (curButtonState == 1 && prevButtonState == 0)
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d108      	bne.n	8001c86 <GetButton1State+0x4e>
 8001c74:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <GetButton1State+0x5c>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d104      	bne.n	8001c86 <GetButton1State+0x4e>
	{
		prevButtonState = curButtonState;
 8001c7c:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <GetButton1State+0x5c>)
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	7013      	strb	r3, [r2, #0]
		return 1;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <GetButton1State+0x50>
	}
	return 0;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40011000 	.word	0x40011000
 8001c94:	20000004 	.word	0x20000004

08001c98 <GetButton2State>:

uint8_t GetButton2State(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
	static uint8_t prevButtonState = 1;
	uint8_t curButtonState = 1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	71fb      	strb	r3, [r7, #7]
	curButtonState = HAL_GPIO_ReadPin(BUTTON2_GPIO, BUTTON2_PIN);
 8001ca2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ca6:	4812      	ldr	r0, [pc, #72]	; (8001cf0 <GetButton2State+0x58>)
 8001ca8:	f001 fc90 	bl	80035cc <HAL_GPIO_ReadPin>
 8001cac:	4603      	mov	r3, r0
 8001cae:	71fb      	strb	r3, [r7, #7]
	if (curButtonState == 0 && prevButtonState == 1)
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10b      	bne.n	8001cce <GetButton2State+0x36>
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <GetButton2State+0x5c>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d107      	bne.n	8001cce <GetButton2State+0x36>
	{
		prevButtonState = curButtonState;
 8001cbe:	4a0d      	ldr	r2, [pc, #52]	; (8001cf4 <GetButton2State+0x5c>)
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	7013      	strb	r3, [r2, #0]
		HAL_Delay(20);
 8001cc4:	2014      	movs	r0, #20
 8001cc6:	f000 fd73 	bl	80027b0 <HAL_Delay>
		return 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e00c      	b.n	8001ce8 <GetButton2State+0x50>
	}
	else if (curButtonState == 1 && prevButtonState == 0)
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d108      	bne.n	8001ce6 <GetButton2State+0x4e>
 8001cd4:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <GetButton2State+0x5c>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d104      	bne.n	8001ce6 <GetButton2State+0x4e>
	{
		prevButtonState = curButtonState;
 8001cdc:	4a05      	ldr	r2, [pc, #20]	; (8001cf4 <GetButton2State+0x5c>)
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	7013      	strb	r3, [r2, #0]
		return 1;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <GetButton2State+0x50>
	}
	return 0;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40011000 	.word	0x40011000
 8001cf4:	20000005 	.word	0x20000005

08001cf8 <Message_OutPut>:
 */

#include "FSM.h"

void Message_OutPut(uint8_t count, char *string)
{
 8001cf8:	b4b0      	push	{r4, r5, r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	71fb      	strb	r3, [r7, #7]
	switch(count)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	2b05      	cmp	r3, #5
 8001d08:	d856      	bhi.n	8001db8 <Message_OutPut+0xc0>
 8001d0a:	a201      	add	r2, pc, #4	; (adr r2, 8001d10 <Message_OutPut+0x18>)
 8001d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d10:	08001d29 	.word	0x08001d29
 8001d14:	08001d41 	.word	0x08001d41
 8001d18:	08001d59 	.word	0x08001d59
 8001d1c:	08001d71 	.word	0x08001d71
 8001d20:	08001d89 	.word	0x08001d89
 8001d24:	08001da1 	.word	0x08001da1
	{
	case 0:
		sprintf(string, "Sorry, is FULL  ");
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	4a26      	ldr	r2, [pc, #152]	; (8001dc4 <Message_OutPut+0xcc>)
 8001d2c:	461d      	mov	r5, r3
 8001d2e:	4614      	mov	r4, r2
 8001d30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d32:	6028      	str	r0, [r5, #0]
 8001d34:	6069      	str	r1, [r5, #4]
 8001d36:	60aa      	str	r2, [r5, #8]
 8001d38:	60eb      	str	r3, [r5, #12]
 8001d3a:	7823      	ldrb	r3, [r4, #0]
 8001d3c:	742b      	strb	r3, [r5, #16]
		break;
 8001d3e:	e03b      	b.n	8001db8 <Message_OutPut+0xc0>
	case 1:
		sprintf(string, "Welcome, so BUSY");
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	4a21      	ldr	r2, [pc, #132]	; (8001dc8 <Message_OutPut+0xd0>)
 8001d44:	461d      	mov	r5, r3
 8001d46:	4614      	mov	r4, r2
 8001d48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d4a:	6028      	str	r0, [r5, #0]
 8001d4c:	6069      	str	r1, [r5, #4]
 8001d4e:	60aa      	str	r2, [r5, #8]
 8001d50:	60eb      	str	r3, [r5, #12]
 8001d52:	7823      	ldrb	r3, [r4, #0]
 8001d54:	742b      	strb	r3, [r5, #16]
		break;
 8001d56:	e02f      	b.n	8001db8 <Message_OutPut+0xc0>
	case 2:
		sprintf(string, "Welcome, so BUSY");
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	4a1b      	ldr	r2, [pc, #108]	; (8001dc8 <Message_OutPut+0xd0>)
 8001d5c:	461d      	mov	r5, r3
 8001d5e:	4614      	mov	r4, r2
 8001d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d62:	6028      	str	r0, [r5, #0]
 8001d64:	6069      	str	r1, [r5, #4]
 8001d66:	60aa      	str	r2, [r5, #8]
 8001d68:	60eb      	str	r3, [r5, #12]
 8001d6a:	7823      	ldrb	r3, [r4, #0]
 8001d6c:	742b      	strb	r3, [r5, #16]
		break;
 8001d6e:	e023      	b.n	8001db8 <Message_OutPut+0xc0>
	case 3:
		sprintf(string, "Welcome, so BUSY");
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	4a15      	ldr	r2, [pc, #84]	; (8001dc8 <Message_OutPut+0xd0>)
 8001d74:	461d      	mov	r5, r3
 8001d76:	4614      	mov	r4, r2
 8001d78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d7a:	6028      	str	r0, [r5, #0]
 8001d7c:	6069      	str	r1, [r5, #4]
 8001d7e:	60aa      	str	r2, [r5, #8]
 8001d80:	60eb      	str	r3, [r5, #12]
 8001d82:	7823      	ldrb	r3, [r4, #0]
 8001d84:	742b      	strb	r3, [r5, #16]
		break;
 8001d86:	e017      	b.n	8001db8 <Message_OutPut+0xc0>
	case 4:
		sprintf(string, "Welcome, is FREE");
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	4a10      	ldr	r2, [pc, #64]	; (8001dcc <Message_OutPut+0xd4>)
 8001d8c:	461d      	mov	r5, r3
 8001d8e:	4614      	mov	r4, r2
 8001d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d92:	6028      	str	r0, [r5, #0]
 8001d94:	6069      	str	r1, [r5, #4]
 8001d96:	60aa      	str	r2, [r5, #8]
 8001d98:	60eb      	str	r3, [r5, #12]
 8001d9a:	7823      	ldrb	r3, [r4, #0]
 8001d9c:	742b      	strb	r3, [r5, #16]
		break;
 8001d9e:	e00b      	b.n	8001db8 <Message_OutPut+0xc0>
	case 5:
		sprintf(string, "Welcome, is FREE");
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <Message_OutPut+0xd4>)
 8001da4:	461d      	mov	r5, r3
 8001da6:	4614      	mov	r4, r2
 8001da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001daa:	6028      	str	r0, [r5, #0]
 8001dac:	6069      	str	r1, [r5, #4]
 8001dae:	60aa      	str	r2, [r5, #8]
 8001db0:	60eb      	str	r3, [r5, #12]
 8001db2:	7823      	ldrb	r3, [r4, #0]
 8001db4:	742b      	strb	r3, [r5, #16]
	}
}
 8001db6:	e7ff      	b.n	8001db8 <Message_OutPut+0xc0>
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bcb0      	pop	{r4, r5, r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	08006950 	.word	0x08006950
 8001dc8:	08006964 	.word	0x08006964
 8001dcc:	08006978 	.word	0x08006978

08001dd0 <Lift_Control>:

void Lift_Control(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
	if( (GetButton1State() == 1) && (floor == 0))
 8001dd4:	f7ff ff30 	bl	8001c38 <GetButton1State>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d107      	bne.n	8001dee <Lift_Control+0x1e>
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <Lift_Control+0x3c>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d103      	bne.n	8001dee <Lift_Control+0x1e>
	{
		motor_Flag = 1;
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <Lift_Control+0x40>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]

	else if( (GetButton2State() == 1) && (floor == 1))
	{
		motor_Flag = 2;
	}
}
 8001dec:	e00b      	b.n	8001e06 <Lift_Control+0x36>
	else if( (GetButton2State() == 1) && (floor == 1))
 8001dee:	f7ff ff53 	bl	8001c98 <GetButton2State>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d106      	bne.n	8001e06 <Lift_Control+0x36>
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <Lift_Control+0x3c>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d102      	bne.n	8001e06 <Lift_Control+0x36>
		motor_Flag = 2;
 8001e00:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <Lift_Control+0x40>)
 8001e02:	2202      	movs	r2, #2
 8001e04:	701a      	strb	r2, [r3, #0]
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200000ac 	.word	0x200000ac
 8001e10:	200000a8 	.word	0x200000a8

08001e14 <Lift_Control_BT>:

void Lift_Control_BT(uint8_t BT_Data)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
	if(BT_Data == 'U' && floor == 0)
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	2b55      	cmp	r3, #85	; 0x55
 8001e22:	d106      	bne.n	8001e32 <Lift_Control_BT+0x1e>
 8001e24:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <Lift_Control_BT+0x3c>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d102      	bne.n	8001e32 <Lift_Control_BT+0x1e>
	{
		motor_Flag = 1;
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <Lift_Control_BT+0x40>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	701a      	strb	r2, [r3, #0]
	}

	if(BT_Data == 'D' && floor == 1)
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	2b44      	cmp	r3, #68	; 0x44
 8001e36:	d106      	bne.n	8001e46 <Lift_Control_BT+0x32>
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <Lift_Control_BT+0x3c>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d102      	bne.n	8001e46 <Lift_Control_BT+0x32>
	{
		motor_Flag = 2;
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <Lift_Control_BT+0x40>)
 8001e42:	2202      	movs	r2, #2
 8001e44:	701a      	strb	r2, [r3, #0]
	}
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	200000ac 	.word	0x200000ac
 8001e54:	200000a8 	.word	0x200000a8

08001e58 <Gate_Control_BT>:

void Gate_Control_BT(uint8_t BT_Data)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
	if(BT_Data == 'N')
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	2b4e      	cmp	r3, #78	; 0x4e
 8001e66:	d11a      	bne.n	8001e9e <Gate_Control_BT+0x46>
	{
		if(deg_ent == 0)
 8001e68:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <Gate_Control_BT+0x8c>)
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d109      	bne.n	8001e84 <Gate_Control_BT+0x2c>
		{
			deg_ent = 90;
 8001e70:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <Gate_Control_BT+0x8c>)
 8001e72:	225a      	movs	r2, #90	; 0x5a
 8001e74:	801a      	strh	r2, [r3, #0]
			ServoRunEntrance(deg_ent);
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <Gate_Control_BT+0x8c>)
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 fab3 	bl	80023e8 <ServoRunEntrance>
 8001e82:	e00c      	b.n	8001e9e <Gate_Control_BT+0x46>
		}

		else if(deg_ent == 90)
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <Gate_Control_BT+0x8c>)
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	2b5a      	cmp	r3, #90	; 0x5a
 8001e8a:	d108      	bne.n	8001e9e <Gate_Control_BT+0x46>
		{
			deg_ent = 0;
 8001e8c:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <Gate_Control_BT+0x8c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	801a      	strh	r2, [r3, #0]
			ServoRunEntrance(deg_ent);
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <Gate_Control_BT+0x8c>)
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 faa5 	bl	80023e8 <ServoRunEntrance>
		}
	}

	if (BT_Data == 'X')
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	2b58      	cmp	r3, #88	; 0x58
 8001ea2:	d11a      	bne.n	8001eda <Gate_Control_BT+0x82>
	{
		if(deg_ext == 0)
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <Gate_Control_BT+0x90>)
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d109      	bne.n	8001ec0 <Gate_Control_BT+0x68>
		{
			deg_ext = 90;
 8001eac:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <Gate_Control_BT+0x90>)
 8001eae:	225a      	movs	r2, #90	; 0x5a
 8001eb0:	801a      	strh	r2, [r3, #0]
			ServoRunExit(deg_ext);
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <Gate_Control_BT+0x90>)
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 fad9 	bl	8002470 <ServoRunExit>
		{
			deg_ext = 0;
			ServoRunExit(deg_ext);
		}
	}
}
 8001ebe:	e00c      	b.n	8001eda <Gate_Control_BT+0x82>
		else if(deg_ext == 90)
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <Gate_Control_BT+0x90>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	2b5a      	cmp	r3, #90	; 0x5a
 8001ec6:	d108      	bne.n	8001eda <Gate_Control_BT+0x82>
			deg_ext = 0;
 8001ec8:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <Gate_Control_BT+0x90>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	801a      	strh	r2, [r3, #0]
			ServoRunExit(deg_ext);
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <Gate_Control_BT+0x90>)
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 facb 	bl	8002470 <ServoRunExit>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200000ae 	.word	0x200000ae
 8001ee8:	200000b0 	.word	0x200000b0

08001eec <Lift_Action>:

void Lift_Action(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
	if(motor_Flag == 0)
 8001ef0:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <Lift_Action+0x98>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d104      	bne.n	8001f02 <Lift_Action+0x16>
	{
		motor_count = 0;
 8001ef8:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <Lift_Action+0x9c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	801a      	strh	r2, [r3, #0]
		StepMotorStop();
 8001efe:	f000 fb0b 	bl	8002518 <StepMotorStop>
	}

	if(motor_Flag == 1)
 8001f02:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <Lift_Action+0x98>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d11a      	bne.n	8001f40 <Lift_Action+0x54>
	{
		motor_count++;
 8001f0a:	4b1f      	ldr	r3, [pc, #124]	; (8001f88 <Lift_Action+0x9c>)
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <Lift_Action+0x9c>)
 8001f14:	801a      	strh	r2, [r3, #0]
		StepMotorCW(motor_count % 4);
 8001f16:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <Lift_Action+0x9c>)
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 fb16 	bl	8002554 <StepMotorCW>
		if(motor_count >= LIFT_UP_TIME)
 8001f28:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <Lift_Action+0x9c>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	f641 1263 	movw	r2, #6499	; 0x1963
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d905      	bls.n	8001f40 <Lift_Action+0x54>
		{
			floor = 1;
 8001f34:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <Lift_Action+0xa0>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	701a      	strb	r2, [r3, #0]
			motor_Flag = 0;
 8001f3a:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <Lift_Action+0x98>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
		}
	}

	if(motor_Flag == 2)
 8001f40:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <Lift_Action+0x98>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d11a      	bne.n	8001f7e <Lift_Action+0x92>
	{
		motor_count++;
 8001f48:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <Lift_Action+0x9c>)
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <Lift_Action+0x9c>)
 8001f52:	801a      	strh	r2, [r3, #0]
		StepMotorCCW(motor_count % 4);
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <Lift_Action+0x9c>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	4618      	mov	r0, r3
 8001f62:	f000 fb75 	bl	8002650 <StepMotorCCW>
		if(motor_count >= LIFT_DOWN_TIME)
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <Lift_Action+0x9c>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	f641 3257 	movw	r2, #6999	; 0x1b57
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d905      	bls.n	8001f7e <Lift_Action+0x92>
		{
			floor = 0;
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <Lift_Action+0xa0>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
			motor_Flag = 0;
 8001f78:	4b02      	ldr	r3, [pc, #8]	; (8001f84 <Lift_Action+0x98>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200000a8 	.word	0x200000a8
 8001f88:	200000aa 	.word	0x200000aa
 8001f8c:	200000ac 	.word	0x200000ac

08001f90 <I2C_TxByte>:
#include "I2C_LCD.h"

static uint8_t I2CData = 0;

void I2C_TxByte(uint16_t deviceAddr, uint8_t data)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af02      	add	r7, sp, #8
 8001f96:	4603      	mov	r3, r0
 8001f98:	460a      	mov	r2, r1
 8001f9a:	80fb      	strh	r3, [r7, #6]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, (deviceAddr<<1), &data, sizeof(data), 1000);
 8001fa0:	88fb      	ldrh	r3, [r7, #6]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	b299      	uxth	r1, r3
 8001fa6:	1d7a      	adds	r2, r7, #5
 8001fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	2301      	movs	r3, #1
 8001fb0:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <I2C_TxByte+0x30>)
 8001fb2:	f001 fc7b 	bl	80038ac <HAL_I2C_Master_Transmit>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	2000010c 	.word	0x2000010c

08001fc4 <_delay_ms>:

void _delay_ms(uint16_t time)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time);
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 fbed 	bl	80027b0 <HAL_Delay>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <LCD_pulse_enable>:

void LCD_pulse_enable()
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
	I2CData |= (1<<LCD_ENABLE);
 8001fe4:	4b10      	ldr	r3, [pc, #64]	; (8002028 <LCD_pulse_enable+0x48>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <LCD_pulse_enable+0x48>)
 8001ff0:	701a      	strb	r2, [r3, #0]
	I2C_TxByte(LCD_SLA, I2CData);
 8001ff2:	4b0d      	ldr	r3, [pc, #52]	; (8002028 <LCD_pulse_enable+0x48>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	2027      	movs	r0, #39	; 0x27
 8001ffa:	f7ff ffc9 	bl	8001f90 <I2C_TxByte>
	_delay_ms(1);
 8001ffe:	2001      	movs	r0, #1
 8002000:	f7ff ffe0 	bl	8001fc4 <_delay_ms>
	I2CData &= ~(1<<LCD_ENABLE);
 8002004:	4b08      	ldr	r3, [pc, #32]	; (8002028 <LCD_pulse_enable+0x48>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	f023 0304 	bic.w	r3, r3, #4
 800200c:	b2da      	uxtb	r2, r3
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <LCD_pulse_enable+0x48>)
 8002010:	701a      	strb	r2, [r3, #0]
	I2C_TxByte(LCD_SLA, I2CData);
 8002012:	4b05      	ldr	r3, [pc, #20]	; (8002028 <LCD_pulse_enable+0x48>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	4619      	mov	r1, r3
 8002018:	2027      	movs	r0, #39	; 0x27
 800201a:	f7ff ffb9 	bl	8001f90 <I2C_TxByte>
	_delay_ms(1);
 800201e:	2001      	movs	r0, #1
 8002020:	f7ff ffd0 	bl	8001fc4 <_delay_ms>
}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}
 8002028:	200000d0 	.word	0x200000d0

0800202c <LCD_WriteCommand>:

void LCD_WriteCommand(uint8_t cmdData)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
	I2CData &= ~(1<<LCD_RS);
 8002036:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <LCD_WriteCommand+0x7c>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	f023 0301 	bic.w	r3, r3, #1
 800203e:	b2da      	uxtb	r2, r3
 8002040:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <LCD_WriteCommand+0x7c>)
 8002042:	701a      	strb	r2, [r3, #0]
	I2CData = (I2CData & 0x0f) | (cmdData & 0xf0);
 8002044:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <LCD_WriteCommand+0x7c>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	b25b      	sxtb	r3, r3
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	b25a      	sxtb	r2, r3
 8002050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002054:	f023 030f 	bic.w	r3, r3, #15
 8002058:	b25b      	sxtb	r3, r3
 800205a:	4313      	orrs	r3, r2
 800205c:	b25b      	sxtb	r3, r3
 800205e:	b2da      	uxtb	r2, r3
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <LCD_WriteCommand+0x7c>)
 8002062:	701a      	strb	r2, [r3, #0]
	I2C_TxByte(LCD_SLA, I2CData);
 8002064:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <LCD_WriteCommand+0x7c>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	4619      	mov	r1, r3
 800206a:	2027      	movs	r0, #39	; 0x27
 800206c:	f7ff ff90 	bl	8001f90 <I2C_TxByte>
	LCD_pulse_enable();
 8002070:	f7ff ffb6 	bl	8001fe0 <LCD_pulse_enable>
	
	I2CData = (I2CData & 0x0f) | ((cmdData & 0x0f)<<4);
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <LCD_WriteCommand+0x7c>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	b25b      	sxtb	r3, r3
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	b25a      	sxtb	r2, r3
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	b25b      	sxtb	r3, r3
 8002086:	4313      	orrs	r3, r2
 8002088:	b25b      	sxtb	r3, r3
 800208a:	b2da      	uxtb	r2, r3
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <LCD_WriteCommand+0x7c>)
 800208e:	701a      	strb	r2, [r3, #0]
	I2C_TxByte(LCD_SLA, I2CData);
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <LCD_WriteCommand+0x7c>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4619      	mov	r1, r3
 8002096:	2027      	movs	r0, #39	; 0x27
 8002098:	f7ff ff7a 	bl	8001f90 <I2C_TxByte>
	LCD_pulse_enable();
 800209c:	f7ff ffa0 	bl	8001fe0 <LCD_pulse_enable>
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	200000d0 	.word	0x200000d0

080020ac <LCD_WriteCommandInit>:

void LCD_WriteCommandInit(uint8_t cmdData)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
	I2CData &= ~(1<<LCD_RS);
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <LCD_WriteCommandInit+0x50>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <LCD_WriteCommandInit+0x50>)
 80020c2:	701a      	strb	r2, [r3, #0]
	I2CData = (I2CData & 0x0f) | (cmdData & 0xf0);
 80020c4:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <LCD_WriteCommandInit+0x50>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b25b      	sxtb	r3, r3
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	b25a      	sxtb	r2, r3
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	f023 030f 	bic.w	r3, r3, #15
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	4313      	orrs	r3, r2
 80020dc:	b25b      	sxtb	r3, r3
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <LCD_WriteCommandInit+0x50>)
 80020e2:	701a      	strb	r2, [r3, #0]
	I2C_TxByte(LCD_SLA, I2CData);
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <LCD_WriteCommandInit+0x50>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	4619      	mov	r1, r3
 80020ea:	2027      	movs	r0, #39	; 0x27
 80020ec:	f7ff ff50 	bl	8001f90 <I2C_TxByte>
	LCD_pulse_enable();
 80020f0:	f7ff ff76 	bl	8001fe0 <LCD_pulse_enable>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	200000d0 	.word	0x200000d0

08002100 <LCD_WriteData>:

void LCD_WriteData(uint8_t data)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	71fb      	strb	r3, [r7, #7]
	I2CData |= (1<<LCD_RS);
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <LCD_WriteData+0x7c>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	b2da      	uxtb	r2, r3
 8002114:	4b19      	ldr	r3, [pc, #100]	; (800217c <LCD_WriteData+0x7c>)
 8002116:	701a      	strb	r2, [r3, #0]
	I2CData = (I2CData & 0x0f) | (data & 0xf0);
 8002118:	4b18      	ldr	r3, [pc, #96]	; (800217c <LCD_WriteData+0x7c>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b25b      	sxtb	r3, r3
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	b25a      	sxtb	r2, r3
 8002124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002128:	f023 030f 	bic.w	r3, r3, #15
 800212c:	b25b      	sxtb	r3, r3
 800212e:	4313      	orrs	r3, r2
 8002130:	b25b      	sxtb	r3, r3
 8002132:	b2da      	uxtb	r2, r3
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <LCD_WriteData+0x7c>)
 8002136:	701a      	strb	r2, [r3, #0]
	I2C_TxByte(LCD_SLA, I2CData);
 8002138:	4b10      	ldr	r3, [pc, #64]	; (800217c <LCD_WriteData+0x7c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	4619      	mov	r1, r3
 800213e:	2027      	movs	r0, #39	; 0x27
 8002140:	f7ff ff26 	bl	8001f90 <I2C_TxByte>
	LCD_pulse_enable();
 8002144:	f7ff ff4c 	bl	8001fe0 <LCD_pulse_enable>
	
	I2CData = (I2CData & 0x0f) | ((data & 0x0f)<<4);
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <LCD_WriteData+0x7c>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	b25b      	sxtb	r3, r3
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	b25a      	sxtb	r2, r3
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	b25b      	sxtb	r3, r3
 800215a:	4313      	orrs	r3, r2
 800215c:	b25b      	sxtb	r3, r3
 800215e:	b2da      	uxtb	r2, r3
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <LCD_WriteData+0x7c>)
 8002162:	701a      	strb	r2, [r3, #0]
	I2C_TxByte(LCD_SLA, I2CData);
 8002164:	4b05      	ldr	r3, [pc, #20]	; (800217c <LCD_WriteData+0x7c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	4619      	mov	r1, r3
 800216a:	2027      	movs	r0, #39	; 0x27
 800216c:	f7ff ff10 	bl	8001f90 <I2C_TxByte>
	LCD_pulse_enable();	
 8002170:	f7ff ff36 	bl	8001fe0 <LCD_pulse_enable>
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	200000d0 	.word	0x200000d0

08002180 <LCD_BackLightOn>:
	LCD_WriteCommand(COMMAND_CLEAR_DISPLAY);
	_delay_ms(2);
}

void LCD_BackLightOn()
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
	I2CData |= (1<<LCD_BACKLIGHT);
 8002184:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <LCD_BackLightOn+0x24>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	f043 0308 	orr.w	r3, r3, #8
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <LCD_BackLightOn+0x24>)
 8002190:	701a      	strb	r2, [r3, #0]
	I2C_TxByte(LCD_SLA, I2CData);
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <LCD_BackLightOn+0x24>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	4619      	mov	r1, r3
 8002198:	2027      	movs	r0, #39	; 0x27
 800219a:	f7ff fef9 	bl	8001f90 <I2C_TxByte>
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200000d0 	.word	0x200000d0

080021a8 <LCD_Init>:
	I2CData &= ~(1<<LCD_BACKLIGHT);
	I2C_TxByte(LCD_SLA, I2CData);
}

void LCD_Init()
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
//	I2C_Init();
	_delay_ms(20);
 80021ac:	2014      	movs	r0, #20
 80021ae:	f7ff ff09 	bl	8001fc4 <_delay_ms>
	LCD_WriteCommandInit(0x30);
 80021b2:	2030      	movs	r0, #48	; 0x30
 80021b4:	f7ff ff7a 	bl	80020ac <LCD_WriteCommandInit>
	_delay_ms(5);
 80021b8:	2005      	movs	r0, #5
 80021ba:	f7ff ff03 	bl	8001fc4 <_delay_ms>
	LCD_WriteCommandInit(0x30);
 80021be:	2030      	movs	r0, #48	; 0x30
 80021c0:	f7ff ff74 	bl	80020ac <LCD_WriteCommandInit>
	_delay_ms(1);
 80021c4:	2001      	movs	r0, #1
 80021c6:	f7ff fefd 	bl	8001fc4 <_delay_ms>
	LCD_WriteCommandInit(0x30);
 80021ca:	2030      	movs	r0, #48	; 0x30
 80021cc:	f7ff ff6e 	bl	80020ac <LCD_WriteCommandInit>
	LCD_WriteCommandInit(COMMAND_4_BIT_MODE);
 80021d0:	2028      	movs	r0, #40	; 0x28
 80021d2:	f7ff ff6b 	bl	80020ac <LCD_WriteCommandInit>
	LCD_WriteCommand(COMMAND_4_BIT_MODE);
 80021d6:	2028      	movs	r0, #40	; 0x28
 80021d8:	f7ff ff28 	bl	800202c <LCD_WriteCommand>
	LCD_WriteCommand(COMMAND_DISPLAY_OFF);
 80021dc:	2008      	movs	r0, #8
 80021de:	f7ff ff25 	bl	800202c <LCD_WriteCommand>
	LCD_WriteCommand(COMMAND_CLEAR_DISPLAY);
 80021e2:	2001      	movs	r0, #1
 80021e4:	f7ff ff22 	bl	800202c <LCD_WriteCommand>
	LCD_WriteCommand(COMMAND_ENTRY_MODE);
 80021e8:	2006      	movs	r0, #6
 80021ea:	f7ff ff1f 	bl	800202c <LCD_WriteCommand>
	LCD_BackLightOn();
 80021ee:	f7ff ffc7 	bl	8002180 <LCD_BackLightOn>
	LCD_WriteCommand(COMMAND_DISPLAY_ON);
 80021f2:	200c      	movs	r0, #12
 80021f4:	f7ff ff1a 	bl	800202c <LCD_WriteCommand>
	
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}

080021fc <LCD_write_string>:

void LCD_write_string(char *string)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i<string[i]; i++)
 8002204:	2300      	movs	r3, #0
 8002206:	73fb      	strb	r3, [r7, #15]
 8002208:	e009      	b.n	800221e <LCD_write_string+0x22>
	{
		LCD_WriteData(string[i]);
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	4413      	add	r3, r2
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ff74 	bl	8002100 <LCD_WriteData>
	for (uint8_t i=0; i<string[i]; i++)
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	3301      	adds	r3, #1
 800221c:	73fb      	strb	r3, [r7, #15]
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	4413      	add	r3, r2
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	7bfa      	ldrb	r2, [r7, #15]
 8002228:	429a      	cmp	r2, r3
 800222a:	d3ee      	bcc.n	800220a <LCD_write_string+0xe>
	}
}
 800222c:	bf00      	nop
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <LCD_goto_XY>:

void LCD_goto_XY(uint8_t row, uint8_t col)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	460a      	mov	r2, r1
 800223e:	71fb      	strb	r3, [r7, #7]
 8002240:	4613      	mov	r3, r2
 8002242:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8002244:	79bb      	ldrb	r3, [r7, #6]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	71fb      	strb	r3, [r7, #7]
	
	uint8_t address = (0x40 * row) + col;
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	019b      	lsls	r3, r3, #6
 8002258:	b2da      	uxtb	r2, r3
 800225a:	79bb      	ldrb	r3, [r7, #6]
 800225c:	4413      	add	r3, r2
 800225e:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + address;
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	3b80      	subs	r3, #128	; 0x80
 8002264:	73bb      	strb	r3, [r7, #14]
	
	LCD_WriteCommand(command);
 8002266:	7bbb      	ldrb	r3, [r7, #14]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fedf 	bl	800202c <LCD_WriteCommand>
}
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <ParkingLot_Empty_1>:
 *      Author: kccistc
 */
#include "LED.h"

void ParkingLot_Empty_1()
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO, LED1_PIN, GPIO_PIN_SET);
 800227c:	2201      	movs	r2, #1
 800227e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002282:	4805      	ldr	r0, [pc, #20]	; (8002298 <ParkingLot_Empty_1+0x20>)
 8002284:	f001 f9b9 	bl	80035fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO, LED6_PIN, GPIO_PIN_RESET);
 8002288:	2200      	movs	r2, #0
 800228a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800228e:	4803      	ldr	r0, [pc, #12]	; (800229c <ParkingLot_Empty_1+0x24>)
 8002290:	f001 f9b3 	bl	80035fa <HAL_GPIO_WritePin>
}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40010800 	.word	0x40010800
 800229c:	40010c00 	.word	0x40010c00

080022a0 <ParkingLot_Occ_1>:

void ParkingLot_Occ_1()
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO, LED1_PIN, GPIO_PIN_RESET);
 80022a4:	2200      	movs	r2, #0
 80022a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022aa:	4805      	ldr	r0, [pc, #20]	; (80022c0 <ParkingLot_Occ_1+0x20>)
 80022ac:	f001 f9a5 	bl	80035fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO, LED6_PIN, GPIO_PIN_SET);
 80022b0:	2201      	movs	r2, #1
 80022b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022b6:	4803      	ldr	r0, [pc, #12]	; (80022c4 <ParkingLot_Occ_1+0x24>)
 80022b8:	f001 f99f 	bl	80035fa <HAL_GPIO_WritePin>
}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40010800 	.word	0x40010800
 80022c4:	40010c00 	.word	0x40010c00

080022c8 <ParkingLot_Empty_2>:

void ParkingLot_Empty_2()
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2_GPIO, LED2_PIN, GPIO_PIN_SET);
 80022cc:	2201      	movs	r2, #1
 80022ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022d2:	4805      	ldr	r0, [pc, #20]	; (80022e8 <ParkingLot_Empty_2+0x20>)
 80022d4:	f001 f991 	bl	80035fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO, LED7_PIN, GPIO_PIN_RESET);
 80022d8:	2200      	movs	r2, #0
 80022da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022de:	4802      	ldr	r0, [pc, #8]	; (80022e8 <ParkingLot_Empty_2+0x20>)
 80022e0:	f001 f98b 	bl	80035fa <HAL_GPIO_WritePin>
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40010c00 	.word	0x40010c00

080022ec <ParkingLot_Occ_2>:

void ParkingLot_Occ_2()
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2_GPIO, LED2_PIN, GPIO_PIN_RESET);
 80022f0:	2200      	movs	r2, #0
 80022f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022f6:	4805      	ldr	r0, [pc, #20]	; (800230c <ParkingLot_Occ_2+0x20>)
 80022f8:	f001 f97f 	bl	80035fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO, LED7_PIN, GPIO_PIN_SET);
 80022fc:	2201      	movs	r2, #1
 80022fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002302:	4802      	ldr	r0, [pc, #8]	; (800230c <ParkingLot_Occ_2+0x20>)
 8002304:	f001 f979 	bl	80035fa <HAL_GPIO_WritePin>
}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40010c00 	.word	0x40010c00

08002310 <ParkingLot_Empty_3>:

void ParkingLot_Empty_3()
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED3_GPIO, LED3_PIN, GPIO_PIN_SET);
 8002314:	2201      	movs	r2, #1
 8002316:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800231a:	4805      	ldr	r0, [pc, #20]	; (8002330 <ParkingLot_Empty_3+0x20>)
 800231c:	f001 f96d 	bl	80035fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO, LED8_PIN, GPIO_PIN_RESET);
 8002320:	2200      	movs	r2, #0
 8002322:	2120      	movs	r1, #32
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <ParkingLot_Empty_3+0x20>)
 8002326:	f001 f968 	bl	80035fa <HAL_GPIO_WritePin>
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40010c00 	.word	0x40010c00

08002334 <ParkingLot_Occ_3>:

void ParkingLot_Occ_3()
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED3_GPIO, LED3_PIN, GPIO_PIN_RESET);
 8002338:	2200      	movs	r2, #0
 800233a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800233e:	4805      	ldr	r0, [pc, #20]	; (8002354 <ParkingLot_Occ_3+0x20>)
 8002340:	f001 f95b 	bl	80035fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO, LED8_PIN, GPIO_PIN_SET);
 8002344:	2201      	movs	r2, #1
 8002346:	2120      	movs	r1, #32
 8002348:	4802      	ldr	r0, [pc, #8]	; (8002354 <ParkingLot_Occ_3+0x20>)
 800234a:	f001 f956 	bl	80035fa <HAL_GPIO_WritePin>
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40010c00 	.word	0x40010c00

08002358 <ParkingLot_Empty_4>:
void ParkingLot_Empty_4()
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED4_GPIO, LED4_PIN, GPIO_PIN_SET);
 800235c:	2201      	movs	r2, #1
 800235e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002362:	4805      	ldr	r0, [pc, #20]	; (8002378 <ParkingLot_Empty_4+0x20>)
 8002364:	f001 f949 	bl	80035fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED9_GPIO, LED9_PIN, GPIO_PIN_RESET);
 8002368:	2200      	movs	r2, #0
 800236a:	2110      	movs	r1, #16
 800236c:	4802      	ldr	r0, [pc, #8]	; (8002378 <ParkingLot_Empty_4+0x20>)
 800236e:	f001 f944 	bl	80035fa <HAL_GPIO_WritePin>
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40010c00 	.word	0x40010c00

0800237c <ParkingLot_Occ_4>:

void ParkingLot_Occ_4()
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED4_GPIO, LED4_PIN, GPIO_PIN_RESET);
 8002380:	2200      	movs	r2, #0
 8002382:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002386:	4805      	ldr	r0, [pc, #20]	; (800239c <ParkingLot_Occ_4+0x20>)
 8002388:	f001 f937 	bl	80035fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED9_GPIO, LED9_PIN, GPIO_PIN_SET);
 800238c:	2201      	movs	r2, #1
 800238e:	2110      	movs	r1, #16
 8002390:	4802      	ldr	r0, [pc, #8]	; (800239c <ParkingLot_Occ_4+0x20>)
 8002392:	f001 f932 	bl	80035fa <HAL_GPIO_WritePin>
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40010c00 	.word	0x40010c00

080023a0 <ParkingLot_Empty_5>:

void ParkingLot_Empty_5()
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED5_GPIO, LED5_PIN, GPIO_PIN_SET);
 80023a4:	2201      	movs	r2, #1
 80023a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023aa:	4805      	ldr	r0, [pc, #20]	; (80023c0 <ParkingLot_Empty_5+0x20>)
 80023ac:	f001 f925 	bl	80035fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED10_GPIO, LED10_PIN, GPIO_PIN_RESET);
 80023b0:	2200      	movs	r2, #0
 80023b2:	2108      	movs	r1, #8
 80023b4:	4802      	ldr	r0, [pc, #8]	; (80023c0 <ParkingLot_Empty_5+0x20>)
 80023b6:	f001 f920 	bl	80035fa <HAL_GPIO_WritePin>
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40010c00 	.word	0x40010c00

080023c4 <ParkingLot_Occ_5>:

void ParkingLot_Occ_5()
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED5_GPIO, LED5_PIN, GPIO_PIN_RESET);
 80023c8:	2200      	movs	r2, #0
 80023ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023ce:	4805      	ldr	r0, [pc, #20]	; (80023e4 <ParkingLot_Occ_5+0x20>)
 80023d0:	f001 f913 	bl	80035fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED10_GPIO, LED10_PIN, GPIO_PIN_SET);
 80023d4:	2201      	movs	r2, #1
 80023d6:	2108      	movs	r1, #8
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <ParkingLot_Occ_5+0x20>)
 80023da:	f001 f90e 	bl	80035fa <HAL_GPIO_WritePin>
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40010c00 	.word	0x40010c00

080023e8 <ServoRunEntrance>:
 */

#include "Servo.h"

void ServoRunEntrance(uint8_t degree)
{
 80023e8:	b590      	push	{r4, r7, lr}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
	uint16_t CCRData;
	CCRData = (uint16_t) (((10.0 / 9) * degree) + 50) * 0.72;
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fd fffd 	bl	80003f4 <__aeabi_i2d>
 80023fa:	a317      	add	r3, pc, #92	; (adr r3, 8002458 <ServoRunEntrance+0x70>)
 80023fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002400:	f7fe f862 	bl	80004c8 <__aeabi_dmul>
 8002404:	4603      	mov	r3, r0
 8002406:	460c      	mov	r4, r1
 8002408:	4618      	mov	r0, r3
 800240a:	4621      	mov	r1, r4
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	4b15      	ldr	r3, [pc, #84]	; (8002468 <ServoRunEntrance+0x80>)
 8002412:	f7fd fea3 	bl	800015c <__adddf3>
 8002416:	4603      	mov	r3, r0
 8002418:	460c      	mov	r4, r1
 800241a:	4618      	mov	r0, r3
 800241c:	4621      	mov	r1, r4
 800241e:	f7fe fa65 	bl	80008ec <__aeabi_d2uiz>
 8002422:	4603      	mov	r3, r0
 8002424:	b29b      	uxth	r3, r3
 8002426:	4618      	mov	r0, r3
 8002428:	f7fd ffe4 	bl	80003f4 <__aeabi_i2d>
 800242c:	a30c      	add	r3, pc, #48	; (adr r3, 8002460 <ServoRunEntrance+0x78>)
 800242e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002432:	f7fe f849 	bl	80004c8 <__aeabi_dmul>
 8002436:	4603      	mov	r3, r0
 8002438:	460c      	mov	r4, r1
 800243a:	4618      	mov	r0, r3
 800243c:	4621      	mov	r1, r4
 800243e:	f7fe fa55 	bl	80008ec <__aeabi_d2uiz>
 8002442:	4603      	mov	r3, r0
 8002444:	81fb      	strh	r3, [r7, #14]

	__HAL_TIM_SET_COMPARE(&SERVO_HANDLER_ENTRANCE, SERVO_CHANNEL_ENTRANCE, CCRData);
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <ServoRunEntrance+0x84>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	89fa      	ldrh	r2, [r7, #14]
 800244c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800244e:	bf00      	nop
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	bd90      	pop	{r4, r7, pc}
 8002456:	bf00      	nop
 8002458:	71c71c72 	.word	0x71c71c72
 800245c:	3ff1c71c 	.word	0x3ff1c71c
 8002460:	70a3d70a 	.word	0x70a3d70a
 8002464:	3fe70a3d 	.word	0x3fe70a3d
 8002468:	40490000 	.word	0x40490000
 800246c:	20000178 	.word	0x20000178

08002470 <ServoRunExit>:

void ServoRunExit(uint8_t degree)
{
 8002470:	b590      	push	{r4, r7, lr}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
	uint16_t CCRData;
	CCRData = (uint16_t) (((10.0 / 9) * degree) + 50) * 0.72;
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	4618      	mov	r0, r3
 800247e:	f7fd ffb9 	bl	80003f4 <__aeabi_i2d>
 8002482:	a317      	add	r3, pc, #92	; (adr r3, 80024e0 <ServoRunExit+0x70>)
 8002484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002488:	f7fe f81e 	bl	80004c8 <__aeabi_dmul>
 800248c:	4603      	mov	r3, r0
 800248e:	460c      	mov	r4, r1
 8002490:	4618      	mov	r0, r3
 8002492:	4621      	mov	r1, r4
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <ServoRunExit+0x80>)
 800249a:	f7fd fe5f 	bl	800015c <__adddf3>
 800249e:	4603      	mov	r3, r0
 80024a0:	460c      	mov	r4, r1
 80024a2:	4618      	mov	r0, r3
 80024a4:	4621      	mov	r1, r4
 80024a6:	f7fe fa21 	bl	80008ec <__aeabi_d2uiz>
 80024aa:	4603      	mov	r3, r0
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fd ffa0 	bl	80003f4 <__aeabi_i2d>
 80024b4:	a30c      	add	r3, pc, #48	; (adr r3, 80024e8 <ServoRunExit+0x78>)
 80024b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ba:	f7fe f805 	bl	80004c8 <__aeabi_dmul>
 80024be:	4603      	mov	r3, r0
 80024c0:	460c      	mov	r4, r1
 80024c2:	4618      	mov	r0, r3
 80024c4:	4621      	mov	r1, r4
 80024c6:	f7fe fa11 	bl	80008ec <__aeabi_d2uiz>
 80024ca:	4603      	mov	r3, r0
 80024cc:	81fb      	strh	r3, [r7, #14]

	__HAL_TIM_SET_COMPARE(&SERVO_HANDLER_EXIT, SERVO_CHANNEL_EXIT, CCRData);
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <ServoRunExit+0x84>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	89fa      	ldrh	r2, [r7, #14]
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80024d6:	bf00      	nop
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd90      	pop	{r4, r7, pc}
 80024de:	bf00      	nop
 80024e0:	71c71c72 	.word	0x71c71c72
 80024e4:	3ff1c71c 	.word	0x3ff1c71c
 80024e8:	70a3d70a 	.word	0x70a3d70a
 80024ec:	3fe70a3d 	.word	0x3fe70a3d
 80024f0:	40490000 	.word	0x40490000
 80024f4:	20000228 	.word	0x20000228

080024f8 <ServoStart>:

void ServoStart(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&SERVO_HANDLER_ENTRANCE, SERVO_CHANNEL_ENTRANCE);
 80024fc:	210c      	movs	r1, #12
 80024fe:	4804      	ldr	r0, [pc, #16]	; (8002510 <ServoStart+0x18>)
 8002500:	f002 fb06 	bl	8004b10 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&SERVO_HANDLER_EXIT, SERVO_CHANNEL_EXIT);
 8002504:	210c      	movs	r1, #12
 8002506:	4803      	ldr	r0, [pc, #12]	; (8002514 <ServoStart+0x1c>)
 8002508:	f002 fb02 	bl	8004b10 <HAL_TIM_PWM_Start>
}
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000178 	.word	0x20000178
 8002514:	20000228 	.word	0x20000228

08002518 <StepMotorStop>:


#include "Step_Motor.h"

void StepMotorStop()
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEPMOTOR_A1_GPIO, STEPMOTOR_A1_PIN, GPIO_PIN_RESET);
 800251c:	2200      	movs	r2, #0
 800251e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002522:	480b      	ldr	r0, [pc, #44]	; (8002550 <StepMotorStop+0x38>)
 8002524:	f001 f869 	bl	80035fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEPMOTOR_B1_GPIO, STEPMOTOR_B1_PIN, GPIO_PIN_RESET);
 8002528:	2200      	movs	r2, #0
 800252a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800252e:	4808      	ldr	r0, [pc, #32]	; (8002550 <StepMotorStop+0x38>)
 8002530:	f001 f863 	bl	80035fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEPMOTOR_A2_GPIO, STEPMOTOR_A2_PIN, GPIO_PIN_RESET);
 8002534:	2200      	movs	r2, #0
 8002536:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800253a:	4805      	ldr	r0, [pc, #20]	; (8002550 <StepMotorStop+0x38>)
 800253c:	f001 f85d 	bl	80035fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEPMOTOR_B2_GPIO, STEPMOTOR_B2_PIN, GPIO_PIN_RESET);
 8002540:	2200      	movs	r2, #0
 8002542:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002546:	4802      	ldr	r0, [pc, #8]	; (8002550 <StepMotorStop+0x38>)
 8002548:	f001 f857 	bl	80035fa <HAL_GPIO_WritePin>
}
 800254c:	bf00      	nop
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40010800 	.word	0x40010800

08002554 <StepMotorCW>:

void StepMotorCW(uint8_t phase)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	71fb      	strb	r3, [r7, #7]
	switch(phase)
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	2b03      	cmp	r3, #3
 8002562:	d86f      	bhi.n	8002644 <StepMotorCW+0xf0>
 8002564:	a201      	add	r2, pc, #4	; (adr r2, 800256c <StepMotorCW+0x18>)
 8002566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256a:	bf00      	nop
 800256c:	0800257d 	.word	0x0800257d
 8002570:	080025af 	.word	0x080025af
 8002574:	080025e1 	.word	0x080025e1
 8002578:	08002613 	.word	0x08002613
	{
	case 0:
		HAL_GPIO_WritePin(STEPMOTOR_A1_GPIO, STEPMOTOR_A1_PIN, GPIO_PIN_SET);
 800257c:	2201      	movs	r2, #1
 800257e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002582:	4832      	ldr	r0, [pc, #200]	; (800264c <StepMotorCW+0xf8>)
 8002584:	f001 f839 	bl	80035fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPMOTOR_B1_GPIO, STEPMOTOR_B1_PIN, GPIO_PIN_SET);
 8002588:	2201      	movs	r2, #1
 800258a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800258e:	482f      	ldr	r0, [pc, #188]	; (800264c <StepMotorCW+0xf8>)
 8002590:	f001 f833 	bl	80035fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPMOTOR_A2_GPIO, STEPMOTOR_A2_PIN, GPIO_PIN_RESET);
 8002594:	2200      	movs	r2, #0
 8002596:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800259a:	482c      	ldr	r0, [pc, #176]	; (800264c <StepMotorCW+0xf8>)
 800259c:	f001 f82d 	bl	80035fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPMOTOR_B2_GPIO, STEPMOTOR_B2_PIN, GPIO_PIN_RESET);
 80025a0:	2200      	movs	r2, #0
 80025a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025a6:	4829      	ldr	r0, [pc, #164]	; (800264c <StepMotorCW+0xf8>)
 80025a8:	f001 f827 	bl	80035fa <HAL_GPIO_WritePin>
		break;
 80025ac:	e04a      	b.n	8002644 <StepMotorCW+0xf0>
	case 1:
		HAL_GPIO_WritePin(STEPMOTOR_A1_GPIO, STEPMOTOR_A1_PIN, GPIO_PIN_RESET);
 80025ae:	2200      	movs	r2, #0
 80025b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025b4:	4825      	ldr	r0, [pc, #148]	; (800264c <StepMotorCW+0xf8>)
 80025b6:	f001 f820 	bl	80035fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPMOTOR_B1_GPIO, STEPMOTOR_B1_PIN, GPIO_PIN_SET);
 80025ba:	2201      	movs	r2, #1
 80025bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025c0:	4822      	ldr	r0, [pc, #136]	; (800264c <StepMotorCW+0xf8>)
 80025c2:	f001 f81a 	bl	80035fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPMOTOR_A2_GPIO, STEPMOTOR_A2_PIN, GPIO_PIN_SET);
 80025c6:	2201      	movs	r2, #1
 80025c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025cc:	481f      	ldr	r0, [pc, #124]	; (800264c <StepMotorCW+0xf8>)
 80025ce:	f001 f814 	bl	80035fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPMOTOR_B2_GPIO, STEPMOTOR_B2_PIN, GPIO_PIN_RESET);
 80025d2:	2200      	movs	r2, #0
 80025d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025d8:	481c      	ldr	r0, [pc, #112]	; (800264c <StepMotorCW+0xf8>)
 80025da:	f001 f80e 	bl	80035fa <HAL_GPIO_WritePin>
		break;
 80025de:	e031      	b.n	8002644 <StepMotorCW+0xf0>
	case 2:
		HAL_GPIO_WritePin(STEPMOTOR_A1_GPIO, STEPMOTOR_A1_PIN, GPIO_PIN_RESET);
 80025e0:	2200      	movs	r2, #0
 80025e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025e6:	4819      	ldr	r0, [pc, #100]	; (800264c <StepMotorCW+0xf8>)
 80025e8:	f001 f807 	bl	80035fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPMOTOR_B1_GPIO, STEPMOTOR_B1_PIN, GPIO_PIN_RESET);
 80025ec:	2200      	movs	r2, #0
 80025ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025f2:	4816      	ldr	r0, [pc, #88]	; (800264c <StepMotorCW+0xf8>)
 80025f4:	f001 f801 	bl	80035fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPMOTOR_A2_GPIO, STEPMOTOR_A2_PIN, GPIO_PIN_SET);
 80025f8:	2201      	movs	r2, #1
 80025fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025fe:	4813      	ldr	r0, [pc, #76]	; (800264c <StepMotorCW+0xf8>)
 8002600:	f000 fffb 	bl	80035fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPMOTOR_B2_GPIO, STEPMOTOR_B2_PIN, GPIO_PIN_SET);
 8002604:	2201      	movs	r2, #1
 8002606:	f44f 7100 	mov.w	r1, #512	; 0x200
 800260a:	4810      	ldr	r0, [pc, #64]	; (800264c <StepMotorCW+0xf8>)
 800260c:	f000 fff5 	bl	80035fa <HAL_GPIO_WritePin>
		break;
 8002610:	e018      	b.n	8002644 <StepMotorCW+0xf0>
	case 3:
		HAL_GPIO_WritePin(STEPMOTOR_A1_GPIO, STEPMOTOR_A1_PIN, GPIO_PIN_SET);
 8002612:	2201      	movs	r2, #1
 8002614:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002618:	480c      	ldr	r0, [pc, #48]	; (800264c <StepMotorCW+0xf8>)
 800261a:	f000 ffee 	bl	80035fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPMOTOR_B1_GPIO, STEPMOTOR_B1_PIN, GPIO_PIN_RESET);
 800261e:	2200      	movs	r2, #0
 8002620:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002624:	4809      	ldr	r0, [pc, #36]	; (800264c <StepMotorCW+0xf8>)
 8002626:	f000 ffe8 	bl	80035fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPMOTOR_A2_GPIO, STEPMOTOR_A2_PIN, GPIO_PIN_RESET);
 800262a:	2200      	movs	r2, #0
 800262c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002630:	4806      	ldr	r0, [pc, #24]	; (800264c <StepMotorCW+0xf8>)
 8002632:	f000 ffe2 	bl	80035fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPMOTOR_B2_GPIO, STEPMOTOR_B2_PIN, GPIO_PIN_SET);
 8002636:	2201      	movs	r2, #1
 8002638:	f44f 7100 	mov.w	r1, #512	; 0x200
 800263c:	4803      	ldr	r0, [pc, #12]	; (800264c <StepMotorCW+0xf8>)
 800263e:	f000 ffdc 	bl	80035fa <HAL_GPIO_WritePin>
		break;
 8002642:	bf00      	nop
	}
}
 8002644:	bf00      	nop
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40010800 	.word	0x40010800

08002650 <StepMotorCCW>:

void StepMotorCCW(uint8_t phase)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
	switch(phase)
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	2b03      	cmp	r3, #3
 800265e:	d86f      	bhi.n	8002740 <StepMotorCCW+0xf0>
 8002660:	a201      	add	r2, pc, #4	; (adr r2, 8002668 <StepMotorCCW+0x18>)
 8002662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002666:	bf00      	nop
 8002668:	08002679 	.word	0x08002679
 800266c:	080026ab 	.word	0x080026ab
 8002670:	080026dd 	.word	0x080026dd
 8002674:	0800270f 	.word	0x0800270f
	{
	case 0:
		HAL_GPIO_WritePin(STEPMOTOR_A1_GPIO, STEPMOTOR_A1_PIN, GPIO_PIN_SET);
 8002678:	2201      	movs	r2, #1
 800267a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800267e:	4832      	ldr	r0, [pc, #200]	; (8002748 <StepMotorCCW+0xf8>)
 8002680:	f000 ffbb 	bl	80035fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPMOTOR_B1_GPIO, STEPMOTOR_B1_PIN, GPIO_PIN_RESET);
 8002684:	2200      	movs	r2, #0
 8002686:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800268a:	482f      	ldr	r0, [pc, #188]	; (8002748 <StepMotorCCW+0xf8>)
 800268c:	f000 ffb5 	bl	80035fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPMOTOR_A2_GPIO, STEPMOTOR_A2_PIN, GPIO_PIN_RESET);
 8002690:	2200      	movs	r2, #0
 8002692:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002696:	482c      	ldr	r0, [pc, #176]	; (8002748 <StepMotorCCW+0xf8>)
 8002698:	f000 ffaf 	bl	80035fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPMOTOR_B2_GPIO, STEPMOTOR_B2_PIN, GPIO_PIN_SET);
 800269c:	2201      	movs	r2, #1
 800269e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026a2:	4829      	ldr	r0, [pc, #164]	; (8002748 <StepMotorCCW+0xf8>)
 80026a4:	f000 ffa9 	bl	80035fa <HAL_GPIO_WritePin>
		break;
 80026a8:	e04a      	b.n	8002740 <StepMotorCCW+0xf0>
	case 1:
		HAL_GPIO_WritePin(STEPMOTOR_A1_GPIO, STEPMOTOR_A1_PIN, GPIO_PIN_RESET);
 80026aa:	2200      	movs	r2, #0
 80026ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026b0:	4825      	ldr	r0, [pc, #148]	; (8002748 <StepMotorCCW+0xf8>)
 80026b2:	f000 ffa2 	bl	80035fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPMOTOR_B1_GPIO, STEPMOTOR_B1_PIN, GPIO_PIN_RESET);
 80026b6:	2200      	movs	r2, #0
 80026b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026bc:	4822      	ldr	r0, [pc, #136]	; (8002748 <StepMotorCCW+0xf8>)
 80026be:	f000 ff9c 	bl	80035fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPMOTOR_A2_GPIO, STEPMOTOR_A2_PIN, GPIO_PIN_SET);
 80026c2:	2201      	movs	r2, #1
 80026c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026c8:	481f      	ldr	r0, [pc, #124]	; (8002748 <StepMotorCCW+0xf8>)
 80026ca:	f000 ff96 	bl	80035fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPMOTOR_B2_GPIO, STEPMOTOR_B2_PIN, GPIO_PIN_SET);
 80026ce:	2201      	movs	r2, #1
 80026d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026d4:	481c      	ldr	r0, [pc, #112]	; (8002748 <StepMotorCCW+0xf8>)
 80026d6:	f000 ff90 	bl	80035fa <HAL_GPIO_WritePin>
		break;
 80026da:	e031      	b.n	8002740 <StepMotorCCW+0xf0>
	case 2:
		HAL_GPIO_WritePin(STEPMOTOR_A1_GPIO, STEPMOTOR_A1_PIN, GPIO_PIN_RESET);
 80026dc:	2200      	movs	r2, #0
 80026de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026e2:	4819      	ldr	r0, [pc, #100]	; (8002748 <StepMotorCCW+0xf8>)
 80026e4:	f000 ff89 	bl	80035fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPMOTOR_B1_GPIO, STEPMOTOR_B1_PIN, GPIO_PIN_SET);
 80026e8:	2201      	movs	r2, #1
 80026ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026ee:	4816      	ldr	r0, [pc, #88]	; (8002748 <StepMotorCCW+0xf8>)
 80026f0:	f000 ff83 	bl	80035fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPMOTOR_A2_GPIO, STEPMOTOR_A2_PIN, GPIO_PIN_SET);
 80026f4:	2201      	movs	r2, #1
 80026f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026fa:	4813      	ldr	r0, [pc, #76]	; (8002748 <StepMotorCCW+0xf8>)
 80026fc:	f000 ff7d 	bl	80035fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPMOTOR_B2_GPIO, STEPMOTOR_B2_PIN, GPIO_PIN_RESET);
 8002700:	2200      	movs	r2, #0
 8002702:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002706:	4810      	ldr	r0, [pc, #64]	; (8002748 <StepMotorCCW+0xf8>)
 8002708:	f000 ff77 	bl	80035fa <HAL_GPIO_WritePin>
		break;
 800270c:	e018      	b.n	8002740 <StepMotorCCW+0xf0>
	case 3:
		HAL_GPIO_WritePin(STEPMOTOR_A1_GPIO, STEPMOTOR_A1_PIN, GPIO_PIN_SET);
 800270e:	2201      	movs	r2, #1
 8002710:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002714:	480c      	ldr	r0, [pc, #48]	; (8002748 <StepMotorCCW+0xf8>)
 8002716:	f000 ff70 	bl	80035fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPMOTOR_B1_GPIO, STEPMOTOR_B1_PIN, GPIO_PIN_SET);
 800271a:	2201      	movs	r2, #1
 800271c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002720:	4809      	ldr	r0, [pc, #36]	; (8002748 <StepMotorCCW+0xf8>)
 8002722:	f000 ff6a 	bl	80035fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPMOTOR_A2_GPIO, STEPMOTOR_A2_PIN, GPIO_PIN_RESET);
 8002726:	2200      	movs	r2, #0
 8002728:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800272c:	4806      	ldr	r0, [pc, #24]	; (8002748 <StepMotorCCW+0xf8>)
 800272e:	f000 ff64 	bl	80035fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPMOTOR_B2_GPIO, STEPMOTOR_B2_PIN, GPIO_PIN_RESET);
 8002732:	2200      	movs	r2, #0
 8002734:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002738:	4803      	ldr	r0, [pc, #12]	; (8002748 <StepMotorCCW+0xf8>)
 800273a:	f000 ff5e 	bl	80035fa <HAL_GPIO_WritePin>
		break;
 800273e:	bf00      	nop
	}
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40010800 	.word	0x40010800

0800274c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002750:	4b08      	ldr	r3, [pc, #32]	; (8002774 <HAL_Init+0x28>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a07      	ldr	r2, [pc, #28]	; (8002774 <HAL_Init+0x28>)
 8002756:	f043 0310 	orr.w	r3, r3, #16
 800275a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800275c:	2003      	movs	r0, #3
 800275e:	f000 fd2f 	bl	80031c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002762:	2000      	movs	r0, #0
 8002764:	f7fe ff96 	bl	8001694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002768:	f7fe fd86 	bl	8001278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40022000 	.word	0x40022000

08002778 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <HAL_IncTick+0x1c>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	4b05      	ldr	r3, [pc, #20]	; (8002798 <HAL_IncTick+0x20>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4413      	add	r3, r2
 8002788:	4a03      	ldr	r2, [pc, #12]	; (8002798 <HAL_IncTick+0x20>)
 800278a:	6013      	str	r3, [r2, #0]
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr
 8002794:	2000000c 	.word	0x2000000c
 8002798:	200002e8 	.word	0x200002e8

0800279c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return uwTick;
 80027a0:	4b02      	ldr	r3, [pc, #8]	; (80027ac <HAL_GetTick+0x10>)
 80027a2:	681b      	ldr	r3, [r3, #0]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	200002e8 	.word	0x200002e8

080027b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027b8:	f7ff fff0 	bl	800279c <HAL_GetTick>
 80027bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c8:	d005      	beq.n	80027d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ca:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <HAL_Delay+0x40>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4413      	add	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027d6:	bf00      	nop
 80027d8:	f7ff ffe0 	bl	800279c <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d8f7      	bhi.n	80027d8 <HAL_Delay+0x28>
  {
  }
}
 80027e8:	bf00      	nop
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	2000000c 	.word	0x2000000c

080027f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e0be      	b.n	8002994 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002820:	2b00      	cmp	r3, #0
 8002822:	d109      	bne.n	8002838 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fe fd52 	bl	80012dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 fbdd 	bl	8002ff8 <ADC_ConversionStop_Disable>
 800283e:	4603      	mov	r3, r0
 8002840:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002846:	f003 0310 	and.w	r3, r3, #16
 800284a:	2b00      	cmp	r3, #0
 800284c:	f040 8099 	bne.w	8002982 <HAL_ADC_Init+0x18e>
 8002850:	7dfb      	ldrb	r3, [r7, #23]
 8002852:	2b00      	cmp	r3, #0
 8002854:	f040 8095 	bne.w	8002982 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002860:	f023 0302 	bic.w	r3, r3, #2
 8002864:	f043 0202 	orr.w	r2, r3, #2
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002874:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	7b1b      	ldrb	r3, [r3, #12]
 800287a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800287c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	4313      	orrs	r3, r2
 8002882:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800288c:	d003      	beq.n	8002896 <HAL_ADC_Init+0xa2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d102      	bne.n	800289c <HAL_ADC_Init+0xa8>
 8002896:	f44f 7380 	mov.w	r3, #256	; 0x100
 800289a:	e000      	b.n	800289e <HAL_ADC_Init+0xaa>
 800289c:	2300      	movs	r3, #0
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	7d1b      	ldrb	r3, [r3, #20]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d119      	bne.n	80028e0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	7b1b      	ldrb	r3, [r3, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d109      	bne.n	80028c8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	035a      	lsls	r2, r3, #13
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4313      	orrs	r3, r2
 80028c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	e00b      	b.n	80028e0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	f043 0220 	orr.w	r2, r3, #32
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	f043 0201 	orr.w	r2, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	4b28      	ldr	r3, [pc, #160]	; (800299c <HAL_ADC_Init+0x1a8>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	68b9      	ldr	r1, [r7, #8]
 8002904:	430b      	orrs	r3, r1
 8002906:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002910:	d003      	beq.n	800291a <HAL_ADC_Init+0x126>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d104      	bne.n	8002924 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	3b01      	subs	r3, #1
 8002920:	051b      	lsls	r3, r3, #20
 8002922:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	430a      	orrs	r2, r1
 8002936:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <HAL_ADC_Init+0x1ac>)
 8002940:	4013      	ands	r3, r2
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	429a      	cmp	r2, r3
 8002946:	d10b      	bne.n	8002960 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	f023 0303 	bic.w	r3, r3, #3
 8002956:	f043 0201 	orr.w	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800295e:	e018      	b.n	8002992 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	f023 0312 	bic.w	r3, r3, #18
 8002968:	f043 0210 	orr.w	r2, r3, #16
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	f043 0201 	orr.w	r2, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002980:	e007      	b.n	8002992 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002986:	f043 0210 	orr.w	r2, r3, #16
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002992:	7dfb      	ldrb	r3, [r7, #23]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	ffe1f7fd 	.word	0xffe1f7fd
 80029a0:	ff1f0efe 	.word	0xff1f0efe

080029a4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_ADC_Start+0x1a>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e098      	b.n	8002af0 <HAL_ADC_Start+0x14c>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fac4 	bl	8002f54 <ADC_Enable>
 80029cc:	4603      	mov	r3, r0
 80029ce:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f040 8087 	bne.w	8002ae6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e0:	f023 0301 	bic.w	r3, r3, #1
 80029e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a41      	ldr	r2, [pc, #260]	; (8002af8 <HAL_ADC_Start+0x154>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d105      	bne.n	8002a02 <HAL_ADC_Start+0x5e>
 80029f6:	4b41      	ldr	r3, [pc, #260]	; (8002afc <HAL_ADC_Start+0x158>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d115      	bne.n	8002a2e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d026      	beq.n	8002a6a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a2c:	e01d      	b.n	8002a6a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a2f      	ldr	r2, [pc, #188]	; (8002afc <HAL_ADC_Start+0x158>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d004      	beq.n	8002a4e <HAL_ADC_Start+0xaa>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a2b      	ldr	r2, [pc, #172]	; (8002af8 <HAL_ADC_Start+0x154>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d10d      	bne.n	8002a6a <HAL_ADC_Start+0xc6>
 8002a4e:	4b2b      	ldr	r3, [pc, #172]	; (8002afc <HAL_ADC_Start+0x158>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d007      	beq.n	8002a6a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d006      	beq.n	8002a84 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7a:	f023 0206 	bic.w	r2, r3, #6
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a82:	e002      	b.n	8002a8a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f06f 0202 	mvn.w	r2, #2
 8002a9a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002aa6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002aaa:	d113      	bne.n	8002ad4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ab0:	4a11      	ldr	r2, [pc, #68]	; (8002af8 <HAL_ADC_Start+0x154>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d105      	bne.n	8002ac2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002ab6:	4b11      	ldr	r3, [pc, #68]	; (8002afc <HAL_ADC_Start+0x158>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d108      	bne.n	8002ad4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002ad0:	609a      	str	r2, [r3, #8]
 8002ad2:	e00c      	b.n	8002aee <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	e003      	b.n	8002aee <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40012800 	.word	0x40012800
 8002afc:	40012400 	.word	0x40012400

08002b00 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_ADC_Stop+0x1a>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e01a      	b.n	8002b50 <HAL_ADC_Stop+0x50>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fa68 	bl	8002ff8 <ADC_ConversionStop_Disable>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d109      	bne.n	8002b46 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b3a:	f023 0301 	bic.w	r3, r3, #1
 8002b3e:	f043 0201 	orr.w	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b58:	b590      	push	{r4, r7, lr}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b6e:	f7ff fe15 	bl	800279c <HAL_GetTick>
 8002b72:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00b      	beq.n	8002b9a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b86:	f043 0220 	orr.w	r2, r3, #32
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e0c8      	b.n	8002d2c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d12a      	bne.n	8002bfe <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d123      	bne.n	8002bfe <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002bb6:	e01a      	b.n	8002bee <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbe:	d016      	beq.n	8002bee <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d007      	beq.n	8002bd6 <HAL_ADC_PollForConversion+0x7e>
 8002bc6:	f7ff fde9 	bl	800279c <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d20b      	bcs.n	8002bee <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	f043 0204 	orr.w	r2, r3, #4
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e09e      	b.n	8002d2c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0dd      	beq.n	8002bb8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002bfc:	e06c      	b.n	8002cd8 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002bfe:	4b4d      	ldr	r3, [pc, #308]	; (8002d34 <HAL_ADC_PollForConversion+0x1dc>)
 8002c00:	681c      	ldr	r4, [r3, #0]
 8002c02:	2002      	movs	r0, #2
 8002c04:	f001 fe4e 	bl	80048a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6919      	ldr	r1, [r3, #16]
 8002c14:	4b48      	ldr	r3, [pc, #288]	; (8002d38 <HAL_ADC_PollForConversion+0x1e0>)
 8002c16:	400b      	ands	r3, r1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d118      	bne.n	8002c4e <HAL_ADC_PollForConversion+0xf6>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68d9      	ldr	r1, [r3, #12]
 8002c22:	4b46      	ldr	r3, [pc, #280]	; (8002d3c <HAL_ADC_PollForConversion+0x1e4>)
 8002c24:	400b      	ands	r3, r1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d111      	bne.n	8002c4e <HAL_ADC_PollForConversion+0xf6>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6919      	ldr	r1, [r3, #16]
 8002c30:	4b43      	ldr	r3, [pc, #268]	; (8002d40 <HAL_ADC_PollForConversion+0x1e8>)
 8002c32:	400b      	ands	r3, r1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d108      	bne.n	8002c4a <HAL_ADC_PollForConversion+0xf2>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68d9      	ldr	r1, [r3, #12]
 8002c3e:	4b41      	ldr	r3, [pc, #260]	; (8002d44 <HAL_ADC_PollForConversion+0x1ec>)
 8002c40:	400b      	ands	r3, r1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_ADC_PollForConversion+0xf2>
 8002c46:	2314      	movs	r3, #20
 8002c48:	e020      	b.n	8002c8c <HAL_ADC_PollForConversion+0x134>
 8002c4a:	2329      	movs	r3, #41	; 0x29
 8002c4c:	e01e      	b.n	8002c8c <HAL_ADC_PollForConversion+0x134>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6919      	ldr	r1, [r3, #16]
 8002c54:	4b3a      	ldr	r3, [pc, #232]	; (8002d40 <HAL_ADC_PollForConversion+0x1e8>)
 8002c56:	400b      	ands	r3, r1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d106      	bne.n	8002c6a <HAL_ADC_PollForConversion+0x112>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68d9      	ldr	r1, [r3, #12]
 8002c62:	4b38      	ldr	r3, [pc, #224]	; (8002d44 <HAL_ADC_PollForConversion+0x1ec>)
 8002c64:	400b      	ands	r3, r1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00d      	beq.n	8002c86 <HAL_ADC_PollForConversion+0x12e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6919      	ldr	r1, [r3, #16]
 8002c70:	4b35      	ldr	r3, [pc, #212]	; (8002d48 <HAL_ADC_PollForConversion+0x1f0>)
 8002c72:	400b      	ands	r3, r1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d108      	bne.n	8002c8a <HAL_ADC_PollForConversion+0x132>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68d9      	ldr	r1, [r3, #12]
 8002c7e:	4b32      	ldr	r3, [pc, #200]	; (8002d48 <HAL_ADC_PollForConversion+0x1f0>)
 8002c80:	400b      	ands	r3, r1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_ADC_PollForConversion+0x132>
 8002c86:	2354      	movs	r3, #84	; 0x54
 8002c88:	e000      	b.n	8002c8c <HAL_ADC_PollForConversion+0x134>
 8002c8a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002c8c:	fb02 f303 	mul.w	r3, r2, r3
 8002c90:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002c92:	e01d      	b.n	8002cd0 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9a:	d016      	beq.n	8002cca <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d007      	beq.n	8002cb2 <HAL_ADC_PollForConversion+0x15a>
 8002ca2:	f7ff fd7b 	bl	800279c <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d20b      	bcs.n	8002cca <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	f043 0204 	orr.w	r2, r3, #4
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e030      	b.n	8002d2c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d8dd      	bhi.n	8002c94 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0212 	mvn.w	r2, #18
 8002ce0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002cf8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002cfc:	d115      	bne.n	8002d2a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d111      	bne.n	8002d2a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d105      	bne.n	8002d2a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d22:	f043 0201 	orr.w	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	371c      	adds	r7, #28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd90      	pop	{r4, r7, pc}
 8002d34:	20000000 	.word	0x20000000
 8002d38:	24924924 	.word	0x24924924
 8002d3c:	00924924 	.word	0x00924924
 8002d40:	12492492 	.word	0x12492492
 8002d44:	00492492 	.word	0x00492492
 8002d48:	00249249 	.word	0x00249249

08002d4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x20>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e0dc      	b.n	8002f3e <HAL_ADC_ConfigChannel+0x1da>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b06      	cmp	r3, #6
 8002d92:	d81c      	bhi.n	8002dce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	3b05      	subs	r3, #5
 8002da6:	221f      	movs	r2, #31
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	4019      	ands	r1, r3
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	6818      	ldr	r0, [r3, #0]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3b05      	subs	r3, #5
 8002dc0:	fa00 f203 	lsl.w	r2, r0, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	635a      	str	r2, [r3, #52]	; 0x34
 8002dcc:	e03c      	b.n	8002e48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b0c      	cmp	r3, #12
 8002dd4:	d81c      	bhi.n	8002e10 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	3b23      	subs	r3, #35	; 0x23
 8002de8:	221f      	movs	r2, #31
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43db      	mvns	r3, r3
 8002df0:	4019      	ands	r1, r3
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	3b23      	subs	r3, #35	; 0x23
 8002e02:	fa00 f203 	lsl.w	r2, r0, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e0e:	e01b      	b.n	8002e48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	3b41      	subs	r3, #65	; 0x41
 8002e22:	221f      	movs	r2, #31
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	4019      	ands	r1, r3
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	3b41      	subs	r3, #65	; 0x41
 8002e3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b09      	cmp	r3, #9
 8002e4e:	d91c      	bls.n	8002e8a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68d9      	ldr	r1, [r3, #12]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	4413      	add	r3, r2
 8002e60:	3b1e      	subs	r3, #30
 8002e62:	2207      	movs	r2, #7
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	4019      	ands	r1, r3
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	6898      	ldr	r0, [r3, #8]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4613      	mov	r3, r2
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	4413      	add	r3, r2
 8002e7a:	3b1e      	subs	r3, #30
 8002e7c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	60da      	str	r2, [r3, #12]
 8002e88:	e019      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6919      	ldr	r1, [r3, #16]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4613      	mov	r3, r2
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	4413      	add	r3, r2
 8002e9a:	2207      	movs	r2, #7
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	4019      	ands	r1, r3
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	6898      	ldr	r0, [r3, #8]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	fa00 f203 	lsl.w	r2, r0, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b10      	cmp	r3, #16
 8002ec4:	d003      	beq.n	8002ece <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002eca:	2b11      	cmp	r3, #17
 8002ecc:	d132      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a1d      	ldr	r2, [pc, #116]	; (8002f48 <HAL_ADC_ConfigChannel+0x1e4>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d125      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d126      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ef4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b10      	cmp	r3, #16
 8002efc:	d11a      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002efe:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <HAL_ADC_ConfigChannel+0x1e8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a13      	ldr	r2, [pc, #76]	; (8002f50 <HAL_ADC_ConfigChannel+0x1ec>)
 8002f04:	fba2 2303 	umull	r2, r3, r2, r3
 8002f08:	0c9a      	lsrs	r2, r3, #18
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f14:	e002      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f9      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x1b2>
 8002f22:	e007      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	f043 0220 	orr.w	r2, r3, #32
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr
 8002f48:	40012400 	.word	0x40012400
 8002f4c:	20000000 	.word	0x20000000
 8002f50:	431bde83 	.word	0x431bde83

08002f54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d039      	beq.n	8002fe6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f042 0201 	orr.w	r2, r2, #1
 8002f80:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f82:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <ADC_Enable+0x9c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a1b      	ldr	r2, [pc, #108]	; (8002ff4 <ADC_Enable+0xa0>)
 8002f88:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8c:	0c9b      	lsrs	r3, r3, #18
 8002f8e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f90:	e002      	b.n	8002f98 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	3b01      	subs	r3, #1
 8002f96:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f9      	bne.n	8002f92 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f9e:	f7ff fbfd 	bl	800279c <HAL_GetTick>
 8002fa2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002fa4:	e018      	b.n	8002fd8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fa6:	f7ff fbf9 	bl	800279c <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d911      	bls.n	8002fd8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb8:	f043 0210 	orr.w	r2, r3, #16
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	f043 0201 	orr.w	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e007      	b.n	8002fe8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d1df      	bne.n	8002fa6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	431bde83 	.word	0x431bde83

08002ff8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b01      	cmp	r3, #1
 8003010:	d127      	bne.n	8003062 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0201 	bic.w	r2, r2, #1
 8003020:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003022:	f7ff fbbb 	bl	800279c <HAL_GetTick>
 8003026:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003028:	e014      	b.n	8003054 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800302a:	f7ff fbb7 	bl	800279c <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d90d      	bls.n	8003054 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	f043 0210 	orr.w	r2, r3, #16
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	f043 0201 	orr.w	r2, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e007      	b.n	8003064 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b01      	cmp	r3, #1
 8003060:	d0e3      	beq.n	800302a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800307c:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <__NVIC_SetPriorityGrouping+0x44>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003088:	4013      	ands	r3, r2
 800308a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800309c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800309e:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <__NVIC_SetPriorityGrouping+0x44>)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	60d3      	str	r3, [r2, #12]
}
 80030a4:	bf00      	nop
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000ed00 	.word	0xe000ed00

080030b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030b8:	4b04      	ldr	r3, [pc, #16]	; (80030cc <__NVIC_GetPriorityGrouping+0x18>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	0a1b      	lsrs	r3, r3, #8
 80030be:	f003 0307 	and.w	r3, r3, #7
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	db0b      	blt.n	80030fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	f003 021f 	and.w	r2, r3, #31
 80030e8:	4906      	ldr	r1, [pc, #24]	; (8003104 <__NVIC_EnableIRQ+0x34>)
 80030ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	2001      	movs	r0, #1
 80030f2:	fa00 f202 	lsl.w	r2, r0, r2
 80030f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr
 8003104:	e000e100 	.word	0xe000e100

08003108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	6039      	str	r1, [r7, #0]
 8003112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003118:	2b00      	cmp	r3, #0
 800311a:	db0a      	blt.n	8003132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	b2da      	uxtb	r2, r3
 8003120:	490c      	ldr	r1, [pc, #48]	; (8003154 <__NVIC_SetPriority+0x4c>)
 8003122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003126:	0112      	lsls	r2, r2, #4
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	440b      	add	r3, r1
 800312c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003130:	e00a      	b.n	8003148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	b2da      	uxtb	r2, r3
 8003136:	4908      	ldr	r1, [pc, #32]	; (8003158 <__NVIC_SetPriority+0x50>)
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	3b04      	subs	r3, #4
 8003140:	0112      	lsls	r2, r2, #4
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	440b      	add	r3, r1
 8003146:	761a      	strb	r2, [r3, #24]
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	e000e100 	.word	0xe000e100
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800315c:	b480      	push	{r7}
 800315e:	b089      	sub	sp, #36	; 0x24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f1c3 0307 	rsb	r3, r3, #7
 8003176:	2b04      	cmp	r3, #4
 8003178:	bf28      	it	cs
 800317a:	2304      	movcs	r3, #4
 800317c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3304      	adds	r3, #4
 8003182:	2b06      	cmp	r3, #6
 8003184:	d902      	bls.n	800318c <NVIC_EncodePriority+0x30>
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3b03      	subs	r3, #3
 800318a:	e000      	b.n	800318e <NVIC_EncodePriority+0x32>
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003190:	f04f 32ff 	mov.w	r2, #4294967295
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43da      	mvns	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	401a      	ands	r2, r3
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031a4:	f04f 31ff 	mov.w	r1, #4294967295
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	fa01 f303 	lsl.w	r3, r1, r3
 80031ae:	43d9      	mvns	r1, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b4:	4313      	orrs	r3, r2
         );
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3724      	adds	r7, #36	; 0x24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr

080031c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff ff4f 	bl	800306c <__NVIC_SetPriorityGrouping>
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b086      	sub	sp, #24
 80031da:	af00      	add	r7, sp, #0
 80031dc:	4603      	mov	r3, r0
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031e8:	f7ff ff64 	bl	80030b4 <__NVIC_GetPriorityGrouping>
 80031ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	6978      	ldr	r0, [r7, #20]
 80031f4:	f7ff ffb2 	bl	800315c <NVIC_EncodePriority>
 80031f8:	4602      	mov	r2, r0
 80031fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031fe:	4611      	mov	r1, r2
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff ff81 	bl	8003108 <__NVIC_SetPriority>
}
 8003206:	bf00      	nop
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	4603      	mov	r3, r0
 8003216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff ff57 	bl	80030d0 <__NVIC_EnableIRQ>
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800323e:	2b02      	cmp	r3, #2
 8003240:	d005      	beq.n	800324e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2204      	movs	r2, #4
 8003246:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	73fb      	strb	r3, [r7, #15]
 800324c:	e051      	b.n	80032f2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 020e 	bic.w	r2, r2, #14
 800325c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0201 	bic.w	r2, r2, #1
 800326c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a22      	ldr	r2, [pc, #136]	; (80032fc <HAL_DMA_Abort_IT+0xd0>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d029      	beq.n	80032cc <HAL_DMA_Abort_IT+0xa0>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a20      	ldr	r2, [pc, #128]	; (8003300 <HAL_DMA_Abort_IT+0xd4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d022      	beq.n	80032c8 <HAL_DMA_Abort_IT+0x9c>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1f      	ldr	r2, [pc, #124]	; (8003304 <HAL_DMA_Abort_IT+0xd8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d01a      	beq.n	80032c2 <HAL_DMA_Abort_IT+0x96>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1d      	ldr	r2, [pc, #116]	; (8003308 <HAL_DMA_Abort_IT+0xdc>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d012      	beq.n	80032bc <HAL_DMA_Abort_IT+0x90>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1c      	ldr	r2, [pc, #112]	; (800330c <HAL_DMA_Abort_IT+0xe0>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d00a      	beq.n	80032b6 <HAL_DMA_Abort_IT+0x8a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a1a      	ldr	r2, [pc, #104]	; (8003310 <HAL_DMA_Abort_IT+0xe4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d102      	bne.n	80032b0 <HAL_DMA_Abort_IT+0x84>
 80032aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032ae:	e00e      	b.n	80032ce <HAL_DMA_Abort_IT+0xa2>
 80032b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032b4:	e00b      	b.n	80032ce <HAL_DMA_Abort_IT+0xa2>
 80032b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032ba:	e008      	b.n	80032ce <HAL_DMA_Abort_IT+0xa2>
 80032bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032c0:	e005      	b.n	80032ce <HAL_DMA_Abort_IT+0xa2>
 80032c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032c6:	e002      	b.n	80032ce <HAL_DMA_Abort_IT+0xa2>
 80032c8:	2310      	movs	r3, #16
 80032ca:	e000      	b.n	80032ce <HAL_DMA_Abort_IT+0xa2>
 80032cc:	2301      	movs	r3, #1
 80032ce:	4a11      	ldr	r2, [pc, #68]	; (8003314 <HAL_DMA_Abort_IT+0xe8>)
 80032d0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	4798      	blx	r3
    } 
  }
  return status;
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40020008 	.word	0x40020008
 8003300:	4002001c 	.word	0x4002001c
 8003304:	40020030 	.word	0x40020030
 8003308:	40020044 	.word	0x40020044
 800330c:	40020058 	.word	0x40020058
 8003310:	4002006c 	.word	0x4002006c
 8003314:	40020000 	.word	0x40020000

08003318 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003318:	b480      	push	{r7}
 800331a:	b08b      	sub	sp, #44	; 0x2c
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003322:	2300      	movs	r3, #0
 8003324:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003326:	2300      	movs	r3, #0
 8003328:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800332a:	e127      	b.n	800357c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800332c:	2201      	movs	r2, #1
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	429a      	cmp	r2, r3
 8003346:	f040 8116 	bne.w	8003576 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b12      	cmp	r3, #18
 8003350:	d034      	beq.n	80033bc <HAL_GPIO_Init+0xa4>
 8003352:	2b12      	cmp	r3, #18
 8003354:	d80d      	bhi.n	8003372 <HAL_GPIO_Init+0x5a>
 8003356:	2b02      	cmp	r3, #2
 8003358:	d02b      	beq.n	80033b2 <HAL_GPIO_Init+0x9a>
 800335a:	2b02      	cmp	r3, #2
 800335c:	d804      	bhi.n	8003368 <HAL_GPIO_Init+0x50>
 800335e:	2b00      	cmp	r3, #0
 8003360:	d031      	beq.n	80033c6 <HAL_GPIO_Init+0xae>
 8003362:	2b01      	cmp	r3, #1
 8003364:	d01c      	beq.n	80033a0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003366:	e048      	b.n	80033fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003368:	2b03      	cmp	r3, #3
 800336a:	d043      	beq.n	80033f4 <HAL_GPIO_Init+0xdc>
 800336c:	2b11      	cmp	r3, #17
 800336e:	d01b      	beq.n	80033a8 <HAL_GPIO_Init+0x90>
          break;
 8003370:	e043      	b.n	80033fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003372:	4a89      	ldr	r2, [pc, #548]	; (8003598 <HAL_GPIO_Init+0x280>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d026      	beq.n	80033c6 <HAL_GPIO_Init+0xae>
 8003378:	4a87      	ldr	r2, [pc, #540]	; (8003598 <HAL_GPIO_Init+0x280>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d806      	bhi.n	800338c <HAL_GPIO_Init+0x74>
 800337e:	4a87      	ldr	r2, [pc, #540]	; (800359c <HAL_GPIO_Init+0x284>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d020      	beq.n	80033c6 <HAL_GPIO_Init+0xae>
 8003384:	4a86      	ldr	r2, [pc, #536]	; (80035a0 <HAL_GPIO_Init+0x288>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d01d      	beq.n	80033c6 <HAL_GPIO_Init+0xae>
          break;
 800338a:	e036      	b.n	80033fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800338c:	4a85      	ldr	r2, [pc, #532]	; (80035a4 <HAL_GPIO_Init+0x28c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d019      	beq.n	80033c6 <HAL_GPIO_Init+0xae>
 8003392:	4a85      	ldr	r2, [pc, #532]	; (80035a8 <HAL_GPIO_Init+0x290>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d016      	beq.n	80033c6 <HAL_GPIO_Init+0xae>
 8003398:	4a84      	ldr	r2, [pc, #528]	; (80035ac <HAL_GPIO_Init+0x294>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d013      	beq.n	80033c6 <HAL_GPIO_Init+0xae>
          break;
 800339e:	e02c      	b.n	80033fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	623b      	str	r3, [r7, #32]
          break;
 80033a6:	e028      	b.n	80033fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	3304      	adds	r3, #4
 80033ae:	623b      	str	r3, [r7, #32]
          break;
 80033b0:	e023      	b.n	80033fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	3308      	adds	r3, #8
 80033b8:	623b      	str	r3, [r7, #32]
          break;
 80033ba:	e01e      	b.n	80033fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	330c      	adds	r3, #12
 80033c2:	623b      	str	r3, [r7, #32]
          break;
 80033c4:	e019      	b.n	80033fa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d102      	bne.n	80033d4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033ce:	2304      	movs	r3, #4
 80033d0:	623b      	str	r3, [r7, #32]
          break;
 80033d2:	e012      	b.n	80033fa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d105      	bne.n	80033e8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033dc:	2308      	movs	r3, #8
 80033de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	611a      	str	r2, [r3, #16]
          break;
 80033e6:	e008      	b.n	80033fa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033e8:	2308      	movs	r3, #8
 80033ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	615a      	str	r2, [r3, #20]
          break;
 80033f2:	e002      	b.n	80033fa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80033f4:	2300      	movs	r3, #0
 80033f6:	623b      	str	r3, [r7, #32]
          break;
 80033f8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	2bff      	cmp	r3, #255	; 0xff
 80033fe:	d801      	bhi.n	8003404 <HAL_GPIO_Init+0xec>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	e001      	b.n	8003408 <HAL_GPIO_Init+0xf0>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3304      	adds	r3, #4
 8003408:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2bff      	cmp	r3, #255	; 0xff
 800340e:	d802      	bhi.n	8003416 <HAL_GPIO_Init+0xfe>
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	e002      	b.n	800341c <HAL_GPIO_Init+0x104>
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	3b08      	subs	r3, #8
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	210f      	movs	r1, #15
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	fa01 f303 	lsl.w	r3, r1, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	401a      	ands	r2, r3
 800342e:	6a39      	ldr	r1, [r7, #32]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	fa01 f303 	lsl.w	r3, r1, r3
 8003436:	431a      	orrs	r2, r3
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8096 	beq.w	8003576 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800344a:	4b59      	ldr	r3, [pc, #356]	; (80035b0 <HAL_GPIO_Init+0x298>)
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	4a58      	ldr	r2, [pc, #352]	; (80035b0 <HAL_GPIO_Init+0x298>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	6193      	str	r3, [r2, #24]
 8003456:	4b56      	ldr	r3, [pc, #344]	; (80035b0 <HAL_GPIO_Init+0x298>)
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	60bb      	str	r3, [r7, #8]
 8003460:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003462:	4a54      	ldr	r2, [pc, #336]	; (80035b4 <HAL_GPIO_Init+0x29c>)
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	089b      	lsrs	r3, r3, #2
 8003468:	3302      	adds	r3, #2
 800346a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800346e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	220f      	movs	r2, #15
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4013      	ands	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a4b      	ldr	r2, [pc, #300]	; (80035b8 <HAL_GPIO_Init+0x2a0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d013      	beq.n	80034b6 <HAL_GPIO_Init+0x19e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a4a      	ldr	r2, [pc, #296]	; (80035bc <HAL_GPIO_Init+0x2a4>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d00d      	beq.n	80034b2 <HAL_GPIO_Init+0x19a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a49      	ldr	r2, [pc, #292]	; (80035c0 <HAL_GPIO_Init+0x2a8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d007      	beq.n	80034ae <HAL_GPIO_Init+0x196>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a48      	ldr	r2, [pc, #288]	; (80035c4 <HAL_GPIO_Init+0x2ac>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d101      	bne.n	80034aa <HAL_GPIO_Init+0x192>
 80034a6:	2303      	movs	r3, #3
 80034a8:	e006      	b.n	80034b8 <HAL_GPIO_Init+0x1a0>
 80034aa:	2304      	movs	r3, #4
 80034ac:	e004      	b.n	80034b8 <HAL_GPIO_Init+0x1a0>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e002      	b.n	80034b8 <HAL_GPIO_Init+0x1a0>
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <HAL_GPIO_Init+0x1a0>
 80034b6:	2300      	movs	r3, #0
 80034b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ba:	f002 0203 	and.w	r2, r2, #3
 80034be:	0092      	lsls	r2, r2, #2
 80034c0:	4093      	lsls	r3, r2
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80034c8:	493a      	ldr	r1, [pc, #232]	; (80035b4 <HAL_GPIO_Init+0x29c>)
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	089b      	lsrs	r3, r3, #2
 80034ce:	3302      	adds	r3, #2
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d006      	beq.n	80034f0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034e2:	4b39      	ldr	r3, [pc, #228]	; (80035c8 <HAL_GPIO_Init+0x2b0>)
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	4938      	ldr	r1, [pc, #224]	; (80035c8 <HAL_GPIO_Init+0x2b0>)
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	600b      	str	r3, [r1, #0]
 80034ee:	e006      	b.n	80034fe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034f0:	4b35      	ldr	r3, [pc, #212]	; (80035c8 <HAL_GPIO_Init+0x2b0>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	43db      	mvns	r3, r3
 80034f8:	4933      	ldr	r1, [pc, #204]	; (80035c8 <HAL_GPIO_Init+0x2b0>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d006      	beq.n	8003518 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800350a:	4b2f      	ldr	r3, [pc, #188]	; (80035c8 <HAL_GPIO_Init+0x2b0>)
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	492e      	ldr	r1, [pc, #184]	; (80035c8 <HAL_GPIO_Init+0x2b0>)
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	4313      	orrs	r3, r2
 8003514:	604b      	str	r3, [r1, #4]
 8003516:	e006      	b.n	8003526 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003518:	4b2b      	ldr	r3, [pc, #172]	; (80035c8 <HAL_GPIO_Init+0x2b0>)
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	43db      	mvns	r3, r3
 8003520:	4929      	ldr	r1, [pc, #164]	; (80035c8 <HAL_GPIO_Init+0x2b0>)
 8003522:	4013      	ands	r3, r2
 8003524:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d006      	beq.n	8003540 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003532:	4b25      	ldr	r3, [pc, #148]	; (80035c8 <HAL_GPIO_Init+0x2b0>)
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	4924      	ldr	r1, [pc, #144]	; (80035c8 <HAL_GPIO_Init+0x2b0>)
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	4313      	orrs	r3, r2
 800353c:	608b      	str	r3, [r1, #8]
 800353e:	e006      	b.n	800354e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003540:	4b21      	ldr	r3, [pc, #132]	; (80035c8 <HAL_GPIO_Init+0x2b0>)
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	43db      	mvns	r3, r3
 8003548:	491f      	ldr	r1, [pc, #124]	; (80035c8 <HAL_GPIO_Init+0x2b0>)
 800354a:	4013      	ands	r3, r2
 800354c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d006      	beq.n	8003568 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800355a:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <HAL_GPIO_Init+0x2b0>)
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	491a      	ldr	r1, [pc, #104]	; (80035c8 <HAL_GPIO_Init+0x2b0>)
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	4313      	orrs	r3, r2
 8003564:	60cb      	str	r3, [r1, #12]
 8003566:	e006      	b.n	8003576 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003568:	4b17      	ldr	r3, [pc, #92]	; (80035c8 <HAL_GPIO_Init+0x2b0>)
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	43db      	mvns	r3, r3
 8003570:	4915      	ldr	r1, [pc, #84]	; (80035c8 <HAL_GPIO_Init+0x2b0>)
 8003572:	4013      	ands	r3, r2
 8003574:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	3301      	adds	r3, #1
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	fa22 f303 	lsr.w	r3, r2, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	f47f aed0 	bne.w	800332c <HAL_GPIO_Init+0x14>
  }
}
 800358c:	bf00      	nop
 800358e:	372c      	adds	r7, #44	; 0x2c
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	10210000 	.word	0x10210000
 800359c:	10110000 	.word	0x10110000
 80035a0:	10120000 	.word	0x10120000
 80035a4:	10310000 	.word	0x10310000
 80035a8:	10320000 	.word	0x10320000
 80035ac:	10220000 	.word	0x10220000
 80035b0:	40021000 	.word	0x40021000
 80035b4:	40010000 	.word	0x40010000
 80035b8:	40010800 	.word	0x40010800
 80035bc:	40010c00 	.word	0x40010c00
 80035c0:	40011000 	.word	0x40011000
 80035c4:	40011400 	.word	0x40011400
 80035c8:	40010400 	.word	0x40010400

080035cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	887b      	ldrh	r3, [r7, #2]
 80035de:	4013      	ands	r3, r2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035e4:	2301      	movs	r3, #1
 80035e6:	73fb      	strb	r3, [r7, #15]
 80035e8:	e001      	b.n	80035ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035ea:	2300      	movs	r3, #0
 80035ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr

080035fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	460b      	mov	r3, r1
 8003604:	807b      	strh	r3, [r7, #2]
 8003606:	4613      	mov	r3, r2
 8003608:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800360a:	787b      	ldrb	r3, [r7, #1]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003610:	887a      	ldrh	r2, [r7, #2]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003616:	e003      	b.n	8003620 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003618:	887b      	ldrh	r3, [r7, #2]
 800361a:	041a      	lsls	r2, r3, #16
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	611a      	str	r2, [r3, #16]
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr

0800362a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	460b      	mov	r3, r1
 8003634:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	887b      	ldrh	r3, [r7, #2]
 800363c:	4013      	ands	r3, r2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003642:	887a      	ldrh	r2, [r7, #2]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003648:	e002      	b.n	8003650 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800364a:	887a      	ldrh	r2, [r7, #2]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	611a      	str	r2, [r3, #16]
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr
	...

0800365c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e10f      	b.n	800388e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fd fea8 	bl	80013d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2224      	movs	r2, #36	; 0x24
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0201 	bic.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036a0:	f000 ffd4 	bl	800464c <HAL_RCC_GetPCLK1Freq>
 80036a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	4a7b      	ldr	r2, [pc, #492]	; (8003898 <HAL_I2C_Init+0x23c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d807      	bhi.n	80036c0 <HAL_I2C_Init+0x64>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4a7a      	ldr	r2, [pc, #488]	; (800389c <HAL_I2C_Init+0x240>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	bf94      	ite	ls
 80036b8:	2301      	movls	r3, #1
 80036ba:	2300      	movhi	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	e006      	b.n	80036ce <HAL_I2C_Init+0x72>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4a77      	ldr	r2, [pc, #476]	; (80038a0 <HAL_I2C_Init+0x244>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	bf94      	ite	ls
 80036c8:	2301      	movls	r3, #1
 80036ca:	2300      	movhi	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e0db      	b.n	800388e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4a72      	ldr	r2, [pc, #456]	; (80038a4 <HAL_I2C_Init+0x248>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	0c9b      	lsrs	r3, r3, #18
 80036e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	4a64      	ldr	r2, [pc, #400]	; (8003898 <HAL_I2C_Init+0x23c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d802      	bhi.n	8003710 <HAL_I2C_Init+0xb4>
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	3301      	adds	r3, #1
 800370e:	e009      	b.n	8003724 <HAL_I2C_Init+0xc8>
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003716:	fb02 f303 	mul.w	r3, r2, r3
 800371a:	4a63      	ldr	r2, [pc, #396]	; (80038a8 <HAL_I2C_Init+0x24c>)
 800371c:	fba2 2303 	umull	r2, r3, r2, r3
 8003720:	099b      	lsrs	r3, r3, #6
 8003722:	3301      	adds	r3, #1
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	430b      	orrs	r3, r1
 800372a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003736:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	4956      	ldr	r1, [pc, #344]	; (8003898 <HAL_I2C_Init+0x23c>)
 8003740:	428b      	cmp	r3, r1
 8003742:	d80d      	bhi.n	8003760 <HAL_I2C_Init+0x104>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	1e59      	subs	r1, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003752:	3301      	adds	r3, #1
 8003754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003758:	2b04      	cmp	r3, #4
 800375a:	bf38      	it	cc
 800375c:	2304      	movcc	r3, #4
 800375e:	e04f      	b.n	8003800 <HAL_I2C_Init+0x1a4>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d111      	bne.n	800378c <HAL_I2C_Init+0x130>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	1e58      	subs	r0, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6859      	ldr	r1, [r3, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	440b      	add	r3, r1
 8003776:	fbb0 f3f3 	udiv	r3, r0, r3
 800377a:	3301      	adds	r3, #1
 800377c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003780:	2b00      	cmp	r3, #0
 8003782:	bf0c      	ite	eq
 8003784:	2301      	moveq	r3, #1
 8003786:	2300      	movne	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	e012      	b.n	80037b2 <HAL_I2C_Init+0x156>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1e58      	subs	r0, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6859      	ldr	r1, [r3, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	0099      	lsls	r1, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	fbb0 f3f3 	udiv	r3, r0, r3
 80037a2:	3301      	adds	r3, #1
 80037a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf0c      	ite	eq
 80037ac:	2301      	moveq	r3, #1
 80037ae:	2300      	movne	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_I2C_Init+0x15e>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e022      	b.n	8003800 <HAL_I2C_Init+0x1a4>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10e      	bne.n	80037e0 <HAL_I2C_Init+0x184>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1e58      	subs	r0, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6859      	ldr	r1, [r3, #4]
 80037ca:	460b      	mov	r3, r1
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	440b      	add	r3, r1
 80037d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80037d4:	3301      	adds	r3, #1
 80037d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037de:	e00f      	b.n	8003800 <HAL_I2C_Init+0x1a4>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	1e58      	subs	r0, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6859      	ldr	r1, [r3, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	0099      	lsls	r1, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f6:	3301      	adds	r3, #1
 80037f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	6809      	ldr	r1, [r1, #0]
 8003804:	4313      	orrs	r3, r2
 8003806:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69da      	ldr	r2, [r3, #28]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800382e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6911      	ldr	r1, [r2, #16]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68d2      	ldr	r2, [r2, #12]
 800383a:	4311      	orrs	r1, r2
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	430b      	orrs	r3, r1
 8003842:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695a      	ldr	r2, [r3, #20]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	000186a0 	.word	0x000186a0
 800389c:	001e847f 	.word	0x001e847f
 80038a0:	003d08ff 	.word	0x003d08ff
 80038a4:	431bde83 	.word	0x431bde83
 80038a8:	10624dd3 	.word	0x10624dd3

080038ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af02      	add	r7, sp, #8
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	607a      	str	r2, [r7, #4]
 80038b6:	461a      	mov	r2, r3
 80038b8:	460b      	mov	r3, r1
 80038ba:	817b      	strh	r3, [r7, #10]
 80038bc:	4613      	mov	r3, r2
 80038be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038c0:	f7fe ff6c 	bl	800279c <HAL_GetTick>
 80038c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	f040 80e0 	bne.w	8003a94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	2319      	movs	r3, #25
 80038da:	2201      	movs	r2, #1
 80038dc:	4970      	ldr	r1, [pc, #448]	; (8003aa0 <HAL_I2C_Master_Transmit+0x1f4>)
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f958 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80038ea:	2302      	movs	r3, #2
 80038ec:	e0d3      	b.n	8003a96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_I2C_Master_Transmit+0x50>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e0cc      	b.n	8003a96 <HAL_I2C_Master_Transmit+0x1ea>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b01      	cmp	r3, #1
 8003910:	d007      	beq.n	8003922 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f042 0201 	orr.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003930:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2221      	movs	r2, #33	; 0x21
 8003936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2210      	movs	r2, #16
 800393e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	893a      	ldrh	r2, [r7, #8]
 8003952:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4a50      	ldr	r2, [pc, #320]	; (8003aa4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003962:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003964:	8979      	ldrh	r1, [r7, #10]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	6a3a      	ldr	r2, [r7, #32]
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f89c 	bl	8003aa8 <I2C_MasterRequestWrite>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e08d      	b.n	8003a96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003990:	e066      	b.n	8003a60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	6a39      	ldr	r1, [r7, #32]
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 f9d2 	bl	8003d40 <I2C_WaitOnTXEFlagUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00d      	beq.n	80039be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d107      	bne.n	80039ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e06b      	b.n	8003a96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	781a      	ldrb	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d11b      	bne.n	8003a34 <HAL_I2C_Master_Transmit+0x188>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d017      	beq.n	8003a34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	781a      	ldrb	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	6a39      	ldr	r1, [r7, #32]
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f9c2 	bl	8003dc2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00d      	beq.n	8003a60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d107      	bne.n	8003a5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e01a      	b.n	8003a96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d194      	bne.n	8003992 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e000      	b.n	8003a96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a94:	2302      	movs	r3, #2
  }
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	00100002 	.word	0x00100002
 8003aa4:	ffff0000 	.word	0xffff0000

08003aa8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af02      	add	r7, sp, #8
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d006      	beq.n	8003ad2 <I2C_MasterRequestWrite+0x2a>
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d003      	beq.n	8003ad2 <I2C_MasterRequestWrite+0x2a>
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ad0:	d108      	bne.n	8003ae4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	e00b      	b.n	8003afc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	2b12      	cmp	r3, #18
 8003aea:	d107      	bne.n	8003afc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003afa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 f843 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e035      	b.n	8003b84 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b20:	d108      	bne.n	8003b34 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b22:	897b      	ldrh	r3, [r7, #10]
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	461a      	mov	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b30:	611a      	str	r2, [r3, #16]
 8003b32:	e01b      	b.n	8003b6c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b34:	897b      	ldrh	r3, [r7, #10]
 8003b36:	11db      	asrs	r3, r3, #7
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	f003 0306 	and.w	r3, r3, #6
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f063 030f 	orn	r3, r3, #15
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	490e      	ldr	r1, [pc, #56]	; (8003b8c <I2C_MasterRequestWrite+0xe4>)
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 f875 	bl	8003c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e010      	b.n	8003b84 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b62:	897b      	ldrh	r3, [r7, #10]
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	4907      	ldr	r1, [pc, #28]	; (8003b90 <I2C_MasterRequestWrite+0xe8>)
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f865 	bl	8003c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	00010008 	.word	0x00010008
 8003b90:	00010002 	.word	0x00010002

08003b94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ba4:	e025      	b.n	8003bf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bac:	d021      	beq.n	8003bf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bae:	f7fe fdf5 	bl	800279c <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d302      	bcc.n	8003bc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d116      	bne.n	8003bf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f043 0220 	orr.w	r2, r3, #32
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e023      	b.n	8003c3a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	0c1b      	lsrs	r3, r3, #16
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d10d      	bne.n	8003c18 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	43da      	mvns	r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4013      	ands	r3, r2
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	bf0c      	ite	eq
 8003c0e:	2301      	moveq	r3, #1
 8003c10:	2300      	movne	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	e00c      	b.n	8003c32 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	43da      	mvns	r2, r3
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4013      	ands	r3, r2
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	bf0c      	ite	eq
 8003c2a:	2301      	moveq	r3, #1
 8003c2c:	2300      	movne	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d0b6      	beq.n	8003ba6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b084      	sub	sp, #16
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
 8003c4e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c50:	e051      	b.n	8003cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c60:	d123      	bne.n	8003caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c70:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c7a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	f043 0204 	orr.w	r2, r3, #4
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e046      	b.n	8003d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb0:	d021      	beq.n	8003cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb2:	f7fe fd73 	bl	800279c <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d302      	bcc.n	8003cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d116      	bne.n	8003cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f043 0220 	orr.w	r2, r3, #32
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e020      	b.n	8003d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	0c1b      	lsrs	r3, r3, #16
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d10c      	bne.n	8003d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	43da      	mvns	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	bf14      	ite	ne
 8003d12:	2301      	movne	r3, #1
 8003d14:	2300      	moveq	r3, #0
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	e00b      	b.n	8003d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	43da      	mvns	r2, r3
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	4013      	ands	r3, r2
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	bf14      	ite	ne
 8003d2c:	2301      	movne	r3, #1
 8003d2e:	2300      	moveq	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d18d      	bne.n	8003c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d4c:	e02d      	b.n	8003daa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 f878 	bl	8003e44 <I2C_IsAcknowledgeFailed>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e02d      	b.n	8003dba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d64:	d021      	beq.n	8003daa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d66:	f7fe fd19 	bl	800279c <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d302      	bcc.n	8003d7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d116      	bne.n	8003daa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2220      	movs	r2, #32
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	f043 0220 	orr.w	r2, r3, #32
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e007      	b.n	8003dba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db4:	2b80      	cmp	r3, #128	; 0x80
 8003db6:	d1ca      	bne.n	8003d4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b084      	sub	sp, #16
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dce:	e02d      	b.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f837 	bl	8003e44 <I2C_IsAcknowledgeFailed>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e02d      	b.n	8003e3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de6:	d021      	beq.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de8:	f7fe fcd8 	bl	800279c <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d302      	bcc.n	8003dfe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d116      	bne.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	f043 0220 	orr.w	r2, r3, #32
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e007      	b.n	8003e3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d1ca      	bne.n	8003dd0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e5a:	d11b      	bne.n	8003e94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	f043 0204 	orr.w	r2, r3, #4
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e26c      	b.n	800438c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 8087 	beq.w	8003fce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ec0:	4b92      	ldr	r3, [pc, #584]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d00c      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ecc:	4b8f      	ldr	r3, [pc, #572]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f003 030c 	and.w	r3, r3, #12
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d112      	bne.n	8003efe <HAL_RCC_OscConfig+0x5e>
 8003ed8:	4b8c      	ldr	r3, [pc, #560]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee4:	d10b      	bne.n	8003efe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee6:	4b89      	ldr	r3, [pc, #548]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d06c      	beq.n	8003fcc <HAL_RCC_OscConfig+0x12c>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d168      	bne.n	8003fcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e246      	b.n	800438c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f06:	d106      	bne.n	8003f16 <HAL_RCC_OscConfig+0x76>
 8003f08:	4b80      	ldr	r3, [pc, #512]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a7f      	ldr	r2, [pc, #508]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	e02e      	b.n	8003f74 <HAL_RCC_OscConfig+0xd4>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x98>
 8003f1e:	4b7b      	ldr	r3, [pc, #492]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a7a      	ldr	r2, [pc, #488]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	4b78      	ldr	r3, [pc, #480]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a77      	ldr	r2, [pc, #476]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	e01d      	b.n	8003f74 <HAL_RCC_OscConfig+0xd4>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f40:	d10c      	bne.n	8003f5c <HAL_RCC_OscConfig+0xbc>
 8003f42:	4b72      	ldr	r3, [pc, #456]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a71      	ldr	r2, [pc, #452]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	4b6f      	ldr	r3, [pc, #444]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a6e      	ldr	r2, [pc, #440]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	e00b      	b.n	8003f74 <HAL_RCC_OscConfig+0xd4>
 8003f5c:	4b6b      	ldr	r3, [pc, #428]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a6a      	ldr	r2, [pc, #424]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	4b68      	ldr	r3, [pc, #416]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a67      	ldr	r2, [pc, #412]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d013      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7c:	f7fe fc0e 	bl	800279c <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f84:	f7fe fc0a 	bl	800279c <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b64      	cmp	r3, #100	; 0x64
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e1fa      	b.n	800438c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f96:	4b5d      	ldr	r3, [pc, #372]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0f0      	beq.n	8003f84 <HAL_RCC_OscConfig+0xe4>
 8003fa2:	e014      	b.n	8003fce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa4:	f7fe fbfa 	bl	800279c <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fac:	f7fe fbf6 	bl	800279c <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b64      	cmp	r3, #100	; 0x64
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e1e6      	b.n	800438c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fbe:	4b53      	ldr	r3, [pc, #332]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f0      	bne.n	8003fac <HAL_RCC_OscConfig+0x10c>
 8003fca:	e000      	b.n	8003fce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d063      	beq.n	80040a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fda:	4b4c      	ldr	r3, [pc, #304]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f003 030c 	and.w	r3, r3, #12
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00b      	beq.n	8003ffe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003fe6:	4b49      	ldr	r3, [pc, #292]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d11c      	bne.n	800402c <HAL_RCC_OscConfig+0x18c>
 8003ff2:	4b46      	ldr	r3, [pc, #280]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d116      	bne.n	800402c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ffe:	4b43      	ldr	r3, [pc, #268]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d005      	beq.n	8004016 <HAL_RCC_OscConfig+0x176>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d001      	beq.n	8004016 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e1ba      	b.n	800438c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004016:	4b3d      	ldr	r3, [pc, #244]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	4939      	ldr	r1, [pc, #228]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8004026:	4313      	orrs	r3, r2
 8004028:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402a:	e03a      	b.n	80040a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d020      	beq.n	8004076 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004034:	4b36      	ldr	r3, [pc, #216]	; (8004110 <HAL_RCC_OscConfig+0x270>)
 8004036:	2201      	movs	r2, #1
 8004038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403a:	f7fe fbaf 	bl	800279c <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004042:	f7fe fbab 	bl	800279c <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e19b      	b.n	800438c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004054:	4b2d      	ldr	r3, [pc, #180]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004060:	4b2a      	ldr	r3, [pc, #168]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	4927      	ldr	r1, [pc, #156]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8004070:	4313      	orrs	r3, r2
 8004072:	600b      	str	r3, [r1, #0]
 8004074:	e015      	b.n	80040a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004076:	4b26      	ldr	r3, [pc, #152]	; (8004110 <HAL_RCC_OscConfig+0x270>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407c:	f7fe fb8e 	bl	800279c <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004084:	f7fe fb8a 	bl	800279c <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e17a      	b.n	800438c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004096:	4b1d      	ldr	r3, [pc, #116]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d03a      	beq.n	8004124 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d019      	beq.n	80040ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040b6:	4b17      	ldr	r3, [pc, #92]	; (8004114 <HAL_RCC_OscConfig+0x274>)
 80040b8:	2201      	movs	r2, #1
 80040ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040bc:	f7fe fb6e 	bl	800279c <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c4:	f7fe fb6a 	bl	800279c <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e15a      	b.n	800438c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040d6:	4b0d      	ldr	r3, [pc, #52]	; (800410c <HAL_RCC_OscConfig+0x26c>)
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0f0      	beq.n	80040c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80040e2:	2001      	movs	r0, #1
 80040e4:	f000 fb0a 	bl	80046fc <RCC_Delay>
 80040e8:	e01c      	b.n	8004124 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040ea:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <HAL_RCC_OscConfig+0x274>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f0:	f7fe fb54 	bl	800279c <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f6:	e00f      	b.n	8004118 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040f8:	f7fe fb50 	bl	800279c <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d908      	bls.n	8004118 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e140      	b.n	800438c <HAL_RCC_OscConfig+0x4ec>
 800410a:	bf00      	nop
 800410c:	40021000 	.word	0x40021000
 8004110:	42420000 	.word	0x42420000
 8004114:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004118:	4b9e      	ldr	r3, [pc, #632]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e9      	bne.n	80040f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 80a6 	beq.w	800427e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004132:	2300      	movs	r3, #0
 8004134:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004136:	4b97      	ldr	r3, [pc, #604]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10d      	bne.n	800415e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004142:	4b94      	ldr	r3, [pc, #592]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	4a93      	ldr	r2, [pc, #588]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 8004148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800414c:	61d3      	str	r3, [r2, #28]
 800414e:	4b91      	ldr	r3, [pc, #580]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004156:	60bb      	str	r3, [r7, #8]
 8004158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800415a:	2301      	movs	r3, #1
 800415c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415e:	4b8e      	ldr	r3, [pc, #568]	; (8004398 <HAL_RCC_OscConfig+0x4f8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004166:	2b00      	cmp	r3, #0
 8004168:	d118      	bne.n	800419c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800416a:	4b8b      	ldr	r3, [pc, #556]	; (8004398 <HAL_RCC_OscConfig+0x4f8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a8a      	ldr	r2, [pc, #552]	; (8004398 <HAL_RCC_OscConfig+0x4f8>)
 8004170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004176:	f7fe fb11 	bl	800279c <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800417e:	f7fe fb0d 	bl	800279c <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b64      	cmp	r3, #100	; 0x64
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e0fd      	b.n	800438c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004190:	4b81      	ldr	r3, [pc, #516]	; (8004398 <HAL_RCC_OscConfig+0x4f8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f0      	beq.n	800417e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d106      	bne.n	80041b2 <HAL_RCC_OscConfig+0x312>
 80041a4:	4b7b      	ldr	r3, [pc, #492]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	4a7a      	ldr	r2, [pc, #488]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 80041aa:	f043 0301 	orr.w	r3, r3, #1
 80041ae:	6213      	str	r3, [r2, #32]
 80041b0:	e02d      	b.n	800420e <HAL_RCC_OscConfig+0x36e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCC_OscConfig+0x334>
 80041ba:	4b76      	ldr	r3, [pc, #472]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	4a75      	ldr	r2, [pc, #468]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 80041c0:	f023 0301 	bic.w	r3, r3, #1
 80041c4:	6213      	str	r3, [r2, #32]
 80041c6:	4b73      	ldr	r3, [pc, #460]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	4a72      	ldr	r2, [pc, #456]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 80041cc:	f023 0304 	bic.w	r3, r3, #4
 80041d0:	6213      	str	r3, [r2, #32]
 80041d2:	e01c      	b.n	800420e <HAL_RCC_OscConfig+0x36e>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	2b05      	cmp	r3, #5
 80041da:	d10c      	bne.n	80041f6 <HAL_RCC_OscConfig+0x356>
 80041dc:	4b6d      	ldr	r3, [pc, #436]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	4a6c      	ldr	r2, [pc, #432]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 80041e2:	f043 0304 	orr.w	r3, r3, #4
 80041e6:	6213      	str	r3, [r2, #32]
 80041e8:	4b6a      	ldr	r3, [pc, #424]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	4a69      	ldr	r2, [pc, #420]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 80041ee:	f043 0301 	orr.w	r3, r3, #1
 80041f2:	6213      	str	r3, [r2, #32]
 80041f4:	e00b      	b.n	800420e <HAL_RCC_OscConfig+0x36e>
 80041f6:	4b67      	ldr	r3, [pc, #412]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	4a66      	ldr	r2, [pc, #408]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 80041fc:	f023 0301 	bic.w	r3, r3, #1
 8004200:	6213      	str	r3, [r2, #32]
 8004202:	4b64      	ldr	r3, [pc, #400]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	4a63      	ldr	r2, [pc, #396]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 8004208:	f023 0304 	bic.w	r3, r3, #4
 800420c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d015      	beq.n	8004242 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004216:	f7fe fac1 	bl	800279c <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421c:	e00a      	b.n	8004234 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800421e:	f7fe fabd 	bl	800279c <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	f241 3288 	movw	r2, #5000	; 0x1388
 800422c:	4293      	cmp	r3, r2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e0ab      	b.n	800438c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004234:	4b57      	ldr	r3, [pc, #348]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0ee      	beq.n	800421e <HAL_RCC_OscConfig+0x37e>
 8004240:	e014      	b.n	800426c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004242:	f7fe faab 	bl	800279c <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004248:	e00a      	b.n	8004260 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800424a:	f7fe faa7 	bl	800279c <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	f241 3288 	movw	r2, #5000	; 0x1388
 8004258:	4293      	cmp	r3, r2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e095      	b.n	800438c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004260:	4b4c      	ldr	r3, [pc, #304]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1ee      	bne.n	800424a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800426c:	7dfb      	ldrb	r3, [r7, #23]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d105      	bne.n	800427e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004272:	4b48      	ldr	r3, [pc, #288]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	4a47      	ldr	r2, [pc, #284]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 8004278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800427c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 8081 	beq.w	800438a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004288:	4b42      	ldr	r3, [pc, #264]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f003 030c 	and.w	r3, r3, #12
 8004290:	2b08      	cmp	r3, #8
 8004292:	d061      	beq.n	8004358 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	2b02      	cmp	r3, #2
 800429a:	d146      	bne.n	800432a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800429c:	4b3f      	ldr	r3, [pc, #252]	; (800439c <HAL_RCC_OscConfig+0x4fc>)
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a2:	f7fe fa7b 	bl	800279c <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042aa:	f7fe fa77 	bl	800279c <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e067      	b.n	800438c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042bc:	4b35      	ldr	r3, [pc, #212]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1f0      	bne.n	80042aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d0:	d108      	bne.n	80042e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042d2:	4b30      	ldr	r3, [pc, #192]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	492d      	ldr	r1, [pc, #180]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042e4:	4b2b      	ldr	r3, [pc, #172]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a19      	ldr	r1, [r3, #32]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	430b      	orrs	r3, r1
 80042f6:	4927      	ldr	r1, [pc, #156]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042fc:	4b27      	ldr	r3, [pc, #156]	; (800439c <HAL_RCC_OscConfig+0x4fc>)
 80042fe:	2201      	movs	r2, #1
 8004300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004302:	f7fe fa4b 	bl	800279c <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800430a:	f7fe fa47 	bl	800279c <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e037      	b.n	800438c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800431c:	4b1d      	ldr	r3, [pc, #116]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0f0      	beq.n	800430a <HAL_RCC_OscConfig+0x46a>
 8004328:	e02f      	b.n	800438a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432a:	4b1c      	ldr	r3, [pc, #112]	; (800439c <HAL_RCC_OscConfig+0x4fc>)
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004330:	f7fe fa34 	bl	800279c <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004338:	f7fe fa30 	bl	800279c <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e020      	b.n	800438c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800434a:	4b12      	ldr	r3, [pc, #72]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0x498>
 8004356:	e018      	b.n	800438a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e013      	b.n	800438c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004364:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <HAL_RCC_OscConfig+0x4f4>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	429a      	cmp	r2, r3
 8004376:	d106      	bne.n	8004386 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004382:	429a      	cmp	r2, r3
 8004384:	d001      	beq.n	800438a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40021000 	.word	0x40021000
 8004398:	40007000 	.word	0x40007000
 800439c:	42420060 	.word	0x42420060

080043a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0d0      	b.n	8004556 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043b4:	4b6a      	ldr	r3, [pc, #424]	; (8004560 <HAL_RCC_ClockConfig+0x1c0>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d910      	bls.n	80043e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c2:	4b67      	ldr	r3, [pc, #412]	; (8004560 <HAL_RCC_ClockConfig+0x1c0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f023 0207 	bic.w	r2, r3, #7
 80043ca:	4965      	ldr	r1, [pc, #404]	; (8004560 <HAL_RCC_ClockConfig+0x1c0>)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d2:	4b63      	ldr	r3, [pc, #396]	; (8004560 <HAL_RCC_ClockConfig+0x1c0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d001      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e0b8      	b.n	8004556 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d020      	beq.n	8004432 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043fc:	4b59      	ldr	r3, [pc, #356]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	4a58      	ldr	r2, [pc, #352]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 8004402:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004406:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b00      	cmp	r3, #0
 8004412:	d005      	beq.n	8004420 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004414:	4b53      	ldr	r3, [pc, #332]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	4a52      	ldr	r2, [pc, #328]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 800441a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800441e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004420:	4b50      	ldr	r3, [pc, #320]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	494d      	ldr	r1, [pc, #308]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 800442e:	4313      	orrs	r3, r2
 8004430:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d040      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d107      	bne.n	8004456 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004446:	4b47      	ldr	r3, [pc, #284]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d115      	bne.n	800447e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e07f      	b.n	8004556 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d107      	bne.n	800446e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800445e:	4b41      	ldr	r3, [pc, #260]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d109      	bne.n	800447e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e073      	b.n	8004556 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800446e:	4b3d      	ldr	r3, [pc, #244]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e06b      	b.n	8004556 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800447e:	4b39      	ldr	r3, [pc, #228]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f023 0203 	bic.w	r2, r3, #3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	4936      	ldr	r1, [pc, #216]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 800448c:	4313      	orrs	r3, r2
 800448e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004490:	f7fe f984 	bl	800279c <HAL_GetTick>
 8004494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004496:	e00a      	b.n	80044ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004498:	f7fe f980 	bl	800279c <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e053      	b.n	8004556 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ae:	4b2d      	ldr	r3, [pc, #180]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f003 020c 	and.w	r2, r3, #12
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	429a      	cmp	r2, r3
 80044be:	d1eb      	bne.n	8004498 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044c0:	4b27      	ldr	r3, [pc, #156]	; (8004560 <HAL_RCC_ClockConfig+0x1c0>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d210      	bcs.n	80044f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ce:	4b24      	ldr	r3, [pc, #144]	; (8004560 <HAL_RCC_ClockConfig+0x1c0>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f023 0207 	bic.w	r2, r3, #7
 80044d6:	4922      	ldr	r1, [pc, #136]	; (8004560 <HAL_RCC_ClockConfig+0x1c0>)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	4313      	orrs	r3, r2
 80044dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044de:	4b20      	ldr	r3, [pc, #128]	; (8004560 <HAL_RCC_ClockConfig+0x1c0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d001      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e032      	b.n	8004556 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d008      	beq.n	800450e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044fc:	4b19      	ldr	r3, [pc, #100]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	4916      	ldr	r1, [pc, #88]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 800450a:	4313      	orrs	r3, r2
 800450c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800451a:	4b12      	ldr	r3, [pc, #72]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	490e      	ldr	r1, [pc, #56]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 800452a:	4313      	orrs	r3, r2
 800452c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800452e:	f000 f821 	bl	8004574 <HAL_RCC_GetSysClockFreq>
 8004532:	4601      	mov	r1, r0
 8004534:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	091b      	lsrs	r3, r3, #4
 800453a:	f003 030f 	and.w	r3, r3, #15
 800453e:	4a0a      	ldr	r2, [pc, #40]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004540:	5cd3      	ldrb	r3, [r2, r3]
 8004542:	fa21 f303 	lsr.w	r3, r1, r3
 8004546:	4a09      	ldr	r2, [pc, #36]	; (800456c <HAL_RCC_ClockConfig+0x1cc>)
 8004548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800454a:	4b09      	ldr	r3, [pc, #36]	; (8004570 <HAL_RCC_ClockConfig+0x1d0>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f7fd f8a0 	bl	8001694 <HAL_InitTick>

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40022000 	.word	0x40022000
 8004564:	40021000 	.word	0x40021000
 8004568:	080069b4 	.word	0x080069b4
 800456c:	20000000 	.word	0x20000000
 8004570:	20000008 	.word	0x20000008

08004574 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004574:	b490      	push	{r4, r7}
 8004576:	b08a      	sub	sp, #40	; 0x28
 8004578:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800457a:	4b2a      	ldr	r3, [pc, #168]	; (8004624 <HAL_RCC_GetSysClockFreq+0xb0>)
 800457c:	1d3c      	adds	r4, r7, #4
 800457e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004580:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004584:	4b28      	ldr	r3, [pc, #160]	; (8004628 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	61fb      	str	r3, [r7, #28]
 800458e:	2300      	movs	r3, #0
 8004590:	61bb      	str	r3, [r7, #24]
 8004592:	2300      	movs	r3, #0
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800459e:	4b23      	ldr	r3, [pc, #140]	; (800462c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	f003 030c 	and.w	r3, r3, #12
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d002      	beq.n	80045b4 <HAL_RCC_GetSysClockFreq+0x40>
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d003      	beq.n	80045ba <HAL_RCC_GetSysClockFreq+0x46>
 80045b2:	e02d      	b.n	8004610 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045b4:	4b1e      	ldr	r3, [pc, #120]	; (8004630 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045b6:	623b      	str	r3, [r7, #32]
      break;
 80045b8:	e02d      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	0c9b      	lsrs	r3, r3, #18
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80045c6:	4413      	add	r3, r2
 80045c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80045cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d013      	beq.n	8004600 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045d8:	4b14      	ldr	r3, [pc, #80]	; (800462c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	0c5b      	lsrs	r3, r3, #17
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80045e6:	4413      	add	r3, r2
 80045e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80045ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	4a0f      	ldr	r2, [pc, #60]	; (8004630 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045f2:	fb02 f203 	mul.w	r2, r2, r3
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
 80045fe:	e004      	b.n	800460a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	4a0c      	ldr	r2, [pc, #48]	; (8004634 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004604:	fb02 f303 	mul.w	r3, r2, r3
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	623b      	str	r3, [r7, #32]
      break;
 800460e:	e002      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004610:	4b07      	ldr	r3, [pc, #28]	; (8004630 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004612:	623b      	str	r3, [r7, #32]
      break;
 8004614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004616:	6a3b      	ldr	r3, [r7, #32]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3728      	adds	r7, #40	; 0x28
 800461c:	46bd      	mov	sp, r7
 800461e:	bc90      	pop	{r4, r7}
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	0800698c 	.word	0x0800698c
 8004628:	0800699c 	.word	0x0800699c
 800462c:	40021000 	.word	0x40021000
 8004630:	007a1200 	.word	0x007a1200
 8004634:	003d0900 	.word	0x003d0900

08004638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800463c:	4b02      	ldr	r3, [pc, #8]	; (8004648 <HAL_RCC_GetHCLKFreq+0x10>)
 800463e:	681b      	ldr	r3, [r3, #0]
}
 8004640:	4618      	mov	r0, r3
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr
 8004648:	20000000 	.word	0x20000000

0800464c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004650:	f7ff fff2 	bl	8004638 <HAL_RCC_GetHCLKFreq>
 8004654:	4601      	mov	r1, r0
 8004656:	4b05      	ldr	r3, [pc, #20]	; (800466c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	0a1b      	lsrs	r3, r3, #8
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	4a03      	ldr	r2, [pc, #12]	; (8004670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004662:	5cd3      	ldrb	r3, [r2, r3]
 8004664:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004668:	4618      	mov	r0, r3
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40021000 	.word	0x40021000
 8004670:	080069c4 	.word	0x080069c4

08004674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004678:	f7ff ffde 	bl	8004638 <HAL_RCC_GetHCLKFreq>
 800467c:	4601      	mov	r1, r0
 800467e:	4b05      	ldr	r3, [pc, #20]	; (8004694 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	0adb      	lsrs	r3, r3, #11
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	4a03      	ldr	r2, [pc, #12]	; (8004698 <HAL_RCC_GetPCLK2Freq+0x24>)
 800468a:	5cd3      	ldrb	r3, [r2, r3]
 800468c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004690:	4618      	mov	r0, r3
 8004692:	bd80      	pop	{r7, pc}
 8004694:	40021000 	.word	0x40021000
 8004698:	080069c4 	.word	0x080069c4

0800469c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	220f      	movs	r2, #15
 80046aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80046ac:	4b11      	ldr	r3, [pc, #68]	; (80046f4 <HAL_RCC_GetClockConfig+0x58>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f003 0203 	and.w	r2, r3, #3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80046b8:	4b0e      	ldr	r3, [pc, #56]	; (80046f4 <HAL_RCC_GetClockConfig+0x58>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80046c4:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <HAL_RCC_GetClockConfig+0x58>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80046d0:	4b08      	ldr	r3, [pc, #32]	; (80046f4 <HAL_RCC_GetClockConfig+0x58>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	08db      	lsrs	r3, r3, #3
 80046d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046de:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <HAL_RCC_GetClockConfig+0x5c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0207 	and.w	r2, r3, #7
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bc80      	pop	{r7}
 80046f2:	4770      	bx	lr
 80046f4:	40021000 	.word	0x40021000
 80046f8:	40022000 	.word	0x40022000

080046fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004704:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <RCC_Delay+0x34>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a0a      	ldr	r2, [pc, #40]	; (8004734 <RCC_Delay+0x38>)
 800470a:	fba2 2303 	umull	r2, r3, r2, r3
 800470e:	0a5b      	lsrs	r3, r3, #9
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	fb02 f303 	mul.w	r3, r2, r3
 8004716:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004718:	bf00      	nop
  }
  while (Delay --);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1e5a      	subs	r2, r3, #1
 800471e:	60fa      	str	r2, [r7, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1f9      	bne.n	8004718 <RCC_Delay+0x1c>
}
 8004724:	bf00      	nop
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	bc80      	pop	{r7}
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	20000000 	.word	0x20000000
 8004734:	10624dd3 	.word	0x10624dd3

08004738 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	613b      	str	r3, [r7, #16]
 8004744:	2300      	movs	r3, #0
 8004746:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d07d      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004754:	2300      	movs	r3, #0
 8004756:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004758:	4b4f      	ldr	r3, [pc, #316]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10d      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004764:	4b4c      	ldr	r3, [pc, #304]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004766:	69db      	ldr	r3, [r3, #28]
 8004768:	4a4b      	ldr	r2, [pc, #300]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800476e:	61d3      	str	r3, [r2, #28]
 8004770:	4b49      	ldr	r3, [pc, #292]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004778:	60bb      	str	r3, [r7, #8]
 800477a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800477c:	2301      	movs	r3, #1
 800477e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004780:	4b46      	ldr	r3, [pc, #280]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004788:	2b00      	cmp	r3, #0
 800478a:	d118      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800478c:	4b43      	ldr	r3, [pc, #268]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a42      	ldr	r2, [pc, #264]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004796:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004798:	f7fe f800 	bl	800279c <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479e:	e008      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a0:	f7fd fffc 	bl	800279c <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b64      	cmp	r3, #100	; 0x64
 80047ac:	d901      	bls.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e06d      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b2:	4b3a      	ldr	r3, [pc, #232]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0f0      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047be:	4b36      	ldr	r3, [pc, #216]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d02e      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d027      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047dc:	4b2e      	ldr	r3, [pc, #184]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047e6:	4b2e      	ldr	r3, [pc, #184]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047e8:	2201      	movs	r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047ec:	4b2c      	ldr	r3, [pc, #176]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047f2:	4a29      	ldr	r2, [pc, #164]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d014      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004802:	f7fd ffcb 	bl	800279c <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004808:	e00a      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480a:	f7fd ffc7 	bl	800279c <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	f241 3288 	movw	r2, #5000	; 0x1388
 8004818:	4293      	cmp	r3, r2
 800481a:	d901      	bls.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e036      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004820:	4b1d      	ldr	r3, [pc, #116]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0ee      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800482c:	4b1a      	ldr	r3, [pc, #104]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	4917      	ldr	r1, [pc, #92]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800483a:	4313      	orrs	r3, r2
 800483c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800483e:	7dfb      	ldrb	r3, [r7, #23]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d105      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004844:	4b14      	ldr	r3, [pc, #80]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	4a13      	ldr	r2, [pc, #76]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800484a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800484e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d008      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800485c:	4b0e      	ldr	r3, [pc, #56]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	490b      	ldr	r1, [pc, #44]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800486a:	4313      	orrs	r3, r2
 800486c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	2b00      	cmp	r3, #0
 8004878:	d008      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800487a:	4b07      	ldr	r3, [pc, #28]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	4904      	ldr	r1, [pc, #16]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004888:	4313      	orrs	r3, r2
 800488a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	40021000 	.word	0x40021000
 800489c:	40007000 	.word	0x40007000
 80048a0:	42420440 	.word	0x42420440

080048a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80048a4:	b590      	push	{r4, r7, lr}
 80048a6:	b08d      	sub	sp, #52	; 0x34
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80048ac:	4b55      	ldr	r3, [pc, #340]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80048ae:	f107 040c 	add.w	r4, r7, #12
 80048b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80048b8:	4b53      	ldr	r3, [pc, #332]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	627b      	str	r3, [r7, #36]	; 0x24
 80048c2:	2300      	movs	r3, #0
 80048c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048c6:	2300      	movs	r3, #0
 80048c8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	61fb      	str	r3, [r7, #28]
 80048ce:	2300      	movs	r3, #0
 80048d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d07f      	beq.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80048d8:	2b10      	cmp	r3, #16
 80048da:	d002      	beq.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d048      	beq.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80048e0:	e08b      	b.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80048e2:	4b4a      	ldr	r3, [pc, #296]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80048e8:	4b48      	ldr	r3, [pc, #288]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d07f      	beq.n	80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	0c9b      	lsrs	r3, r3, #18
 80048f8:	f003 030f 	and.w	r3, r3, #15
 80048fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004900:	4413      	add	r3, r2
 8004902:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004906:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d018      	beq.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004912:	4b3e      	ldr	r3, [pc, #248]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	0c5b      	lsrs	r3, r3, #17
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004920:	4413      	add	r3, r2
 8004922:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00d      	beq.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004932:	4a37      	ldr	r2, [pc, #220]	; (8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	fbb2 f2f3 	udiv	r2, r2, r3
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	fb02 f303 	mul.w	r3, r2, r3
 8004940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004942:	e004      	b.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	4a33      	ldr	r2, [pc, #204]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004948:	fb02 f303 	mul.w	r3, r2, r3
 800494c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800494e:	4b2f      	ldr	r3, [pc, #188]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800495a:	d102      	bne.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 800495c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004960:	e048      	b.n	80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8004962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	4a2c      	ldr	r2, [pc, #176]	; (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	085b      	lsrs	r3, r3, #1
 800496e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004970:	e040      	b.n	80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8004972:	4b26      	ldr	r3, [pc, #152]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800497e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004982:	d108      	bne.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800498e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004992:	62bb      	str	r3, [r7, #40]	; 0x28
 8004994:	e01f      	b.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800499c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049a0:	d109      	bne.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80049a2:	4b1a      	ldr	r3, [pc, #104]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80049ae:	f649 4340 	movw	r3, #40000	; 0x9c40
 80049b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80049b4:	e00f      	b.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049c0:	d11a      	bne.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80049c2:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d014      	beq.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80049ce:	f24f 4324 	movw	r3, #62500	; 0xf424
 80049d2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80049d4:	e010      	b.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80049d6:	e00f      	b.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80049d8:	f7ff fe4c 	bl	8004674 <HAL_RCC_GetPCLK2Freq>
 80049dc:	4602      	mov	r2, r0
 80049de:	4b0b      	ldr	r3, [pc, #44]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	0b9b      	lsrs	r3, r3, #14
 80049e4:	f003 0303 	and.w	r3, r3, #3
 80049e8:	3301      	adds	r3, #1
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80049f2:	e002      	b.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80049f4:	bf00      	nop
 80049f6:	e000      	b.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80049f8:	bf00      	nop
    }
  }
  return (frequency);
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3734      	adds	r7, #52	; 0x34
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd90      	pop	{r4, r7, pc}
 8004a04:	080069a0 	.word	0x080069a0
 8004a08:	080069b0 	.word	0x080069b0
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	007a1200 	.word	0x007a1200
 8004a14:	003d0900 	.word	0x003d0900
 8004a18:	aaaaaaab 	.word	0xaaaaaaab

08004a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e01d      	b.n	8004a6a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d106      	bne.n	8004a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7fc fd52 	bl	80014ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3304      	adds	r3, #4
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4610      	mov	r0, r2
 8004a5c:	f000 fb34 	bl	80050c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b085      	sub	sp, #20
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68da      	ldr	r2, [r3, #12]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f042 0201 	orr.w	r2, r2, #1
 8004a88:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b06      	cmp	r3, #6
 8004a9a:	d007      	beq.n	8004aac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0201 	orr.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e01d      	b.n	8004b06 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7fc fcca 	bl	8001478 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3304      	adds	r3, #4
 8004af4:	4619      	mov	r1, r3
 8004af6:	4610      	mov	r0, r2
 8004af8:	f000 fae6 	bl	80050c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	6839      	ldr	r1, [r7, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fd50 	bl	80055c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a10      	ldr	r2, [pc, #64]	; (8004b70 <HAL_TIM_PWM_Start+0x60>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d107      	bne.n	8004b42 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2b06      	cmp	r3, #6
 8004b52:	d007      	beq.n	8004b64 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0201 	orr.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	40012c00 	.word	0x40012c00

08004b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d122      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d11b      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0202 	mvn.w	r2, #2
 8004ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fa6a 	bl	8005090 <HAL_TIM_IC_CaptureCallback>
 8004bbc:	e005      	b.n	8004bca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fa5d 	bl	800507e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fa6c 	bl	80050a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d122      	bne.n	8004c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d11b      	bne.n	8004c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0204 	mvn.w	r2, #4
 8004bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fa40 	bl	8005090 <HAL_TIM_IC_CaptureCallback>
 8004c10:	e005      	b.n	8004c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fa33 	bl	800507e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 fa42 	bl	80050a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	d122      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d11b      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0208 	mvn.w	r2, #8
 8004c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fa16 	bl	8005090 <HAL_TIM_IC_CaptureCallback>
 8004c64:	e005      	b.n	8004c72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fa09 	bl	800507e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fa18 	bl	80050a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	2b10      	cmp	r3, #16
 8004c84:	d122      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	2b10      	cmp	r3, #16
 8004c92:	d11b      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0210 	mvn.w	r2, #16
 8004c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f9ec 	bl	8005090 <HAL_TIM_IC_CaptureCallback>
 8004cb8:	e005      	b.n	8004cc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f9df 	bl	800507e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f9ee 	bl	80050a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d10e      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d107      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0201 	mvn.w	r2, #1
 8004cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fc faa2 	bl	800123c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d02:	2b80      	cmp	r3, #128	; 0x80
 8004d04:	d10e      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d10:	2b80      	cmp	r3, #128	; 0x80
 8004d12:	d107      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fd14 	bl	800574c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2e:	2b40      	cmp	r3, #64	; 0x40
 8004d30:	d10e      	bne.n	8004d50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3c:	2b40      	cmp	r3, #64	; 0x40
 8004d3e:	d107      	bne.n	8004d50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f9b2 	bl	80050b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	d10e      	bne.n	8004d7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b20      	cmp	r3, #32
 8004d6a:	d107      	bne.n	8004d7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0220 	mvn.w	r2, #32
 8004d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fcdf 	bl	800573a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d7c:	bf00      	nop
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d101      	bne.n	8004d9e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	e0b4      	b.n	8004f08 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2202      	movs	r2, #2
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b0c      	cmp	r3, #12
 8004db2:	f200 809f 	bhi.w	8004ef4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004db6:	a201      	add	r2, pc, #4	; (adr r2, 8004dbc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbc:	08004df1 	.word	0x08004df1
 8004dc0:	08004ef5 	.word	0x08004ef5
 8004dc4:	08004ef5 	.word	0x08004ef5
 8004dc8:	08004ef5 	.word	0x08004ef5
 8004dcc:	08004e31 	.word	0x08004e31
 8004dd0:	08004ef5 	.word	0x08004ef5
 8004dd4:	08004ef5 	.word	0x08004ef5
 8004dd8:	08004ef5 	.word	0x08004ef5
 8004ddc:	08004e73 	.word	0x08004e73
 8004de0:	08004ef5 	.word	0x08004ef5
 8004de4:	08004ef5 	.word	0x08004ef5
 8004de8:	08004ef5 	.word	0x08004ef5
 8004dec:	08004eb3 	.word	0x08004eb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 f9c8 	bl	800518c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0208 	orr.w	r2, r2, #8
 8004e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0204 	bic.w	r2, r2, #4
 8004e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6999      	ldr	r1, [r3, #24]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	619a      	str	r2, [r3, #24]
      break;
 8004e2e:	e062      	b.n	8004ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fa0e 	bl	8005258 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6999      	ldr	r1, [r3, #24]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	021a      	lsls	r2, r3, #8
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	619a      	str	r2, [r3, #24]
      break;
 8004e70:	e041      	b.n	8004ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fa57 	bl	800532c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f042 0208 	orr.w	r2, r2, #8
 8004e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69da      	ldr	r2, [r3, #28]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0204 	bic.w	r2, r2, #4
 8004e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69d9      	ldr	r1, [r3, #28]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	61da      	str	r2, [r3, #28]
      break;
 8004eb0:	e021      	b.n	8004ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 faa1 	bl	8005400 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69da      	ldr	r2, [r3, #28]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69da      	ldr	r2, [r3, #28]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69d9      	ldr	r1, [r3, #28]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	021a      	lsls	r2, r3, #8
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	61da      	str	r2, [r3, #28]
      break;
 8004ef2:	e000      	b.n	8004ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004ef4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_TIM_ConfigClockSource+0x18>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e0a6      	b.n	8005076 <HAL_TIM_ConfigClockSource+0x166>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b40      	cmp	r3, #64	; 0x40
 8004f5e:	d067      	beq.n	8005030 <HAL_TIM_ConfigClockSource+0x120>
 8004f60:	2b40      	cmp	r3, #64	; 0x40
 8004f62:	d80b      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x6c>
 8004f64:	2b10      	cmp	r3, #16
 8004f66:	d073      	beq.n	8005050 <HAL_TIM_ConfigClockSource+0x140>
 8004f68:	2b10      	cmp	r3, #16
 8004f6a:	d802      	bhi.n	8004f72 <HAL_TIM_ConfigClockSource+0x62>
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d06f      	beq.n	8005050 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004f70:	e078      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f72:	2b20      	cmp	r3, #32
 8004f74:	d06c      	beq.n	8005050 <HAL_TIM_ConfigClockSource+0x140>
 8004f76:	2b30      	cmp	r3, #48	; 0x30
 8004f78:	d06a      	beq.n	8005050 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004f7a:	e073      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f7c:	2b70      	cmp	r3, #112	; 0x70
 8004f7e:	d00d      	beq.n	8004f9c <HAL_TIM_ConfigClockSource+0x8c>
 8004f80:	2b70      	cmp	r3, #112	; 0x70
 8004f82:	d804      	bhi.n	8004f8e <HAL_TIM_ConfigClockSource+0x7e>
 8004f84:	2b50      	cmp	r3, #80	; 0x50
 8004f86:	d033      	beq.n	8004ff0 <HAL_TIM_ConfigClockSource+0xe0>
 8004f88:	2b60      	cmp	r3, #96	; 0x60
 8004f8a:	d041      	beq.n	8005010 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004f8c:	e06a      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f92:	d066      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x152>
 8004f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f98:	d017      	beq.n	8004fca <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004f9a:	e063      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6818      	ldr	r0, [r3, #0]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	6899      	ldr	r1, [r3, #8]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f000 faed 	bl	800558a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fbe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	609a      	str	r2, [r3, #8]
      break;
 8004fc8:	e04c      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6818      	ldr	r0, [r3, #0]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	6899      	ldr	r1, [r3, #8]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f000 fad6 	bl	800558a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fec:	609a      	str	r2, [r3, #8]
      break;
 8004fee:	e039      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6818      	ldr	r0, [r3, #0]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	6859      	ldr	r1, [r3, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	f000 fa4d 	bl	800549c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2150      	movs	r1, #80	; 0x50
 8005008:	4618      	mov	r0, r3
 800500a:	f000 faa4 	bl	8005556 <TIM_ITRx_SetConfig>
      break;
 800500e:	e029      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6818      	ldr	r0, [r3, #0]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	6859      	ldr	r1, [r3, #4]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	461a      	mov	r2, r3
 800501e:	f000 fa6b 	bl	80054f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2160      	movs	r1, #96	; 0x60
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fa94 	bl	8005556 <TIM_ITRx_SetConfig>
      break;
 800502e:	e019      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6818      	ldr	r0, [r3, #0]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	6859      	ldr	r1, [r3, #4]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	461a      	mov	r2, r3
 800503e:	f000 fa2d 	bl	800549c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2140      	movs	r1, #64	; 0x40
 8005048:	4618      	mov	r0, r3
 800504a:	f000 fa84 	bl	8005556 <TIM_ITRx_SetConfig>
      break;
 800504e:	e009      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4619      	mov	r1, r3
 800505a:	4610      	mov	r0, r2
 800505c:	f000 fa7b 	bl	8005556 <TIM_ITRx_SetConfig>
      break;
 8005060:	e000      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005062:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr

08005090 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr

080050a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050aa:	bf00      	nop
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bc80      	pop	{r7}
 80050b2:	4770      	bx	lr

080050b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bc80      	pop	{r7}
 80050c4:	4770      	bx	lr
	...

080050c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a29      	ldr	r2, [pc, #164]	; (8005180 <TIM_Base_SetConfig+0xb8>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00b      	beq.n	80050f8 <TIM_Base_SetConfig+0x30>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e6:	d007      	beq.n	80050f8 <TIM_Base_SetConfig+0x30>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a26      	ldr	r2, [pc, #152]	; (8005184 <TIM_Base_SetConfig+0xbc>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d003      	beq.n	80050f8 <TIM_Base_SetConfig+0x30>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a25      	ldr	r2, [pc, #148]	; (8005188 <TIM_Base_SetConfig+0xc0>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d108      	bne.n	800510a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a1c      	ldr	r2, [pc, #112]	; (8005180 <TIM_Base_SetConfig+0xb8>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00b      	beq.n	800512a <TIM_Base_SetConfig+0x62>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005118:	d007      	beq.n	800512a <TIM_Base_SetConfig+0x62>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a19      	ldr	r2, [pc, #100]	; (8005184 <TIM_Base_SetConfig+0xbc>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d003      	beq.n	800512a <TIM_Base_SetConfig+0x62>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a18      	ldr	r2, [pc, #96]	; (8005188 <TIM_Base_SetConfig+0xc0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d108      	bne.n	800513c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a07      	ldr	r2, [pc, #28]	; (8005180 <TIM_Base_SetConfig+0xb8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d103      	bne.n	8005170 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	615a      	str	r2, [r3, #20]
}
 8005176:	bf00      	nop
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr
 8005180:	40012c00 	.word	0x40012c00
 8005184:	40000400 	.word	0x40000400
 8005188:	40000800 	.word	0x40000800

0800518c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	f023 0201 	bic.w	r2, r3, #1
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f023 0303 	bic.w	r3, r3, #3
 80051c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f023 0302 	bic.w	r3, r3, #2
 80051d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	4313      	orrs	r3, r2
 80051de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a1c      	ldr	r2, [pc, #112]	; (8005254 <TIM_OC1_SetConfig+0xc8>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d10c      	bne.n	8005202 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f023 0308 	bic.w	r3, r3, #8
 80051ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f023 0304 	bic.w	r3, r3, #4
 8005200:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a13      	ldr	r2, [pc, #76]	; (8005254 <TIM_OC1_SetConfig+0xc8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d111      	bne.n	800522e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	4313      	orrs	r3, r2
 800522c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	621a      	str	r2, [r3, #32]
}
 8005248:	bf00      	nop
 800524a:	371c      	adds	r7, #28
 800524c:	46bd      	mov	sp, r7
 800524e:	bc80      	pop	{r7}
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	40012c00 	.word	0x40012c00

08005258 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	f023 0210 	bic.w	r2, r3, #16
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	021b      	lsls	r3, r3, #8
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f023 0320 	bic.w	r3, r3, #32
 80052a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a1d      	ldr	r2, [pc, #116]	; (8005328 <TIM_OC2_SetConfig+0xd0>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d10d      	bne.n	80052d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a14      	ldr	r2, [pc, #80]	; (8005328 <TIM_OC2_SetConfig+0xd0>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d113      	bne.n	8005304 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	4313      	orrs	r3, r2
 8005302:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	621a      	str	r2, [r3, #32]
}
 800531e:	bf00      	nop
 8005320:	371c      	adds	r7, #28
 8005322:	46bd      	mov	sp, r7
 8005324:	bc80      	pop	{r7}
 8005326:	4770      	bx	lr
 8005328:	40012c00 	.word	0x40012c00

0800532c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 0303 	bic.w	r3, r3, #3
 8005362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	021b      	lsls	r3, r3, #8
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	4313      	orrs	r3, r2
 8005380:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a1d      	ldr	r2, [pc, #116]	; (80053fc <TIM_OC3_SetConfig+0xd0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d10d      	bne.n	80053a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005390:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	021b      	lsls	r3, r3, #8
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	4313      	orrs	r3, r2
 800539c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a14      	ldr	r2, [pc, #80]	; (80053fc <TIM_OC3_SetConfig+0xd0>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d113      	bne.n	80053d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	011b      	lsls	r3, r3, #4
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	621a      	str	r2, [r3, #32]
}
 80053f0:	bf00      	nop
 80053f2:	371c      	adds	r7, #28
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bc80      	pop	{r7}
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	40012c00 	.word	0x40012c00

08005400 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800544a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	031b      	lsls	r3, r3, #12
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a0f      	ldr	r2, [pc, #60]	; (8005498 <TIM_OC4_SetConfig+0x98>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d109      	bne.n	8005474 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005466:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	019b      	lsls	r3, r3, #6
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	4313      	orrs	r3, r2
 8005472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	621a      	str	r2, [r3, #32]
}
 800548e:	bf00      	nop
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	bc80      	pop	{r7}
 8005496:	4770      	bx	lr
 8005498:	40012c00 	.word	0x40012c00

0800549c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	f023 0201 	bic.w	r2, r3, #1
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	011b      	lsls	r3, r3, #4
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f023 030a 	bic.w	r3, r3, #10
 80054d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4313      	orrs	r3, r2
 80054e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	621a      	str	r2, [r3, #32]
}
 80054ee:	bf00      	nop
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr

080054f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	f023 0210 	bic.w	r2, r3, #16
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005522:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	031b      	lsls	r3, r3, #12
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	4313      	orrs	r3, r2
 800552c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005534:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	621a      	str	r2, [r3, #32]
}
 800554c:	bf00      	nop
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	bc80      	pop	{r7}
 8005554:	4770      	bx	lr

08005556 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005556:	b480      	push	{r7}
 8005558:	b085      	sub	sp, #20
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	f043 0307 	orr.w	r3, r3, #7
 8005578:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	609a      	str	r2, [r3, #8]
}
 8005580:	bf00      	nop
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	bc80      	pop	{r7}
 8005588:	4770      	bx	lr

0800558a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800558a:	b480      	push	{r7}
 800558c:	b087      	sub	sp, #28
 800558e:	af00      	add	r7, sp, #0
 8005590:	60f8      	str	r0, [r7, #12]
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	607a      	str	r2, [r7, #4]
 8005596:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	021a      	lsls	r2, r3, #8
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	431a      	orrs	r2, r3
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	609a      	str	r2, [r3, #8]
}
 80055be:	bf00      	nop
 80055c0:	371c      	adds	r7, #28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bc80      	pop	{r7}
 80055c6:	4770      	bx	lr

080055c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f003 031f 	and.w	r3, r3, #31
 80055da:	2201      	movs	r2, #1
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6a1a      	ldr	r2, [r3, #32]
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	43db      	mvns	r3, r3
 80055ea:	401a      	ands	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a1a      	ldr	r2, [r3, #32]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f003 031f 	and.w	r3, r3, #31
 80055fa:	6879      	ldr	r1, [r7, #4]
 80055fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005600:	431a      	orrs	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	621a      	str	r2, [r3, #32]
}
 8005606:	bf00      	nop
 8005608:	371c      	adds	r7, #28
 800560a:	46bd      	mov	sp, r7
 800560c:	bc80      	pop	{r7}
 800560e:	4770      	bx	lr

08005610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005620:	2b01      	cmp	r3, #1
 8005622:	d101      	bne.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005624:	2302      	movs	r3, #2
 8005626:	e032      	b.n	800568e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005660:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	4313      	orrs	r3, r2
 800566a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	bc80      	pop	{r7}
 8005696:	4770      	bx	lr

08005698 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e03d      	b.n	8005730 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	bc80      	pop	{r7}
 8005738:	4770      	bx	lr

0800573a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005742:	bf00      	nop
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	bc80      	pop	{r7}
 800574a:	4770      	bx	lr

0800574c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	bc80      	pop	{r7}
 800575c:	4770      	bx	lr

0800575e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e03f      	b.n	80057f0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d106      	bne.n	800578a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7fb ff23 	bl	80015d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2224      	movs	r2, #36	; 0x24
 800578e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68da      	ldr	r2, [r3, #12]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057a0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fb8e 	bl	8005ec4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691a      	ldr	r2, [r3, #16]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057b6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	695a      	ldr	r2, [r3, #20]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057c6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057d6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2220      	movs	r2, #32
 80057e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b088      	sub	sp, #32
 80057fc:	af02      	add	r7, sp, #8
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	603b      	str	r3, [r7, #0]
 8005804:	4613      	mov	r3, r2
 8005806:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005808:	2300      	movs	r3, #0
 800580a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b20      	cmp	r3, #32
 8005816:	f040 8083 	bne.w	8005920 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <HAL_UART_Transmit+0x2e>
 8005820:	88fb      	ldrh	r3, [r7, #6]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e07b      	b.n	8005922 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005830:	2b01      	cmp	r3, #1
 8005832:	d101      	bne.n	8005838 <HAL_UART_Transmit+0x40>
 8005834:	2302      	movs	r3, #2
 8005836:	e074      	b.n	8005922 <HAL_UART_Transmit+0x12a>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2221      	movs	r2, #33	; 0x21
 800584a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800584e:	f7fc ffa5 	bl	800279c <HAL_GetTick>
 8005852:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	88fa      	ldrh	r2, [r7, #6]
 8005858:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	88fa      	ldrh	r2, [r7, #6]
 800585e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005860:	e042      	b.n	80058e8 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005866:	b29b      	uxth	r3, r3
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005878:	d122      	bne.n	80058c0 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2200      	movs	r2, #0
 8005882:	2180      	movs	r1, #128	; 0x80
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 f9b3 	bl	8005bf0 <UART_WaitOnFlagUntilTimeout>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e046      	b.n	8005922 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	461a      	mov	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058a6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d103      	bne.n	80058b8 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	3302      	adds	r3, #2
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	e017      	b.n	80058e8 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	3301      	adds	r3, #1
 80058bc:	60bb      	str	r3, [r7, #8]
 80058be:	e013      	b.n	80058e8 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	2200      	movs	r2, #0
 80058c8:	2180      	movs	r1, #128	; 0x80
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 f990 	bl	8005bf0 <UART_WaitOnFlagUntilTimeout>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e023      	b.n	8005922 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	60ba      	str	r2, [r7, #8]
 80058e0:	781a      	ldrb	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1b7      	bne.n	8005862 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2200      	movs	r2, #0
 80058fa:	2140      	movs	r1, #64	; 0x40
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f977 	bl	8005bf0 <UART_WaitOnFlagUntilTimeout>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e00a      	b.n	8005922 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	e000      	b.n	8005922 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005920:	2302      	movs	r3, #2
  }
}
 8005922:	4618      	mov	r0, r3
 8005924:	3718      	adds	r7, #24
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800592a:	b480      	push	{r7}
 800592c:	b085      	sub	sp, #20
 800592e:	af00      	add	r7, sp, #0
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	4613      	mov	r3, r2
 8005936:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b20      	cmp	r3, #32
 8005942:	d140      	bne.n	80059c6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d002      	beq.n	8005950 <HAL_UART_Receive_IT+0x26>
 800594a:	88fb      	ldrh	r3, [r7, #6]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e039      	b.n	80059c8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800595a:	2b01      	cmp	r3, #1
 800595c:	d101      	bne.n	8005962 <HAL_UART_Receive_IT+0x38>
 800595e:	2302      	movs	r3, #2
 8005960:	e032      	b.n	80059c8 <HAL_UART_Receive_IT+0x9e>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	88fa      	ldrh	r2, [r7, #6]
 8005974:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	88fa      	ldrh	r2, [r7, #6]
 800597a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2222      	movs	r2, #34	; 0x22
 8005986:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059a0:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695a      	ldr	r2, [r3, #20]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f042 0201 	orr.w	r2, r2, #1
 80059b0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68da      	ldr	r2, [r3, #12]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f042 0220 	orr.w	r2, r2, #32
 80059c0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	e000      	b.n	80059c8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80059c6:	2302      	movs	r3, #2
  }
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bc80      	pop	{r7}
 80059d0:	4770      	bx	lr
	...

080059d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80059f8:	2300      	movs	r3, #0
 80059fa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	f003 030f 	and.w	r3, r3, #15
 8005a02:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10d      	bne.n	8005a26 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	f003 0320 	and.w	r3, r3, #32
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d008      	beq.n	8005a26 <HAL_UART_IRQHandler+0x52>
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f9ce 	bl	8005dc0 <UART_Receive_IT>
      return;
 8005a24:	e0cc      	b.n	8005bc0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 80ab 	beq.w	8005b84 <HAL_UART_IRQHandler+0x1b0>
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d105      	bne.n	8005a44 <HAL_UART_IRQHandler+0x70>
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 80a0 	beq.w	8005b84 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <HAL_UART_IRQHandler+0x90>
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5c:	f043 0201 	orr.w	r2, r3, #1
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	f003 0304 	and.w	r3, r3, #4
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <HAL_UART_IRQHandler+0xb0>
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d005      	beq.n	8005a84 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7c:	f043 0202 	orr.w	r2, r3, #2
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00a      	beq.n	8005aa4 <HAL_UART_IRQHandler+0xd0>
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d005      	beq.n	8005aa4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9c:	f043 0204 	orr.w	r2, r3, #4
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	f003 0308 	and.w	r3, r3, #8
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <HAL_UART_IRQHandler+0xf0>
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d005      	beq.n	8005ac4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005abc:	f043 0208 	orr.w	r2, r3, #8
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d078      	beq.n	8005bbe <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	f003 0320 	and.w	r3, r3, #32
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d007      	beq.n	8005ae6 <HAL_UART_IRQHandler+0x112>
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	f003 0320 	and.w	r3, r3, #32
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f96d 	bl	8005dc0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	bf14      	ite	ne
 8005af4:	2301      	movne	r3, #1
 8005af6:	2300      	moveq	r3, #0
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b00:	f003 0308 	and.w	r3, r3, #8
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d102      	bne.n	8005b0e <HAL_UART_IRQHandler+0x13a>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d031      	beq.n	8005b72 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f8b8 	bl	8005c84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d023      	beq.n	8005b6a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	695a      	ldr	r2, [r3, #20]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b30:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d013      	beq.n	8005b62 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b3e:	4a22      	ldr	r2, [pc, #136]	; (8005bc8 <HAL_UART_IRQHandler+0x1f4>)
 8005b40:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fd fb70 	bl	800322c <HAL_DMA_Abort_IT>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d016      	beq.n	8005b80 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b60:	e00e      	b.n	8005b80 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f83b 	bl	8005bde <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b68:	e00a      	b.n	8005b80 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f837 	bl	8005bde <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b70:	e006      	b.n	8005b80 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f833 	bl	8005bde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005b7e:	e01e      	b.n	8005bbe <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b80:	bf00      	nop
    return;
 8005b82:	e01c      	b.n	8005bbe <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d008      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x1cc>
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f8a4 	bl	8005ce6 <UART_Transmit_IT>
    return;
 8005b9e:	e00f      	b.n	8005bc0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00a      	beq.n	8005bc0 <HAL_UART_IRQHandler+0x1ec>
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f8eb 	bl	8005d90 <UART_EndTransmit_IT>
    return;
 8005bba:	bf00      	nop
 8005bbc:	e000      	b.n	8005bc0 <HAL_UART_IRQHandler+0x1ec>
    return;
 8005bbe:	bf00      	nop
  }
}
 8005bc0:	3720      	adds	r7, #32
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	08005cbf 	.word	0x08005cbf

08005bcc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bc80      	pop	{r7}
 8005bdc:	4770      	bx	lr

08005bde <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005be6:	bf00      	nop
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bc80      	pop	{r7}
 8005bee:	4770      	bx	lr

08005bf0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	603b      	str	r3, [r7, #0]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c00:	e02c      	b.n	8005c5c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c08:	d028      	beq.n	8005c5c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d007      	beq.n	8005c20 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c10:	f7fc fdc4 	bl	800279c <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d21d      	bcs.n	8005c5c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68da      	ldr	r2, [r3, #12]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c2e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	695a      	ldr	r2, [r3, #20]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0201 	bic.w	r2, r2, #1
 8005c3e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2220      	movs	r2, #32
 8005c44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e00f      	b.n	8005c7c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	4013      	ands	r3, r2
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	bf0c      	ite	eq
 8005c6c:	2301      	moveq	r3, #1
 8005c6e:	2300      	movne	r3, #0
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	461a      	mov	r2, r3
 8005c74:	79fb      	ldrb	r3, [r7, #7]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d0c3      	beq.n	8005c02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c9a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	695a      	ldr	r2, [r3, #20]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0201 	bic.w	r2, r2, #1
 8005caa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bc80      	pop	{r7}
 8005cbc:	4770      	bx	lr

08005cbe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f7ff ff80 	bl	8005bde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cde:	bf00      	nop
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b085      	sub	sp, #20
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b21      	cmp	r3, #33	; 0x21
 8005cf8:	d144      	bne.n	8005d84 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d02:	d11a      	bne.n	8005d3a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d18:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d105      	bne.n	8005d2e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	1c9a      	adds	r2, r3, #2
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	621a      	str	r2, [r3, #32]
 8005d2c:	e00e      	b.n	8005d4c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	621a      	str	r2, [r3, #32]
 8005d38:	e008      	b.n	8005d4c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	1c59      	adds	r1, r3, #1
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	6211      	str	r1, [r2, #32]
 8005d44:	781a      	ldrb	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10f      	bne.n	8005d80 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	e000      	b.n	8005d86 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005d84:	2302      	movs	r3, #2
  }
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bc80      	pop	{r7}
 8005d8e:	4770      	bx	lr

08005d90 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005da6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7ff ff0b 	bl	8005bcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b22      	cmp	r3, #34	; 0x22
 8005dd2:	d171      	bne.n	8005eb8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ddc:	d123      	bne.n	8005e26 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10e      	bne.n	8005e0a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e02:	1c9a      	adds	r2, r3, #2
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	629a      	str	r2, [r3, #40]	; 0x28
 8005e08:	e029      	b.n	8005e5e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1e:	1c5a      	adds	r2, r3, #1
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	629a      	str	r2, [r3, #40]	; 0x28
 8005e24:	e01b      	b.n	8005e5e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10a      	bne.n	8005e44 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6858      	ldr	r0, [r3, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e38:	1c59      	adds	r1, r3, #1
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6291      	str	r1, [r2, #40]	; 0x28
 8005e3e:	b2c2      	uxtb	r2, r0
 8005e40:	701a      	strb	r2, [r3, #0]
 8005e42:	e00c      	b.n	8005e5e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e50:	1c58      	adds	r0, r3, #1
 8005e52:	6879      	ldr	r1, [r7, #4]
 8005e54:	6288      	str	r0, [r1, #40]	; 0x28
 8005e56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e5a:	b2d2      	uxtb	r2, r2
 8005e5c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	3b01      	subs	r3, #1
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d120      	bne.n	8005eb4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0220 	bic.w	r2, r2, #32
 8005e80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	695a      	ldr	r2, [r3, #20]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0201 	bic.w	r2, r2, #1
 8005ea0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7fa fd3e 	bl	800092c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	e002      	b.n	8005eba <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	e000      	b.n	8005eba <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005eb8:	2302      	movs	r3, #2
  }
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
	...

08005ec4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	689a      	ldr	r2, [r3, #8]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	431a      	orrs	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005efe:	f023 030c 	bic.w	r3, r3, #12
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	6812      	ldr	r2, [r2, #0]
 8005f06:	68f9      	ldr	r1, [r7, #12]
 8005f08:	430b      	orrs	r3, r1
 8005f0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	699a      	ldr	r2, [r3, #24]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a52      	ldr	r2, [pc, #328]	; (8006070 <UART_SetConfig+0x1ac>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d14e      	bne.n	8005fca <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f2c:	f7fe fba2 	bl	8004674 <HAL_RCC_GetPCLK2Freq>
 8005f30:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	4613      	mov	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4413      	add	r3, r2
 8005f3a:	009a      	lsls	r2, r3, #2
 8005f3c:	441a      	add	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f48:	4a4a      	ldr	r2, [pc, #296]	; (8006074 <UART_SetConfig+0x1b0>)
 8005f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	0119      	lsls	r1, r3, #4
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	4613      	mov	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	009a      	lsls	r2, r3, #2
 8005f5c:	441a      	add	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f68:	4b42      	ldr	r3, [pc, #264]	; (8006074 <UART_SetConfig+0x1b0>)
 8005f6a:	fba3 0302 	umull	r0, r3, r3, r2
 8005f6e:	095b      	lsrs	r3, r3, #5
 8005f70:	2064      	movs	r0, #100	; 0x64
 8005f72:	fb00 f303 	mul.w	r3, r0, r3
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	011b      	lsls	r3, r3, #4
 8005f7a:	3332      	adds	r3, #50	; 0x32
 8005f7c:	4a3d      	ldr	r2, [pc, #244]	; (8006074 <UART_SetConfig+0x1b0>)
 8005f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f82:	095b      	lsrs	r3, r3, #5
 8005f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f88:	4419      	add	r1, r3
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	009a      	lsls	r2, r3, #2
 8005f94:	441a      	add	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fa0:	4b34      	ldr	r3, [pc, #208]	; (8006074 <UART_SetConfig+0x1b0>)
 8005fa2:	fba3 0302 	umull	r0, r3, r3, r2
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	2064      	movs	r0, #100	; 0x64
 8005faa:	fb00 f303 	mul.w	r3, r0, r3
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	011b      	lsls	r3, r3, #4
 8005fb2:	3332      	adds	r3, #50	; 0x32
 8005fb4:	4a2f      	ldr	r2, [pc, #188]	; (8006074 <UART_SetConfig+0x1b0>)
 8005fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fba:	095b      	lsrs	r3, r3, #5
 8005fbc:	f003 020f 	and.w	r2, r3, #15
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	440a      	add	r2, r1
 8005fc6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005fc8:	e04d      	b.n	8006066 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005fca:	f7fe fb3f 	bl	800464c <HAL_RCC_GetPCLK1Freq>
 8005fce:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	009a      	lsls	r2, r3, #2
 8005fda:	441a      	add	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe6:	4a23      	ldr	r2, [pc, #140]	; (8006074 <UART_SetConfig+0x1b0>)
 8005fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fec:	095b      	lsrs	r3, r3, #5
 8005fee:	0119      	lsls	r1, r3, #4
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	009a      	lsls	r2, r3, #2
 8005ffa:	441a      	add	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	fbb2 f2f3 	udiv	r2, r2, r3
 8006006:	4b1b      	ldr	r3, [pc, #108]	; (8006074 <UART_SetConfig+0x1b0>)
 8006008:	fba3 0302 	umull	r0, r3, r3, r2
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	2064      	movs	r0, #100	; 0x64
 8006010:	fb00 f303 	mul.w	r3, r0, r3
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	3332      	adds	r3, #50	; 0x32
 800601a:	4a16      	ldr	r2, [pc, #88]	; (8006074 <UART_SetConfig+0x1b0>)
 800601c:	fba2 2303 	umull	r2, r3, r2, r3
 8006020:	095b      	lsrs	r3, r3, #5
 8006022:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006026:	4419      	add	r1, r3
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	4613      	mov	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	009a      	lsls	r2, r3, #2
 8006032:	441a      	add	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	fbb2 f2f3 	udiv	r2, r2, r3
 800603e:	4b0d      	ldr	r3, [pc, #52]	; (8006074 <UART_SetConfig+0x1b0>)
 8006040:	fba3 0302 	umull	r0, r3, r3, r2
 8006044:	095b      	lsrs	r3, r3, #5
 8006046:	2064      	movs	r0, #100	; 0x64
 8006048:	fb00 f303 	mul.w	r3, r0, r3
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	3332      	adds	r3, #50	; 0x32
 8006052:	4a08      	ldr	r2, [pc, #32]	; (8006074 <UART_SetConfig+0x1b0>)
 8006054:	fba2 2303 	umull	r2, r3, r2, r3
 8006058:	095b      	lsrs	r3, r3, #5
 800605a:	f003 020f 	and.w	r2, r3, #15
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	440a      	add	r2, r1
 8006064:	609a      	str	r2, [r3, #8]
}
 8006066:	bf00      	nop
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	40013800 	.word	0x40013800
 8006074:	51eb851f 	.word	0x51eb851f

08006078 <__errno>:
 8006078:	4b01      	ldr	r3, [pc, #4]	; (8006080 <__errno+0x8>)
 800607a:	6818      	ldr	r0, [r3, #0]
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	20000010 	.word	0x20000010

08006084 <__libc_init_array>:
 8006084:	b570      	push	{r4, r5, r6, lr}
 8006086:	2500      	movs	r5, #0
 8006088:	4e0c      	ldr	r6, [pc, #48]	; (80060bc <__libc_init_array+0x38>)
 800608a:	4c0d      	ldr	r4, [pc, #52]	; (80060c0 <__libc_init_array+0x3c>)
 800608c:	1ba4      	subs	r4, r4, r6
 800608e:	10a4      	asrs	r4, r4, #2
 8006090:	42a5      	cmp	r5, r4
 8006092:	d109      	bne.n	80060a8 <__libc_init_array+0x24>
 8006094:	f000 fc34 	bl	8006900 <_init>
 8006098:	2500      	movs	r5, #0
 800609a:	4e0a      	ldr	r6, [pc, #40]	; (80060c4 <__libc_init_array+0x40>)
 800609c:	4c0a      	ldr	r4, [pc, #40]	; (80060c8 <__libc_init_array+0x44>)
 800609e:	1ba4      	subs	r4, r4, r6
 80060a0:	10a4      	asrs	r4, r4, #2
 80060a2:	42a5      	cmp	r5, r4
 80060a4:	d105      	bne.n	80060b2 <__libc_init_array+0x2e>
 80060a6:	bd70      	pop	{r4, r5, r6, pc}
 80060a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060ac:	4798      	blx	r3
 80060ae:	3501      	adds	r5, #1
 80060b0:	e7ee      	b.n	8006090 <__libc_init_array+0xc>
 80060b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060b6:	4798      	blx	r3
 80060b8:	3501      	adds	r5, #1
 80060ba:	e7f2      	b.n	80060a2 <__libc_init_array+0x1e>
 80060bc:	08006a60 	.word	0x08006a60
 80060c0:	08006a60 	.word	0x08006a60
 80060c4:	08006a60 	.word	0x08006a60
 80060c8:	08006a64 	.word	0x08006a64

080060cc <memset>:
 80060cc:	4603      	mov	r3, r0
 80060ce:	4402      	add	r2, r0
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d100      	bne.n	80060d6 <memset+0xa>
 80060d4:	4770      	bx	lr
 80060d6:	f803 1b01 	strb.w	r1, [r3], #1
 80060da:	e7f9      	b.n	80060d0 <memset+0x4>

080060dc <siprintf>:
 80060dc:	b40e      	push	{r1, r2, r3}
 80060de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060e2:	b500      	push	{lr}
 80060e4:	b09c      	sub	sp, #112	; 0x70
 80060e6:	ab1d      	add	r3, sp, #116	; 0x74
 80060e8:	9002      	str	r0, [sp, #8]
 80060ea:	9006      	str	r0, [sp, #24]
 80060ec:	9107      	str	r1, [sp, #28]
 80060ee:	9104      	str	r1, [sp, #16]
 80060f0:	4808      	ldr	r0, [pc, #32]	; (8006114 <siprintf+0x38>)
 80060f2:	4909      	ldr	r1, [pc, #36]	; (8006118 <siprintf+0x3c>)
 80060f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80060f8:	9105      	str	r1, [sp, #20]
 80060fa:	6800      	ldr	r0, [r0, #0]
 80060fc:	a902      	add	r1, sp, #8
 80060fe:	9301      	str	r3, [sp, #4]
 8006100:	f000 f8c0 	bl	8006284 <_svfiprintf_r>
 8006104:	2200      	movs	r2, #0
 8006106:	9b02      	ldr	r3, [sp, #8]
 8006108:	701a      	strb	r2, [r3, #0]
 800610a:	b01c      	add	sp, #112	; 0x70
 800610c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006110:	b003      	add	sp, #12
 8006112:	4770      	bx	lr
 8006114:	20000010 	.word	0x20000010
 8006118:	ffff0208 	.word	0xffff0208

0800611c <_malloc_r>:
 800611c:	b570      	push	{r4, r5, r6, lr}
 800611e:	1ccd      	adds	r5, r1, #3
 8006120:	f025 0503 	bic.w	r5, r5, #3
 8006124:	3508      	adds	r5, #8
 8006126:	2d0c      	cmp	r5, #12
 8006128:	bf38      	it	cc
 800612a:	250c      	movcc	r5, #12
 800612c:	2d00      	cmp	r5, #0
 800612e:	4606      	mov	r6, r0
 8006130:	db01      	blt.n	8006136 <_malloc_r+0x1a>
 8006132:	42a9      	cmp	r1, r5
 8006134:	d903      	bls.n	800613e <_malloc_r+0x22>
 8006136:	230c      	movs	r3, #12
 8006138:	6033      	str	r3, [r6, #0]
 800613a:	2000      	movs	r0, #0
 800613c:	bd70      	pop	{r4, r5, r6, pc}
 800613e:	f000 fb63 	bl	8006808 <__malloc_lock>
 8006142:	4a21      	ldr	r2, [pc, #132]	; (80061c8 <_malloc_r+0xac>)
 8006144:	6814      	ldr	r4, [r2, #0]
 8006146:	4621      	mov	r1, r4
 8006148:	b991      	cbnz	r1, 8006170 <_malloc_r+0x54>
 800614a:	4c20      	ldr	r4, [pc, #128]	; (80061cc <_malloc_r+0xb0>)
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	b91b      	cbnz	r3, 8006158 <_malloc_r+0x3c>
 8006150:	4630      	mov	r0, r6
 8006152:	f000 fb17 	bl	8006784 <_sbrk_r>
 8006156:	6020      	str	r0, [r4, #0]
 8006158:	4629      	mov	r1, r5
 800615a:	4630      	mov	r0, r6
 800615c:	f000 fb12 	bl	8006784 <_sbrk_r>
 8006160:	1c43      	adds	r3, r0, #1
 8006162:	d124      	bne.n	80061ae <_malloc_r+0x92>
 8006164:	230c      	movs	r3, #12
 8006166:	4630      	mov	r0, r6
 8006168:	6033      	str	r3, [r6, #0]
 800616a:	f000 fb4e 	bl	800680a <__malloc_unlock>
 800616e:	e7e4      	b.n	800613a <_malloc_r+0x1e>
 8006170:	680b      	ldr	r3, [r1, #0]
 8006172:	1b5b      	subs	r3, r3, r5
 8006174:	d418      	bmi.n	80061a8 <_malloc_r+0x8c>
 8006176:	2b0b      	cmp	r3, #11
 8006178:	d90f      	bls.n	800619a <_malloc_r+0x7e>
 800617a:	600b      	str	r3, [r1, #0]
 800617c:	18cc      	adds	r4, r1, r3
 800617e:	50cd      	str	r5, [r1, r3]
 8006180:	4630      	mov	r0, r6
 8006182:	f000 fb42 	bl	800680a <__malloc_unlock>
 8006186:	f104 000b 	add.w	r0, r4, #11
 800618a:	1d23      	adds	r3, r4, #4
 800618c:	f020 0007 	bic.w	r0, r0, #7
 8006190:	1ac3      	subs	r3, r0, r3
 8006192:	d0d3      	beq.n	800613c <_malloc_r+0x20>
 8006194:	425a      	negs	r2, r3
 8006196:	50e2      	str	r2, [r4, r3]
 8006198:	e7d0      	b.n	800613c <_malloc_r+0x20>
 800619a:	684b      	ldr	r3, [r1, #4]
 800619c:	428c      	cmp	r4, r1
 800619e:	bf16      	itet	ne
 80061a0:	6063      	strne	r3, [r4, #4]
 80061a2:	6013      	streq	r3, [r2, #0]
 80061a4:	460c      	movne	r4, r1
 80061a6:	e7eb      	b.n	8006180 <_malloc_r+0x64>
 80061a8:	460c      	mov	r4, r1
 80061aa:	6849      	ldr	r1, [r1, #4]
 80061ac:	e7cc      	b.n	8006148 <_malloc_r+0x2c>
 80061ae:	1cc4      	adds	r4, r0, #3
 80061b0:	f024 0403 	bic.w	r4, r4, #3
 80061b4:	42a0      	cmp	r0, r4
 80061b6:	d005      	beq.n	80061c4 <_malloc_r+0xa8>
 80061b8:	1a21      	subs	r1, r4, r0
 80061ba:	4630      	mov	r0, r6
 80061bc:	f000 fae2 	bl	8006784 <_sbrk_r>
 80061c0:	3001      	adds	r0, #1
 80061c2:	d0cf      	beq.n	8006164 <_malloc_r+0x48>
 80061c4:	6025      	str	r5, [r4, #0]
 80061c6:	e7db      	b.n	8006180 <_malloc_r+0x64>
 80061c8:	200000d4 	.word	0x200000d4
 80061cc:	200000d8 	.word	0x200000d8

080061d0 <__ssputs_r>:
 80061d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061d4:	688e      	ldr	r6, [r1, #8]
 80061d6:	4682      	mov	sl, r0
 80061d8:	429e      	cmp	r6, r3
 80061da:	460c      	mov	r4, r1
 80061dc:	4690      	mov	r8, r2
 80061de:	4699      	mov	r9, r3
 80061e0:	d837      	bhi.n	8006252 <__ssputs_r+0x82>
 80061e2:	898a      	ldrh	r2, [r1, #12]
 80061e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061e8:	d031      	beq.n	800624e <__ssputs_r+0x7e>
 80061ea:	2302      	movs	r3, #2
 80061ec:	6825      	ldr	r5, [r4, #0]
 80061ee:	6909      	ldr	r1, [r1, #16]
 80061f0:	1a6f      	subs	r7, r5, r1
 80061f2:	6965      	ldr	r5, [r4, #20]
 80061f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80061fc:	f109 0301 	add.w	r3, r9, #1
 8006200:	443b      	add	r3, r7
 8006202:	429d      	cmp	r5, r3
 8006204:	bf38      	it	cc
 8006206:	461d      	movcc	r5, r3
 8006208:	0553      	lsls	r3, r2, #21
 800620a:	d530      	bpl.n	800626e <__ssputs_r+0x9e>
 800620c:	4629      	mov	r1, r5
 800620e:	f7ff ff85 	bl	800611c <_malloc_r>
 8006212:	4606      	mov	r6, r0
 8006214:	b950      	cbnz	r0, 800622c <__ssputs_r+0x5c>
 8006216:	230c      	movs	r3, #12
 8006218:	f04f 30ff 	mov.w	r0, #4294967295
 800621c:	f8ca 3000 	str.w	r3, [sl]
 8006220:	89a3      	ldrh	r3, [r4, #12]
 8006222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006226:	81a3      	strh	r3, [r4, #12]
 8006228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800622c:	463a      	mov	r2, r7
 800622e:	6921      	ldr	r1, [r4, #16]
 8006230:	f000 fac6 	bl	80067c0 <memcpy>
 8006234:	89a3      	ldrh	r3, [r4, #12]
 8006236:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800623a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800623e:	81a3      	strh	r3, [r4, #12]
 8006240:	6126      	str	r6, [r4, #16]
 8006242:	443e      	add	r6, r7
 8006244:	6026      	str	r6, [r4, #0]
 8006246:	464e      	mov	r6, r9
 8006248:	6165      	str	r5, [r4, #20]
 800624a:	1bed      	subs	r5, r5, r7
 800624c:	60a5      	str	r5, [r4, #8]
 800624e:	454e      	cmp	r6, r9
 8006250:	d900      	bls.n	8006254 <__ssputs_r+0x84>
 8006252:	464e      	mov	r6, r9
 8006254:	4632      	mov	r2, r6
 8006256:	4641      	mov	r1, r8
 8006258:	6820      	ldr	r0, [r4, #0]
 800625a:	f000 fabc 	bl	80067d6 <memmove>
 800625e:	68a3      	ldr	r3, [r4, #8]
 8006260:	2000      	movs	r0, #0
 8006262:	1b9b      	subs	r3, r3, r6
 8006264:	60a3      	str	r3, [r4, #8]
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	441e      	add	r6, r3
 800626a:	6026      	str	r6, [r4, #0]
 800626c:	e7dc      	b.n	8006228 <__ssputs_r+0x58>
 800626e:	462a      	mov	r2, r5
 8006270:	f000 fb18 	bl	80068a4 <_realloc_r>
 8006274:	4606      	mov	r6, r0
 8006276:	2800      	cmp	r0, #0
 8006278:	d1e2      	bne.n	8006240 <__ssputs_r+0x70>
 800627a:	6921      	ldr	r1, [r4, #16]
 800627c:	4650      	mov	r0, sl
 800627e:	f000 fac5 	bl	800680c <_free_r>
 8006282:	e7c8      	b.n	8006216 <__ssputs_r+0x46>

08006284 <_svfiprintf_r>:
 8006284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006288:	461d      	mov	r5, r3
 800628a:	898b      	ldrh	r3, [r1, #12]
 800628c:	b09d      	sub	sp, #116	; 0x74
 800628e:	061f      	lsls	r7, r3, #24
 8006290:	4680      	mov	r8, r0
 8006292:	460c      	mov	r4, r1
 8006294:	4616      	mov	r6, r2
 8006296:	d50f      	bpl.n	80062b8 <_svfiprintf_r+0x34>
 8006298:	690b      	ldr	r3, [r1, #16]
 800629a:	b96b      	cbnz	r3, 80062b8 <_svfiprintf_r+0x34>
 800629c:	2140      	movs	r1, #64	; 0x40
 800629e:	f7ff ff3d 	bl	800611c <_malloc_r>
 80062a2:	6020      	str	r0, [r4, #0]
 80062a4:	6120      	str	r0, [r4, #16]
 80062a6:	b928      	cbnz	r0, 80062b4 <_svfiprintf_r+0x30>
 80062a8:	230c      	movs	r3, #12
 80062aa:	f8c8 3000 	str.w	r3, [r8]
 80062ae:	f04f 30ff 	mov.w	r0, #4294967295
 80062b2:	e0c8      	b.n	8006446 <_svfiprintf_r+0x1c2>
 80062b4:	2340      	movs	r3, #64	; 0x40
 80062b6:	6163      	str	r3, [r4, #20]
 80062b8:	2300      	movs	r3, #0
 80062ba:	9309      	str	r3, [sp, #36]	; 0x24
 80062bc:	2320      	movs	r3, #32
 80062be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062c2:	2330      	movs	r3, #48	; 0x30
 80062c4:	f04f 0b01 	mov.w	fp, #1
 80062c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062cc:	9503      	str	r5, [sp, #12]
 80062ce:	4637      	mov	r7, r6
 80062d0:	463d      	mov	r5, r7
 80062d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80062d6:	b10b      	cbz	r3, 80062dc <_svfiprintf_r+0x58>
 80062d8:	2b25      	cmp	r3, #37	; 0x25
 80062da:	d13e      	bne.n	800635a <_svfiprintf_r+0xd6>
 80062dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80062e0:	d00b      	beq.n	80062fa <_svfiprintf_r+0x76>
 80062e2:	4653      	mov	r3, sl
 80062e4:	4632      	mov	r2, r6
 80062e6:	4621      	mov	r1, r4
 80062e8:	4640      	mov	r0, r8
 80062ea:	f7ff ff71 	bl	80061d0 <__ssputs_r>
 80062ee:	3001      	adds	r0, #1
 80062f0:	f000 80a4 	beq.w	800643c <_svfiprintf_r+0x1b8>
 80062f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f6:	4453      	add	r3, sl
 80062f8:	9309      	str	r3, [sp, #36]	; 0x24
 80062fa:	783b      	ldrb	r3, [r7, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 809d 	beq.w	800643c <_svfiprintf_r+0x1b8>
 8006302:	2300      	movs	r3, #0
 8006304:	f04f 32ff 	mov.w	r2, #4294967295
 8006308:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800630c:	9304      	str	r3, [sp, #16]
 800630e:	9307      	str	r3, [sp, #28]
 8006310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006314:	931a      	str	r3, [sp, #104]	; 0x68
 8006316:	462f      	mov	r7, r5
 8006318:	2205      	movs	r2, #5
 800631a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800631e:	4850      	ldr	r0, [pc, #320]	; (8006460 <_svfiprintf_r+0x1dc>)
 8006320:	f000 fa40 	bl	80067a4 <memchr>
 8006324:	9b04      	ldr	r3, [sp, #16]
 8006326:	b9d0      	cbnz	r0, 800635e <_svfiprintf_r+0xda>
 8006328:	06d9      	lsls	r1, r3, #27
 800632a:	bf44      	itt	mi
 800632c:	2220      	movmi	r2, #32
 800632e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006332:	071a      	lsls	r2, r3, #28
 8006334:	bf44      	itt	mi
 8006336:	222b      	movmi	r2, #43	; 0x2b
 8006338:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800633c:	782a      	ldrb	r2, [r5, #0]
 800633e:	2a2a      	cmp	r2, #42	; 0x2a
 8006340:	d015      	beq.n	800636e <_svfiprintf_r+0xea>
 8006342:	462f      	mov	r7, r5
 8006344:	2000      	movs	r0, #0
 8006346:	250a      	movs	r5, #10
 8006348:	9a07      	ldr	r2, [sp, #28]
 800634a:	4639      	mov	r1, r7
 800634c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006350:	3b30      	subs	r3, #48	; 0x30
 8006352:	2b09      	cmp	r3, #9
 8006354:	d94d      	bls.n	80063f2 <_svfiprintf_r+0x16e>
 8006356:	b1b8      	cbz	r0, 8006388 <_svfiprintf_r+0x104>
 8006358:	e00f      	b.n	800637a <_svfiprintf_r+0xf6>
 800635a:	462f      	mov	r7, r5
 800635c:	e7b8      	b.n	80062d0 <_svfiprintf_r+0x4c>
 800635e:	4a40      	ldr	r2, [pc, #256]	; (8006460 <_svfiprintf_r+0x1dc>)
 8006360:	463d      	mov	r5, r7
 8006362:	1a80      	subs	r0, r0, r2
 8006364:	fa0b f000 	lsl.w	r0, fp, r0
 8006368:	4318      	orrs	r0, r3
 800636a:	9004      	str	r0, [sp, #16]
 800636c:	e7d3      	b.n	8006316 <_svfiprintf_r+0x92>
 800636e:	9a03      	ldr	r2, [sp, #12]
 8006370:	1d11      	adds	r1, r2, #4
 8006372:	6812      	ldr	r2, [r2, #0]
 8006374:	9103      	str	r1, [sp, #12]
 8006376:	2a00      	cmp	r2, #0
 8006378:	db01      	blt.n	800637e <_svfiprintf_r+0xfa>
 800637a:	9207      	str	r2, [sp, #28]
 800637c:	e004      	b.n	8006388 <_svfiprintf_r+0x104>
 800637e:	4252      	negs	r2, r2
 8006380:	f043 0302 	orr.w	r3, r3, #2
 8006384:	9207      	str	r2, [sp, #28]
 8006386:	9304      	str	r3, [sp, #16]
 8006388:	783b      	ldrb	r3, [r7, #0]
 800638a:	2b2e      	cmp	r3, #46	; 0x2e
 800638c:	d10c      	bne.n	80063a8 <_svfiprintf_r+0x124>
 800638e:	787b      	ldrb	r3, [r7, #1]
 8006390:	2b2a      	cmp	r3, #42	; 0x2a
 8006392:	d133      	bne.n	80063fc <_svfiprintf_r+0x178>
 8006394:	9b03      	ldr	r3, [sp, #12]
 8006396:	3702      	adds	r7, #2
 8006398:	1d1a      	adds	r2, r3, #4
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	9203      	str	r2, [sp, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	bfb8      	it	lt
 80063a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80063a6:	9305      	str	r3, [sp, #20]
 80063a8:	4d2e      	ldr	r5, [pc, #184]	; (8006464 <_svfiprintf_r+0x1e0>)
 80063aa:	2203      	movs	r2, #3
 80063ac:	7839      	ldrb	r1, [r7, #0]
 80063ae:	4628      	mov	r0, r5
 80063b0:	f000 f9f8 	bl	80067a4 <memchr>
 80063b4:	b138      	cbz	r0, 80063c6 <_svfiprintf_r+0x142>
 80063b6:	2340      	movs	r3, #64	; 0x40
 80063b8:	1b40      	subs	r0, r0, r5
 80063ba:	fa03 f000 	lsl.w	r0, r3, r0
 80063be:	9b04      	ldr	r3, [sp, #16]
 80063c0:	3701      	adds	r7, #1
 80063c2:	4303      	orrs	r3, r0
 80063c4:	9304      	str	r3, [sp, #16]
 80063c6:	7839      	ldrb	r1, [r7, #0]
 80063c8:	2206      	movs	r2, #6
 80063ca:	4827      	ldr	r0, [pc, #156]	; (8006468 <_svfiprintf_r+0x1e4>)
 80063cc:	1c7e      	adds	r6, r7, #1
 80063ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063d2:	f000 f9e7 	bl	80067a4 <memchr>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d038      	beq.n	800644c <_svfiprintf_r+0x1c8>
 80063da:	4b24      	ldr	r3, [pc, #144]	; (800646c <_svfiprintf_r+0x1e8>)
 80063dc:	bb13      	cbnz	r3, 8006424 <_svfiprintf_r+0x1a0>
 80063de:	9b03      	ldr	r3, [sp, #12]
 80063e0:	3307      	adds	r3, #7
 80063e2:	f023 0307 	bic.w	r3, r3, #7
 80063e6:	3308      	adds	r3, #8
 80063e8:	9303      	str	r3, [sp, #12]
 80063ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ec:	444b      	add	r3, r9
 80063ee:	9309      	str	r3, [sp, #36]	; 0x24
 80063f0:	e76d      	b.n	80062ce <_svfiprintf_r+0x4a>
 80063f2:	fb05 3202 	mla	r2, r5, r2, r3
 80063f6:	2001      	movs	r0, #1
 80063f8:	460f      	mov	r7, r1
 80063fa:	e7a6      	b.n	800634a <_svfiprintf_r+0xc6>
 80063fc:	2300      	movs	r3, #0
 80063fe:	250a      	movs	r5, #10
 8006400:	4619      	mov	r1, r3
 8006402:	3701      	adds	r7, #1
 8006404:	9305      	str	r3, [sp, #20]
 8006406:	4638      	mov	r0, r7
 8006408:	f810 2b01 	ldrb.w	r2, [r0], #1
 800640c:	3a30      	subs	r2, #48	; 0x30
 800640e:	2a09      	cmp	r2, #9
 8006410:	d903      	bls.n	800641a <_svfiprintf_r+0x196>
 8006412:	2b00      	cmp	r3, #0
 8006414:	d0c8      	beq.n	80063a8 <_svfiprintf_r+0x124>
 8006416:	9105      	str	r1, [sp, #20]
 8006418:	e7c6      	b.n	80063a8 <_svfiprintf_r+0x124>
 800641a:	fb05 2101 	mla	r1, r5, r1, r2
 800641e:	2301      	movs	r3, #1
 8006420:	4607      	mov	r7, r0
 8006422:	e7f0      	b.n	8006406 <_svfiprintf_r+0x182>
 8006424:	ab03      	add	r3, sp, #12
 8006426:	9300      	str	r3, [sp, #0]
 8006428:	4622      	mov	r2, r4
 800642a:	4b11      	ldr	r3, [pc, #68]	; (8006470 <_svfiprintf_r+0x1ec>)
 800642c:	a904      	add	r1, sp, #16
 800642e:	4640      	mov	r0, r8
 8006430:	f3af 8000 	nop.w
 8006434:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006438:	4681      	mov	r9, r0
 800643a:	d1d6      	bne.n	80063ea <_svfiprintf_r+0x166>
 800643c:	89a3      	ldrh	r3, [r4, #12]
 800643e:	065b      	lsls	r3, r3, #25
 8006440:	f53f af35 	bmi.w	80062ae <_svfiprintf_r+0x2a>
 8006444:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006446:	b01d      	add	sp, #116	; 0x74
 8006448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800644c:	ab03      	add	r3, sp, #12
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	4622      	mov	r2, r4
 8006452:	4b07      	ldr	r3, [pc, #28]	; (8006470 <_svfiprintf_r+0x1ec>)
 8006454:	a904      	add	r1, sp, #16
 8006456:	4640      	mov	r0, r8
 8006458:	f000 f882 	bl	8006560 <_printf_i>
 800645c:	e7ea      	b.n	8006434 <_svfiprintf_r+0x1b0>
 800645e:	bf00      	nop
 8006460:	08006a2c 	.word	0x08006a2c
 8006464:	08006a32 	.word	0x08006a32
 8006468:	08006a36 	.word	0x08006a36
 800646c:	00000000 	.word	0x00000000
 8006470:	080061d1 	.word	0x080061d1

08006474 <_printf_common>:
 8006474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006478:	4691      	mov	r9, r2
 800647a:	461f      	mov	r7, r3
 800647c:	688a      	ldr	r2, [r1, #8]
 800647e:	690b      	ldr	r3, [r1, #16]
 8006480:	4606      	mov	r6, r0
 8006482:	4293      	cmp	r3, r2
 8006484:	bfb8      	it	lt
 8006486:	4613      	movlt	r3, r2
 8006488:	f8c9 3000 	str.w	r3, [r9]
 800648c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006490:	460c      	mov	r4, r1
 8006492:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006496:	b112      	cbz	r2, 800649e <_printf_common+0x2a>
 8006498:	3301      	adds	r3, #1
 800649a:	f8c9 3000 	str.w	r3, [r9]
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	0699      	lsls	r1, r3, #26
 80064a2:	bf42      	ittt	mi
 80064a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80064a8:	3302      	addmi	r3, #2
 80064aa:	f8c9 3000 	strmi.w	r3, [r9]
 80064ae:	6825      	ldr	r5, [r4, #0]
 80064b0:	f015 0506 	ands.w	r5, r5, #6
 80064b4:	d107      	bne.n	80064c6 <_printf_common+0x52>
 80064b6:	f104 0a19 	add.w	sl, r4, #25
 80064ba:	68e3      	ldr	r3, [r4, #12]
 80064bc:	f8d9 2000 	ldr.w	r2, [r9]
 80064c0:	1a9b      	subs	r3, r3, r2
 80064c2:	42ab      	cmp	r3, r5
 80064c4:	dc29      	bgt.n	800651a <_printf_common+0xa6>
 80064c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80064ca:	6822      	ldr	r2, [r4, #0]
 80064cc:	3300      	adds	r3, #0
 80064ce:	bf18      	it	ne
 80064d0:	2301      	movne	r3, #1
 80064d2:	0692      	lsls	r2, r2, #26
 80064d4:	d42e      	bmi.n	8006534 <_printf_common+0xc0>
 80064d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064da:	4639      	mov	r1, r7
 80064dc:	4630      	mov	r0, r6
 80064de:	47c0      	blx	r8
 80064e0:	3001      	adds	r0, #1
 80064e2:	d021      	beq.n	8006528 <_printf_common+0xb4>
 80064e4:	6823      	ldr	r3, [r4, #0]
 80064e6:	68e5      	ldr	r5, [r4, #12]
 80064e8:	f003 0306 	and.w	r3, r3, #6
 80064ec:	2b04      	cmp	r3, #4
 80064ee:	bf18      	it	ne
 80064f0:	2500      	movne	r5, #0
 80064f2:	f8d9 2000 	ldr.w	r2, [r9]
 80064f6:	f04f 0900 	mov.w	r9, #0
 80064fa:	bf08      	it	eq
 80064fc:	1aad      	subeq	r5, r5, r2
 80064fe:	68a3      	ldr	r3, [r4, #8]
 8006500:	6922      	ldr	r2, [r4, #16]
 8006502:	bf08      	it	eq
 8006504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006508:	4293      	cmp	r3, r2
 800650a:	bfc4      	itt	gt
 800650c:	1a9b      	subgt	r3, r3, r2
 800650e:	18ed      	addgt	r5, r5, r3
 8006510:	341a      	adds	r4, #26
 8006512:	454d      	cmp	r5, r9
 8006514:	d11a      	bne.n	800654c <_printf_common+0xd8>
 8006516:	2000      	movs	r0, #0
 8006518:	e008      	b.n	800652c <_printf_common+0xb8>
 800651a:	2301      	movs	r3, #1
 800651c:	4652      	mov	r2, sl
 800651e:	4639      	mov	r1, r7
 8006520:	4630      	mov	r0, r6
 8006522:	47c0      	blx	r8
 8006524:	3001      	adds	r0, #1
 8006526:	d103      	bne.n	8006530 <_printf_common+0xbc>
 8006528:	f04f 30ff 	mov.w	r0, #4294967295
 800652c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006530:	3501      	adds	r5, #1
 8006532:	e7c2      	b.n	80064ba <_printf_common+0x46>
 8006534:	2030      	movs	r0, #48	; 0x30
 8006536:	18e1      	adds	r1, r4, r3
 8006538:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800653c:	1c5a      	adds	r2, r3, #1
 800653e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006542:	4422      	add	r2, r4
 8006544:	3302      	adds	r3, #2
 8006546:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800654a:	e7c4      	b.n	80064d6 <_printf_common+0x62>
 800654c:	2301      	movs	r3, #1
 800654e:	4622      	mov	r2, r4
 8006550:	4639      	mov	r1, r7
 8006552:	4630      	mov	r0, r6
 8006554:	47c0      	blx	r8
 8006556:	3001      	adds	r0, #1
 8006558:	d0e6      	beq.n	8006528 <_printf_common+0xb4>
 800655a:	f109 0901 	add.w	r9, r9, #1
 800655e:	e7d8      	b.n	8006512 <_printf_common+0x9e>

08006560 <_printf_i>:
 8006560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006564:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006568:	460c      	mov	r4, r1
 800656a:	7e09      	ldrb	r1, [r1, #24]
 800656c:	b085      	sub	sp, #20
 800656e:	296e      	cmp	r1, #110	; 0x6e
 8006570:	4617      	mov	r7, r2
 8006572:	4606      	mov	r6, r0
 8006574:	4698      	mov	r8, r3
 8006576:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006578:	f000 80b3 	beq.w	80066e2 <_printf_i+0x182>
 800657c:	d822      	bhi.n	80065c4 <_printf_i+0x64>
 800657e:	2963      	cmp	r1, #99	; 0x63
 8006580:	d036      	beq.n	80065f0 <_printf_i+0x90>
 8006582:	d80a      	bhi.n	800659a <_printf_i+0x3a>
 8006584:	2900      	cmp	r1, #0
 8006586:	f000 80b9 	beq.w	80066fc <_printf_i+0x19c>
 800658a:	2958      	cmp	r1, #88	; 0x58
 800658c:	f000 8083 	beq.w	8006696 <_printf_i+0x136>
 8006590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006594:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006598:	e032      	b.n	8006600 <_printf_i+0xa0>
 800659a:	2964      	cmp	r1, #100	; 0x64
 800659c:	d001      	beq.n	80065a2 <_printf_i+0x42>
 800659e:	2969      	cmp	r1, #105	; 0x69
 80065a0:	d1f6      	bne.n	8006590 <_printf_i+0x30>
 80065a2:	6820      	ldr	r0, [r4, #0]
 80065a4:	6813      	ldr	r3, [r2, #0]
 80065a6:	0605      	lsls	r5, r0, #24
 80065a8:	f103 0104 	add.w	r1, r3, #4
 80065ac:	d52a      	bpl.n	8006604 <_printf_i+0xa4>
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6011      	str	r1, [r2, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	da03      	bge.n	80065be <_printf_i+0x5e>
 80065b6:	222d      	movs	r2, #45	; 0x2d
 80065b8:	425b      	negs	r3, r3
 80065ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80065be:	486f      	ldr	r0, [pc, #444]	; (800677c <_printf_i+0x21c>)
 80065c0:	220a      	movs	r2, #10
 80065c2:	e039      	b.n	8006638 <_printf_i+0xd8>
 80065c4:	2973      	cmp	r1, #115	; 0x73
 80065c6:	f000 809d 	beq.w	8006704 <_printf_i+0x1a4>
 80065ca:	d808      	bhi.n	80065de <_printf_i+0x7e>
 80065cc:	296f      	cmp	r1, #111	; 0x6f
 80065ce:	d020      	beq.n	8006612 <_printf_i+0xb2>
 80065d0:	2970      	cmp	r1, #112	; 0x70
 80065d2:	d1dd      	bne.n	8006590 <_printf_i+0x30>
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	f043 0320 	orr.w	r3, r3, #32
 80065da:	6023      	str	r3, [r4, #0]
 80065dc:	e003      	b.n	80065e6 <_printf_i+0x86>
 80065de:	2975      	cmp	r1, #117	; 0x75
 80065e0:	d017      	beq.n	8006612 <_printf_i+0xb2>
 80065e2:	2978      	cmp	r1, #120	; 0x78
 80065e4:	d1d4      	bne.n	8006590 <_printf_i+0x30>
 80065e6:	2378      	movs	r3, #120	; 0x78
 80065e8:	4865      	ldr	r0, [pc, #404]	; (8006780 <_printf_i+0x220>)
 80065ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065ee:	e055      	b.n	800669c <_printf_i+0x13c>
 80065f0:	6813      	ldr	r3, [r2, #0]
 80065f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065f6:	1d19      	adds	r1, r3, #4
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	6011      	str	r1, [r2, #0]
 80065fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006600:	2301      	movs	r3, #1
 8006602:	e08c      	b.n	800671e <_printf_i+0x1be>
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f010 0f40 	tst.w	r0, #64	; 0x40
 800660a:	6011      	str	r1, [r2, #0]
 800660c:	bf18      	it	ne
 800660e:	b21b      	sxthne	r3, r3
 8006610:	e7cf      	b.n	80065b2 <_printf_i+0x52>
 8006612:	6813      	ldr	r3, [r2, #0]
 8006614:	6825      	ldr	r5, [r4, #0]
 8006616:	1d18      	adds	r0, r3, #4
 8006618:	6010      	str	r0, [r2, #0]
 800661a:	0628      	lsls	r0, r5, #24
 800661c:	d501      	bpl.n	8006622 <_printf_i+0xc2>
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	e002      	b.n	8006628 <_printf_i+0xc8>
 8006622:	0668      	lsls	r0, r5, #25
 8006624:	d5fb      	bpl.n	800661e <_printf_i+0xbe>
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	296f      	cmp	r1, #111	; 0x6f
 800662a:	bf14      	ite	ne
 800662c:	220a      	movne	r2, #10
 800662e:	2208      	moveq	r2, #8
 8006630:	4852      	ldr	r0, [pc, #328]	; (800677c <_printf_i+0x21c>)
 8006632:	2100      	movs	r1, #0
 8006634:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006638:	6865      	ldr	r5, [r4, #4]
 800663a:	2d00      	cmp	r5, #0
 800663c:	60a5      	str	r5, [r4, #8]
 800663e:	f2c0 8095 	blt.w	800676c <_printf_i+0x20c>
 8006642:	6821      	ldr	r1, [r4, #0]
 8006644:	f021 0104 	bic.w	r1, r1, #4
 8006648:	6021      	str	r1, [r4, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d13d      	bne.n	80066ca <_printf_i+0x16a>
 800664e:	2d00      	cmp	r5, #0
 8006650:	f040 808e 	bne.w	8006770 <_printf_i+0x210>
 8006654:	4665      	mov	r5, ip
 8006656:	2a08      	cmp	r2, #8
 8006658:	d10b      	bne.n	8006672 <_printf_i+0x112>
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	07db      	lsls	r3, r3, #31
 800665e:	d508      	bpl.n	8006672 <_printf_i+0x112>
 8006660:	6923      	ldr	r3, [r4, #16]
 8006662:	6862      	ldr	r2, [r4, #4]
 8006664:	429a      	cmp	r2, r3
 8006666:	bfde      	ittt	le
 8006668:	2330      	movle	r3, #48	; 0x30
 800666a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800666e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006672:	ebac 0305 	sub.w	r3, ip, r5
 8006676:	6123      	str	r3, [r4, #16]
 8006678:	f8cd 8000 	str.w	r8, [sp]
 800667c:	463b      	mov	r3, r7
 800667e:	aa03      	add	r2, sp, #12
 8006680:	4621      	mov	r1, r4
 8006682:	4630      	mov	r0, r6
 8006684:	f7ff fef6 	bl	8006474 <_printf_common>
 8006688:	3001      	adds	r0, #1
 800668a:	d14d      	bne.n	8006728 <_printf_i+0x1c8>
 800668c:	f04f 30ff 	mov.w	r0, #4294967295
 8006690:	b005      	add	sp, #20
 8006692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006696:	4839      	ldr	r0, [pc, #228]	; (800677c <_printf_i+0x21c>)
 8006698:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800669c:	6813      	ldr	r3, [r2, #0]
 800669e:	6821      	ldr	r1, [r4, #0]
 80066a0:	1d1d      	adds	r5, r3, #4
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6015      	str	r5, [r2, #0]
 80066a6:	060a      	lsls	r2, r1, #24
 80066a8:	d50b      	bpl.n	80066c2 <_printf_i+0x162>
 80066aa:	07ca      	lsls	r2, r1, #31
 80066ac:	bf44      	itt	mi
 80066ae:	f041 0120 	orrmi.w	r1, r1, #32
 80066b2:	6021      	strmi	r1, [r4, #0]
 80066b4:	b91b      	cbnz	r3, 80066be <_printf_i+0x15e>
 80066b6:	6822      	ldr	r2, [r4, #0]
 80066b8:	f022 0220 	bic.w	r2, r2, #32
 80066bc:	6022      	str	r2, [r4, #0]
 80066be:	2210      	movs	r2, #16
 80066c0:	e7b7      	b.n	8006632 <_printf_i+0xd2>
 80066c2:	064d      	lsls	r5, r1, #25
 80066c4:	bf48      	it	mi
 80066c6:	b29b      	uxthmi	r3, r3
 80066c8:	e7ef      	b.n	80066aa <_printf_i+0x14a>
 80066ca:	4665      	mov	r5, ip
 80066cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80066d0:	fb02 3311 	mls	r3, r2, r1, r3
 80066d4:	5cc3      	ldrb	r3, [r0, r3]
 80066d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80066da:	460b      	mov	r3, r1
 80066dc:	2900      	cmp	r1, #0
 80066de:	d1f5      	bne.n	80066cc <_printf_i+0x16c>
 80066e0:	e7b9      	b.n	8006656 <_printf_i+0xf6>
 80066e2:	6813      	ldr	r3, [r2, #0]
 80066e4:	6825      	ldr	r5, [r4, #0]
 80066e6:	1d18      	adds	r0, r3, #4
 80066e8:	6961      	ldr	r1, [r4, #20]
 80066ea:	6010      	str	r0, [r2, #0]
 80066ec:	0628      	lsls	r0, r5, #24
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	d501      	bpl.n	80066f6 <_printf_i+0x196>
 80066f2:	6019      	str	r1, [r3, #0]
 80066f4:	e002      	b.n	80066fc <_printf_i+0x19c>
 80066f6:	066a      	lsls	r2, r5, #25
 80066f8:	d5fb      	bpl.n	80066f2 <_printf_i+0x192>
 80066fa:	8019      	strh	r1, [r3, #0]
 80066fc:	2300      	movs	r3, #0
 80066fe:	4665      	mov	r5, ip
 8006700:	6123      	str	r3, [r4, #16]
 8006702:	e7b9      	b.n	8006678 <_printf_i+0x118>
 8006704:	6813      	ldr	r3, [r2, #0]
 8006706:	1d19      	adds	r1, r3, #4
 8006708:	6011      	str	r1, [r2, #0]
 800670a:	681d      	ldr	r5, [r3, #0]
 800670c:	6862      	ldr	r2, [r4, #4]
 800670e:	2100      	movs	r1, #0
 8006710:	4628      	mov	r0, r5
 8006712:	f000 f847 	bl	80067a4 <memchr>
 8006716:	b108      	cbz	r0, 800671c <_printf_i+0x1bc>
 8006718:	1b40      	subs	r0, r0, r5
 800671a:	6060      	str	r0, [r4, #4]
 800671c:	6863      	ldr	r3, [r4, #4]
 800671e:	6123      	str	r3, [r4, #16]
 8006720:	2300      	movs	r3, #0
 8006722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006726:	e7a7      	b.n	8006678 <_printf_i+0x118>
 8006728:	6923      	ldr	r3, [r4, #16]
 800672a:	462a      	mov	r2, r5
 800672c:	4639      	mov	r1, r7
 800672e:	4630      	mov	r0, r6
 8006730:	47c0      	blx	r8
 8006732:	3001      	adds	r0, #1
 8006734:	d0aa      	beq.n	800668c <_printf_i+0x12c>
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	079b      	lsls	r3, r3, #30
 800673a:	d413      	bmi.n	8006764 <_printf_i+0x204>
 800673c:	68e0      	ldr	r0, [r4, #12]
 800673e:	9b03      	ldr	r3, [sp, #12]
 8006740:	4298      	cmp	r0, r3
 8006742:	bfb8      	it	lt
 8006744:	4618      	movlt	r0, r3
 8006746:	e7a3      	b.n	8006690 <_printf_i+0x130>
 8006748:	2301      	movs	r3, #1
 800674a:	464a      	mov	r2, r9
 800674c:	4639      	mov	r1, r7
 800674e:	4630      	mov	r0, r6
 8006750:	47c0      	blx	r8
 8006752:	3001      	adds	r0, #1
 8006754:	d09a      	beq.n	800668c <_printf_i+0x12c>
 8006756:	3501      	adds	r5, #1
 8006758:	68e3      	ldr	r3, [r4, #12]
 800675a:	9a03      	ldr	r2, [sp, #12]
 800675c:	1a9b      	subs	r3, r3, r2
 800675e:	42ab      	cmp	r3, r5
 8006760:	dcf2      	bgt.n	8006748 <_printf_i+0x1e8>
 8006762:	e7eb      	b.n	800673c <_printf_i+0x1dc>
 8006764:	2500      	movs	r5, #0
 8006766:	f104 0919 	add.w	r9, r4, #25
 800676a:	e7f5      	b.n	8006758 <_printf_i+0x1f8>
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1ac      	bne.n	80066ca <_printf_i+0x16a>
 8006770:	7803      	ldrb	r3, [r0, #0]
 8006772:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006776:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800677a:	e76c      	b.n	8006656 <_printf_i+0xf6>
 800677c:	08006a3d 	.word	0x08006a3d
 8006780:	08006a4e 	.word	0x08006a4e

08006784 <_sbrk_r>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	2300      	movs	r3, #0
 8006788:	4c05      	ldr	r4, [pc, #20]	; (80067a0 <_sbrk_r+0x1c>)
 800678a:	4605      	mov	r5, r0
 800678c:	4608      	mov	r0, r1
 800678e:	6023      	str	r3, [r4, #0]
 8006790:	f7fb f82e 	bl	80017f0 <_sbrk>
 8006794:	1c43      	adds	r3, r0, #1
 8006796:	d102      	bne.n	800679e <_sbrk_r+0x1a>
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	b103      	cbz	r3, 800679e <_sbrk_r+0x1a>
 800679c:	602b      	str	r3, [r5, #0]
 800679e:	bd38      	pop	{r3, r4, r5, pc}
 80067a0:	200002ec 	.word	0x200002ec

080067a4 <memchr>:
 80067a4:	b510      	push	{r4, lr}
 80067a6:	b2c9      	uxtb	r1, r1
 80067a8:	4402      	add	r2, r0
 80067aa:	4290      	cmp	r0, r2
 80067ac:	4603      	mov	r3, r0
 80067ae:	d101      	bne.n	80067b4 <memchr+0x10>
 80067b0:	2300      	movs	r3, #0
 80067b2:	e003      	b.n	80067bc <memchr+0x18>
 80067b4:	781c      	ldrb	r4, [r3, #0]
 80067b6:	3001      	adds	r0, #1
 80067b8:	428c      	cmp	r4, r1
 80067ba:	d1f6      	bne.n	80067aa <memchr+0x6>
 80067bc:	4618      	mov	r0, r3
 80067be:	bd10      	pop	{r4, pc}

080067c0 <memcpy>:
 80067c0:	b510      	push	{r4, lr}
 80067c2:	1e43      	subs	r3, r0, #1
 80067c4:	440a      	add	r2, r1
 80067c6:	4291      	cmp	r1, r2
 80067c8:	d100      	bne.n	80067cc <memcpy+0xc>
 80067ca:	bd10      	pop	{r4, pc}
 80067cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067d4:	e7f7      	b.n	80067c6 <memcpy+0x6>

080067d6 <memmove>:
 80067d6:	4288      	cmp	r0, r1
 80067d8:	b510      	push	{r4, lr}
 80067da:	eb01 0302 	add.w	r3, r1, r2
 80067de:	d807      	bhi.n	80067f0 <memmove+0x1a>
 80067e0:	1e42      	subs	r2, r0, #1
 80067e2:	4299      	cmp	r1, r3
 80067e4:	d00a      	beq.n	80067fc <memmove+0x26>
 80067e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067ea:	f802 4f01 	strb.w	r4, [r2, #1]!
 80067ee:	e7f8      	b.n	80067e2 <memmove+0xc>
 80067f0:	4283      	cmp	r3, r0
 80067f2:	d9f5      	bls.n	80067e0 <memmove+0xa>
 80067f4:	1881      	adds	r1, r0, r2
 80067f6:	1ad2      	subs	r2, r2, r3
 80067f8:	42d3      	cmn	r3, r2
 80067fa:	d100      	bne.n	80067fe <memmove+0x28>
 80067fc:	bd10      	pop	{r4, pc}
 80067fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006802:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006806:	e7f7      	b.n	80067f8 <memmove+0x22>

08006808 <__malloc_lock>:
 8006808:	4770      	bx	lr

0800680a <__malloc_unlock>:
 800680a:	4770      	bx	lr

0800680c <_free_r>:
 800680c:	b538      	push	{r3, r4, r5, lr}
 800680e:	4605      	mov	r5, r0
 8006810:	2900      	cmp	r1, #0
 8006812:	d043      	beq.n	800689c <_free_r+0x90>
 8006814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006818:	1f0c      	subs	r4, r1, #4
 800681a:	2b00      	cmp	r3, #0
 800681c:	bfb8      	it	lt
 800681e:	18e4      	addlt	r4, r4, r3
 8006820:	f7ff fff2 	bl	8006808 <__malloc_lock>
 8006824:	4a1e      	ldr	r2, [pc, #120]	; (80068a0 <_free_r+0x94>)
 8006826:	6813      	ldr	r3, [r2, #0]
 8006828:	4610      	mov	r0, r2
 800682a:	b933      	cbnz	r3, 800683a <_free_r+0x2e>
 800682c:	6063      	str	r3, [r4, #4]
 800682e:	6014      	str	r4, [r2, #0]
 8006830:	4628      	mov	r0, r5
 8006832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006836:	f7ff bfe8 	b.w	800680a <__malloc_unlock>
 800683a:	42a3      	cmp	r3, r4
 800683c:	d90b      	bls.n	8006856 <_free_r+0x4a>
 800683e:	6821      	ldr	r1, [r4, #0]
 8006840:	1862      	adds	r2, r4, r1
 8006842:	4293      	cmp	r3, r2
 8006844:	bf01      	itttt	eq
 8006846:	681a      	ldreq	r2, [r3, #0]
 8006848:	685b      	ldreq	r3, [r3, #4]
 800684a:	1852      	addeq	r2, r2, r1
 800684c:	6022      	streq	r2, [r4, #0]
 800684e:	6063      	str	r3, [r4, #4]
 8006850:	6004      	str	r4, [r0, #0]
 8006852:	e7ed      	b.n	8006830 <_free_r+0x24>
 8006854:	4613      	mov	r3, r2
 8006856:	685a      	ldr	r2, [r3, #4]
 8006858:	b10a      	cbz	r2, 800685e <_free_r+0x52>
 800685a:	42a2      	cmp	r2, r4
 800685c:	d9fa      	bls.n	8006854 <_free_r+0x48>
 800685e:	6819      	ldr	r1, [r3, #0]
 8006860:	1858      	adds	r0, r3, r1
 8006862:	42a0      	cmp	r0, r4
 8006864:	d10b      	bne.n	800687e <_free_r+0x72>
 8006866:	6820      	ldr	r0, [r4, #0]
 8006868:	4401      	add	r1, r0
 800686a:	1858      	adds	r0, r3, r1
 800686c:	4282      	cmp	r2, r0
 800686e:	6019      	str	r1, [r3, #0]
 8006870:	d1de      	bne.n	8006830 <_free_r+0x24>
 8006872:	6810      	ldr	r0, [r2, #0]
 8006874:	6852      	ldr	r2, [r2, #4]
 8006876:	4401      	add	r1, r0
 8006878:	6019      	str	r1, [r3, #0]
 800687a:	605a      	str	r2, [r3, #4]
 800687c:	e7d8      	b.n	8006830 <_free_r+0x24>
 800687e:	d902      	bls.n	8006886 <_free_r+0x7a>
 8006880:	230c      	movs	r3, #12
 8006882:	602b      	str	r3, [r5, #0]
 8006884:	e7d4      	b.n	8006830 <_free_r+0x24>
 8006886:	6820      	ldr	r0, [r4, #0]
 8006888:	1821      	adds	r1, r4, r0
 800688a:	428a      	cmp	r2, r1
 800688c:	bf01      	itttt	eq
 800688e:	6811      	ldreq	r1, [r2, #0]
 8006890:	6852      	ldreq	r2, [r2, #4]
 8006892:	1809      	addeq	r1, r1, r0
 8006894:	6021      	streq	r1, [r4, #0]
 8006896:	6062      	str	r2, [r4, #4]
 8006898:	605c      	str	r4, [r3, #4]
 800689a:	e7c9      	b.n	8006830 <_free_r+0x24>
 800689c:	bd38      	pop	{r3, r4, r5, pc}
 800689e:	bf00      	nop
 80068a0:	200000d4 	.word	0x200000d4

080068a4 <_realloc_r>:
 80068a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a6:	4607      	mov	r7, r0
 80068a8:	4614      	mov	r4, r2
 80068aa:	460e      	mov	r6, r1
 80068ac:	b921      	cbnz	r1, 80068b8 <_realloc_r+0x14>
 80068ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80068b2:	4611      	mov	r1, r2
 80068b4:	f7ff bc32 	b.w	800611c <_malloc_r>
 80068b8:	b922      	cbnz	r2, 80068c4 <_realloc_r+0x20>
 80068ba:	f7ff ffa7 	bl	800680c <_free_r>
 80068be:	4625      	mov	r5, r4
 80068c0:	4628      	mov	r0, r5
 80068c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068c4:	f000 f814 	bl	80068f0 <_malloc_usable_size_r>
 80068c8:	42a0      	cmp	r0, r4
 80068ca:	d20f      	bcs.n	80068ec <_realloc_r+0x48>
 80068cc:	4621      	mov	r1, r4
 80068ce:	4638      	mov	r0, r7
 80068d0:	f7ff fc24 	bl	800611c <_malloc_r>
 80068d4:	4605      	mov	r5, r0
 80068d6:	2800      	cmp	r0, #0
 80068d8:	d0f2      	beq.n	80068c0 <_realloc_r+0x1c>
 80068da:	4631      	mov	r1, r6
 80068dc:	4622      	mov	r2, r4
 80068de:	f7ff ff6f 	bl	80067c0 <memcpy>
 80068e2:	4631      	mov	r1, r6
 80068e4:	4638      	mov	r0, r7
 80068e6:	f7ff ff91 	bl	800680c <_free_r>
 80068ea:	e7e9      	b.n	80068c0 <_realloc_r+0x1c>
 80068ec:	4635      	mov	r5, r6
 80068ee:	e7e7      	b.n	80068c0 <_realloc_r+0x1c>

080068f0 <_malloc_usable_size_r>:
 80068f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068f4:	1f18      	subs	r0, r3, #4
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	bfbc      	itt	lt
 80068fa:	580b      	ldrlt	r3, [r1, r0]
 80068fc:	18c0      	addlt	r0, r0, r3
 80068fe:	4770      	bx	lr

08006900 <_init>:
 8006900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006902:	bf00      	nop
 8006904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006906:	bc08      	pop	{r3}
 8006908:	469e      	mov	lr, r3
 800690a:	4770      	bx	lr

0800690c <_fini>:
 800690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690e:	bf00      	nop
 8006910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006912:	bc08      	pop	{r3}
 8006914:	469e      	mov	lr, r3
 8006916:	4770      	bx	lr
